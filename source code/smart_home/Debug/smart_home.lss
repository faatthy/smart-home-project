
smart_home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000076ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000007bc  00800060  000076ce  00007762  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  0080081c  0080081c  00007f1e  2**0
                  ALLOC
  3 .stab         0000a2a8  00000000  00000000  00007f20  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002a6e  00000000  00000000  000121c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00014c36  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00014dd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00014fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  000173d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00018759  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00019930  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00019af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  00019de6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001a754  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 de 11 	jmp	0x23bc	; 0x23bc <__vector_1>
       8:	0c 94 11 12 	jmp	0x2422	; 0x2422 <__vector_2>
       c:	0c 94 44 12 	jmp	0x2488	; 0x2488 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 c2 0a 	jmp	0x1584	; 0x1584 <__vector_10>
      2c:	0c 94 6b 0b 	jmp	0x16d6	; 0x16d6 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 10 17 	jmp	0x2e20	; 0x2e20 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	18 e0       	ldi	r17, 0x08	; 8
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ec       	ldi	r30, 0xCE	; 206
      68:	f6 e7       	ldi	r31, 0x76	; 118
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 31       	cpi	r26, 0x1C	; 28
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	18 e0       	ldi	r17, 0x08	; 8
      78:	ac e1       	ldi	r26, 0x1C	; 28
      7a:	b8 e0       	ldi	r27, 0x08	; 8
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 33       	cpi	r26, 0x36	; 54
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <main>
      8a:	0c 94 65 3b 	jmp	0x76ca	; 0x76ca <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b2 3a 	jmp	0x7564	; 0x7564 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e0       	ldi	r26, 0x02	; 2
     128:	b7 e0       	ldi	r27, 0x07	; 7
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ce 3a 	jmp	0x759c	; 0x759c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 be 3a 	jmp	0x757c	; 0x757c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 da 3a 	jmp	0x75b4	; 0x75b4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 be 3a 	jmp	0x757c	; 0x757c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 da 3a 	jmp	0x75b4	; 0x75b4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b2 3a 	jmp	0x7564	; 0x7564 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 e0       	ldi	r24, 0x02	; 2
     496:	97 e0       	ldi	r25, 0x07	; 7
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ce 3a 	jmp	0x759c	; 0x759c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ba 3a 	jmp	0x7574	; 0x7574 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	62 e0       	ldi	r22, 0x02	; 2
     69c:	77 e0       	ldi	r23, 0x07	; 7
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 d6 3a 	jmp	0x75ac	; 0x75ac <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 be 3a 	jmp	0x757c	; 0x757c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 da 3a 	jmp	0x75b4	; 0x75b4 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 be 3a 	jmp	0x757c	; 0x757c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 da 3a 	jmp	0x75b4	; 0x75b4 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 be 3a 	jmp	0x757c	; 0x757c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 da 3a 	jmp	0x75b4	; 0x75b4 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 c2 3a 	jmp	0x7584	; 0x7584 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 de 3a 	jmp	0x75bc	; 0x75bc <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 ba 3a 	jmp	0x7574	; 0x7574 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 d6 3a 	jmp	0x75ac	; 0x75ac <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e6 5f       	subi	r30, 0xF6	; 246
     aca:	f8 4f       	sbci	r31, 0xF8	; 248
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <UART_enuInit>:
#include "../../LIBRARY/stdTypes.h"
#include"../DIO/DIO_int.h"
#include"UART_priv.h"
#include "UART_conf.h"
ES_t UART_enuInit(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <UART_enuInit+0x6>
     e34:	00 d0       	rcall	.+0      	; 0xe36 <UART_enuInit+0x8>
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	8c 83       	std	Y+4, r24	; 0x04

#if SPEED_MODE == NORMAL
	UCSRA &=~(1<<1);
#elif SPEED_MODE == DOUBLE
	UCSRA |= (1<<1);
     e3e:	ab e2       	ldi	r26, 0x2B	; 43
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	eb e2       	ldi	r30, 0x2B	; 43
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	82 60       	ori	r24, 0x02	; 2
     e4a:	8c 93       	st	X, r24
#endif

#if UART_MODE == TRANSCIEVER
	UCSRB |=(3<<3);
     e4c:	aa e2       	ldi	r26, 0x2A	; 42
     e4e:	b0 e0       	ldi	r27, 0x00	; 0
     e50:	ea e2       	ldi	r30, 0x2A	; 42
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	88 61       	ori	r24, 0x18	; 24
     e58:	8c 93       	st	X, r24
#endif

	u8 Local_u8UCSRC=0;
     e5a:	1b 82       	std	Y+3, r1	; 0x03
#if DATA_LEN == EIGHT
	Local_u8UCSRC |= (3<<1);
     e5c:	8b 81       	ldd	r24, Y+3	; 0x03
     e5e:	86 60       	ori	r24, 0x06	; 6
     e60:	8b 83       	std	Y+3, r24	; 0x03
#endif

#if PARITY_STATE == NO_PARITY
	Local_u8UCSRC &= ~ (3<<4);
     e62:	8b 81       	ldd	r24, Y+3	; 0x03
     e64:	8f 7c       	andi	r24, 0xCF	; 207
     e66:	8b 83       	std	Y+3, r24	; 0x03
#endif

#if STOP_STATE == ONE_STOP_BIT
	Local_u8UCSRC &= ~(1<<3);
     e68:	8b 81       	ldd	r24, Y+3	; 0x03
     e6a:	87 7f       	andi	r24, 0xF7	; 247
     e6c:	8b 83       	std	Y+3, r24	; 0x03
#endif

#if CLOCK_MODE == ASYCH
	Local_u8UCSRC &=~(1<<6);
     e6e:	8b 81       	ldd	r24, Y+3	; 0x03
     e70:	8f 7b       	andi	r24, 0xBF	; 191
     e72:	8b 83       	std	Y+3, r24	; 0x03
#endif
	Local_u8UCSRC |=(1<<7);
     e74:	8b 81       	ldd	r24, Y+3	; 0x03
     e76:	80 68       	ori	r24, 0x80	; 128
     e78:	8b 83       	std	Y+3, r24	; 0x03
	UCSRC = Local_u8UCSRC;
     e7a:	e0 e4       	ldi	r30, 0x40	; 64
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	8b 81       	ldd	r24, Y+3	; 0x03
     e80:	80 83       	st	Z, r24

	u16 Local_u16UBRR = BUAD(BAUDRATE);
     e82:	8f ec       	ldi	r24, 0xCF	; 207
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	9a 83       	std	Y+2, r25	; 0x02
     e88:	89 83       	std	Y+1, r24	; 0x01

	Local_u16UBRR &=~(1<<15);
     e8a:	89 81       	ldd	r24, Y+1	; 0x01
     e8c:	9a 81       	ldd	r25, Y+2	; 0x02
     e8e:	9f 77       	andi	r25, 0x7F	; 127
     e90:	9a 83       	std	Y+2, r25	; 0x02
     e92:	89 83       	std	Y+1, r24	; 0x01

	UBRRL  = (u8)Local_u16UBRR;
     e94:	e9 e2       	ldi	r30, 0x29	; 41
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	89 81       	ldd	r24, Y+1	; 0x01
     e9a:	80 83       	st	Z, r24
	UBRRH  = (u8)(Local_u16UBRR>>8);
     e9c:	e0 e4       	ldi	r30, 0x40	; 64
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	89 81       	ldd	r24, Y+1	; 0x01
     ea2:	9a 81       	ldd	r25, Y+2	; 0x02
     ea4:	89 2f       	mov	r24, r25
     ea6:	99 27       	eor	r25, r25
     ea8:	80 83       	st	Z, r24
	DIO_enuSetPinDirection(DIO_u8GROUP_D , DIO_u8PIN0 , DIO_u8INPUT);
     eaa:	83 e0       	ldi	r24, 0x03	; 3
     eac:	60 e0       	ldi	r22, 0x00	; 0
     eae:	40 e0       	ldi	r20, 0x00	; 0
     eb0:	0e 94 77 12 	call	0x24ee	; 0x24ee <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DIO_u8GROUP_D , DIO_u8PIN1 , DIO_u8OUTPUT);
     eb4:	83 e0       	ldi	r24, 0x03	; 3
     eb6:	61 e0       	ldi	r22, 0x01	; 1
     eb8:	41 e0       	ldi	r20, 0x01	; 1
     eba:	0e 94 77 12 	call	0x24ee	; 0x24ee <DIO_enuSetPinDirection>

	return Local_enuErrorState;
     ebe:	8c 81       	ldd	r24, Y+4	; 0x04
}
     ec0:	0f 90       	pop	r0
     ec2:	0f 90       	pop	r0
     ec4:	0f 90       	pop	r0
     ec6:	0f 90       	pop	r0
     ec8:	cf 91       	pop	r28
     eca:	df 91       	pop	r29
     ecc:	08 95       	ret

00000ece <UART_enuSendChar>:

ES_t UART_enuSendChar(u8 Copy_u8Data)
{
     ece:	df 93       	push	r29
     ed0:	cf 93       	push	r28
     ed2:	00 d0       	rcall	.+0      	; 0xed4 <UART_enuSendChar+0x6>
     ed4:	cd b7       	in	r28, 0x3d	; 61
     ed6:	de b7       	in	r29, 0x3e	; 62
     ed8:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	89 83       	std	Y+1, r24	; 0x01

	while (!((UCSRA>>UDRE)&1));
     ede:	eb e2       	ldi	r30, 0x2B	; 43
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	82 95       	swap	r24
     ee6:	86 95       	lsr	r24
     ee8:	87 70       	andi	r24, 0x07	; 7
     eea:	88 2f       	mov	r24, r24
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	81 70       	andi	r24, 0x01	; 1
     ef0:	90 70       	andi	r25, 0x00	; 0
     ef2:	00 97       	sbiw	r24, 0x00	; 0
     ef4:	a1 f3       	breq	.-24     	; 0xede <UART_enuSendChar+0x10>
	UDR = Copy_u8Data;
     ef6:	ec e2       	ldi	r30, 0x2C	; 44
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	8a 81       	ldd	r24, Y+2	; 0x02
     efc:	80 83       	st	Z, r24
	/*
	 * UDR = Copy_u8Data;
	 * while( ! ((UCSRA>>TXC) & 1 ) );
	 * UCSRA |= (1<<TXC);
	 */
	return Local_enuErrorState;
     efe:	89 81       	ldd	r24, Y+1	; 0x01
}
     f00:	0f 90       	pop	r0
     f02:	0f 90       	pop	r0
     f04:	cf 91       	pop	r28
     f06:	df 91       	pop	r29
     f08:	08 95       	ret

00000f0a <UART_enuRecieveChar>:

ES_t UART_enuRecieveChar(u8 *Copy_pu8Data)
{
     f0a:	df 93       	push	r29
     f0c:	cf 93       	push	r28
     f0e:	00 d0       	rcall	.+0      	; 0xf10 <UART_enuRecieveChar+0x6>
     f10:	0f 92       	push	r0
     f12:	cd b7       	in	r28, 0x3d	; 61
     f14:	de b7       	in	r29, 0x3e	; 62
     f16:	9b 83       	std	Y+3, r25	; 0x03
     f18:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	89 83       	std	Y+1, r24	; 0x01

	while (!((UCSRA>>RXC)&1));
     f1e:	eb e2       	ldi	r30, 0x2B	; 43
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	88 23       	and	r24, r24
     f26:	dc f7       	brge	.-10     	; 0xf1e <UART_enuRecieveChar+0x14>
	*Copy_pu8Data = UDR;
     f28:	ec e2       	ldi	r30, 0x2C	; 44
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	ea 81       	ldd	r30, Y+2	; 0x02
     f30:	fb 81       	ldd	r31, Y+3	; 0x03
     f32:	80 83       	st	Z, r24

	return Local_enuErrorState;
     f34:	89 81       	ldd	r24, Y+1	; 0x01
}
     f36:	0f 90       	pop	r0
     f38:	0f 90       	pop	r0
     f3a:	0f 90       	pop	r0
     f3c:	cf 91       	pop	r28
     f3e:	df 91       	pop	r29
     f40:	08 95       	ret

00000f42 <UART_enuSendString>:

ES_t UART_enuSendString(const u8* Copy_pcData)
{
     f42:	df 93       	push	r29
     f44:	cf 93       	push	r28
     f46:	00 d0       	rcall	.+0      	; 0xf48 <UART_enuSendString+0x6>
     f48:	0f 92       	push	r0
     f4a:	cd b7       	in	r28, 0x3d	; 61
     f4c:	de b7       	in	r29, 0x3e	; 62
     f4e:	9b 83       	std	Y+3, r25	; 0x03
     f50:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	89 83       	std	Y+1, r24	; 0x01
     f56:	17 c0       	rjmp	.+46     	; 0xf86 <UART_enuSendString+0x44>

	while (*Copy_pcData != '\0')
	{
		while (!((UCSRA>>UDRE)&1));
     f58:	eb e2       	ldi	r30, 0x2B	; 43
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	82 95       	swap	r24
     f60:	86 95       	lsr	r24
     f62:	87 70       	andi	r24, 0x07	; 7
     f64:	88 2f       	mov	r24, r24
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	81 70       	andi	r24, 0x01	; 1
     f6a:	90 70       	andi	r25, 0x00	; 0
     f6c:	00 97       	sbiw	r24, 0x00	; 0
     f6e:	a1 f3       	breq	.-24     	; 0xf58 <UART_enuSendString+0x16>
		UDR = *Copy_pcData;
     f70:	ac e2       	ldi	r26, 0x2C	; 44
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	ea 81       	ldd	r30, Y+2	; 0x02
     f76:	fb 81       	ldd	r31, Y+3	; 0x03
     f78:	80 81       	ld	r24, Z
     f7a:	8c 93       	st	X, r24
		Copy_pcData++;
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
     f7e:	9b 81       	ldd	r25, Y+3	; 0x03
     f80:	01 96       	adiw	r24, 0x01	; 1
     f82:	9b 83       	std	Y+3, r25	; 0x03
     f84:	8a 83       	std	Y+2, r24	; 0x02

ES_t UART_enuSendString(const u8* Copy_pcData)
{
	ES_t Local_enuErrorState = ES_NOK;

	while (*Copy_pcData != '\0')
     f86:	ea 81       	ldd	r30, Y+2	; 0x02
     f88:	fb 81       	ldd	r31, Y+3	; 0x03
     f8a:	80 81       	ld	r24, Z
     f8c:	88 23       	and	r24, r24
     f8e:	21 f7       	brne	.-56     	; 0xf58 <UART_enuSendString+0x16>
		while (!((UCSRA>>UDRE)&1));
		UDR = *Copy_pcData;
		Copy_pcData++;
	}

	return Local_enuErrorState;
     f90:	89 81       	ldd	r24, Y+1	; 0x01
}
     f92:	0f 90       	pop	r0
     f94:	0f 90       	pop	r0
     f96:	0f 90       	pop	r0
     f98:	cf 91       	pop	r28
     f9a:	df 91       	pop	r29
     f9c:	08 95       	ret

00000f9e <UART_enuRecieveString>:


ES_t UART_enuRecieveString(char * Copy_pcData)
{
     f9e:	df 93       	push	r29
     fa0:	cf 93       	push	r28
     fa2:	00 d0       	rcall	.+0      	; 0xfa4 <UART_enuRecieveString+0x6>
     fa4:	00 d0       	rcall	.+0      	; 0xfa6 <UART_enuRecieveString+0x8>
     fa6:	0f 92       	push	r0
     fa8:	cd b7       	in	r28, 0x3d	; 61
     faa:	de b7       	in	r29, 0x3e	; 62
     fac:	9d 83       	std	Y+5, r25	; 0x05
     fae:	8c 83       	std	Y+4, r24	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	8b 83       	std	Y+3, r24	; 0x03

	u8 Local_u8Data=0 , Local_u8Index=0;
     fb4:	1a 82       	std	Y+2, r1	; 0x02
     fb6:	19 82       	std	Y+1, r1	; 0x01

	while (1)
	{
		while (!((UCSRA>>RXC)&1));
     fb8:	eb e2       	ldi	r30, 0x2B	; 43
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	88 23       	and	r24, r24
     fc0:	dc f7       	brge	.-10     	; 0xfb8 <UART_enuRecieveString+0x1a>
		Local_u8Data = UDR;
     fc2:	ec e2       	ldi	r30, 0x2C	; 44
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	8a 83       	std	Y+2, r24	; 0x02

		if (Local_u8Data == '\r' || Local_u8Data == '\n' || Local_u8Data == '\0')
     fca:	8a 81       	ldd	r24, Y+2	; 0x02
     fcc:	8d 30       	cpi	r24, 0x0D	; 13
     fce:	31 f0       	breq	.+12     	; 0xfdc <UART_enuRecieveString+0x3e>
     fd0:	8a 81       	ldd	r24, Y+2	; 0x02
     fd2:	8a 30       	cpi	r24, 0x0A	; 10
     fd4:	19 f0       	breq	.+6      	; 0xfdc <UART_enuRecieveString+0x3e>
     fd6:	8a 81       	ldd	r24, Y+2	; 0x02
     fd8:	88 23       	and	r24, r24
     fda:	91 f4       	brne	.+36     	; 0x1000 <UART_enuRecieveString+0x62>
		{
			Copy_pcData[Local_u8Index]='\0';
     fdc:	89 81       	ldd	r24, Y+1	; 0x01
     fde:	28 2f       	mov	r18, r24
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	8c 81       	ldd	r24, Y+4	; 0x04
     fe4:	9d 81       	ldd	r25, Y+5	; 0x05
     fe6:	fc 01       	movw	r30, r24
     fe8:	e2 0f       	add	r30, r18
     fea:	f3 1f       	adc	r31, r19
     fec:	10 82       	st	Z, r1
		Copy_pcData[Local_u8Index]=Local_u8Data;
		Local_u8Index++;
	}


	return Local_enuErrorState;
     fee:	8b 81       	ldd	r24, Y+3	; 0x03
}
     ff0:	0f 90       	pop	r0
     ff2:	0f 90       	pop	r0
     ff4:	0f 90       	pop	r0
     ff6:	0f 90       	pop	r0
     ff8:	0f 90       	pop	r0
     ffa:	cf 91       	pop	r28
     ffc:	df 91       	pop	r29
     ffe:	08 95       	ret
		if (Local_u8Data == '\r' || Local_u8Data == '\n' || Local_u8Data == '\0')
		{
			Copy_pcData[Local_u8Index]='\0';
			break;
		}
		Copy_pcData[Local_u8Index]=Local_u8Data;
    1000:	89 81       	ldd	r24, Y+1	; 0x01
    1002:	28 2f       	mov	r18, r24
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	8c 81       	ldd	r24, Y+4	; 0x04
    1008:	9d 81       	ldd	r25, Y+5	; 0x05
    100a:	fc 01       	movw	r30, r24
    100c:	e2 0f       	add	r30, r18
    100e:	f3 1f       	adc	r31, r19
    1010:	8a 81       	ldd	r24, Y+2	; 0x02
    1012:	80 83       	st	Z, r24
		Local_u8Index++;
    1014:	89 81       	ldd	r24, Y+1	; 0x01
    1016:	8f 5f       	subi	r24, 0xFF	; 255
    1018:	89 83       	std	Y+1, r24	; 0x01
    101a:	ce cf       	rjmp	.-100    	; 0xfb8 <UART_enuRecieveString+0x1a>

0000101c <Pwm1_enuInit>:
#include"../DIO/DIO_int.h"
#include"TIMER1_priv.h"
#include"TIMER1_conf.h"
#include "../../HAL/LCD/LCD_int.h"
#include "util/delay.h"
ES_t Pwm1_enuInit(void){
    101c:	df 93       	push	r29
    101e:	cf 93       	push	r28
    1020:	0f 92       	push	r0
    1022:	cd b7       	in	r28, 0x3d	; 61
    1024:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_OK;
    1026:	19 82       	std	Y+1, r1	; 0x01
#if PWM1_MODE ==FAST_PWM
	TCCR1A&=~(1<<0);
    1028:	af e4       	ldi	r26, 0x4F	; 79
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	ef e4       	ldi	r30, 0x4F	; 79
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	8e 7f       	andi	r24, 0xFE	; 254
    1034:	8c 93       	st	X, r24
	TCCR1A|=(1<<1);
    1036:	af e4       	ldi	r26, 0x4F	; 79
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	ef e4       	ldi	r30, 0x4F	; 79
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	82 60       	ori	r24, 0x02	; 2
    1042:	8c 93       	st	X, r24
	TCCR1B|=(1<<3);
    1044:	ae e4       	ldi	r26, 0x4E	; 78
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	ee e4       	ldi	r30, 0x4E	; 78
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	88 60       	ori	r24, 0x08	; 8
    1050:	8c 93       	st	X, r24
	TCCR1B|=(1<<4);
    1052:	ae e4       	ldi	r26, 0x4E	; 78
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	ee e4       	ldi	r30, 0x4E	; 78
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	80 61       	ori	r24, 0x10	; 16
    105e:	8c 93       	st	X, r24
#endif

#if OUTPUT_MODE==NON_INVERTED
	TCCR1A|=(1<<7);
    1060:	af e4       	ldi	r26, 0x4F	; 79
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	ef e4       	ldi	r30, 0x4F	; 79
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	80 68       	ori	r24, 0x80	; 128
    106c:	8c 93       	st	X, r24
	TCCR1A&=~(1<<6);
    106e:	af e4       	ldi	r26, 0x4F	; 79
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	ef e4       	ldi	r30, 0x4F	; 79
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	8f 7b       	andi	r24, 0xBF	; 191
    107a:	8c 93       	st	X, r24
#endif
	DIO_enuSetPinDirection(DIO_u8GROUP_D,DIO_u8PIN5,DIO_u8OUTPUT);
    107c:	83 e0       	ldi	r24, 0x03	; 3
    107e:	65 e0       	ldi	r22, 0x05	; 5
    1080:	41 e0       	ldi	r20, 0x01	; 1
    1082:	0e 94 77 12 	call	0x24ee	; 0x24ee <DIO_enuSetPinDirection>


	//CHANNEL 2 INIT
  DIO_enuSetPinDirection(DIO_u8GROUP_D,DIO_u8PIN4,DIO_u8OUTPUT);
    1086:	83 e0       	ldi	r24, 0x03	; 3
    1088:	64 e0       	ldi	r22, 0x04	; 4
    108a:	41 e0       	ldi	r20, 0x01	; 1
    108c:	0e 94 77 12 	call	0x24ee	; 0x24ee <DIO_enuSetPinDirection>
	TCCR1A|=(1<<5);
    1090:	af e4       	ldi	r26, 0x4F	; 79
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	ef e4       	ldi	r30, 0x4F	; 79
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	80 62       	ori	r24, 0x20	; 32
    109c:	8c 93       	st	X, r24
	TCCR1A&=~(1<<4);
    109e:	af e4       	ldi	r26, 0x4F	; 79
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	ef e4       	ldi	r30, 0x4F	; 79
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	8f 7e       	andi	r24, 0xEF	; 239
    10aa:	8c 93       	st	X, r24

	return Local_enuErrorState;
    10ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    10ae:	0f 90       	pop	r0
    10b0:	cf 91       	pop	r28
    10b2:	df 91       	pop	r29
    10b4:	08 95       	ret

000010b6 <Pwm1_enuSetFrequency>:

ES_t Pwm1_enuSetFrequency(u16 Copy_u16Frequency){
    10b6:	0f 93       	push	r16
    10b8:	1f 93       	push	r17
    10ba:	df 93       	push	r29
    10bc:	cf 93       	push	r28
    10be:	00 d0       	rcall	.+0      	; 0x10c0 <Pwm1_enuSetFrequency+0xa>
    10c0:	cd b7       	in	r28, 0x3d	; 61
    10c2:	de b7       	in	r29, 0x3e	; 62
    10c4:	9a 83       	std	Y+2, r25	; 0x02
    10c6:	89 83       	std	Y+1, r24	; 0x01

	ICR1 = ((CRYSTAL_FREQUENCY * 1000000) / (Copy_u16Frequency* TIMER1_PRESCALER));
    10c8:	06 e4       	ldi	r16, 0x46	; 70
    10ca:	10 e0       	ldi	r17, 0x00	; 0
    10cc:	89 81       	ldd	r24, Y+1	; 0x01
    10ce:	9a 81       	ldd	r25, Y+2	; 0x02
    10d0:	00 24       	eor	r0, r0
    10d2:	96 95       	lsr	r25
    10d4:	87 95       	ror	r24
    10d6:	07 94       	ror	r0
    10d8:	96 95       	lsr	r25
    10da:	87 95       	ror	r24
    10dc:	07 94       	ror	r0
    10de:	98 2f       	mov	r25, r24
    10e0:	80 2d       	mov	r24, r0
    10e2:	9c 01       	movw	r18, r24
    10e4:	40 e0       	ldi	r20, 0x00	; 0
    10e6:	50 e0       	ldi	r21, 0x00	; 0
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	94 e2       	ldi	r25, 0x24	; 36
    10ec:	a4 ef       	ldi	r26, 0xF4	; 244
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	bc 01       	movw	r22, r24
    10f2:	cd 01       	movw	r24, r26
    10f4:	0e 94 75 3a 	call	0x74ea	; 0x74ea <__divmodsi4>
    10f8:	da 01       	movw	r26, r20
    10fa:	c9 01       	movw	r24, r18
    10fc:	f8 01       	movw	r30, r16
    10fe:	91 83       	std	Z+1, r25	; 0x01
    1100:	80 83       	st	Z, r24
	return ES_OK;
    1102:	80 e0       	ldi	r24, 0x00	; 0
}
    1104:	0f 90       	pop	r0
    1106:	0f 90       	pop	r0
    1108:	cf 91       	pop	r28
    110a:	df 91       	pop	r29
    110c:	1f 91       	pop	r17
    110e:	0f 91       	pop	r16
    1110:	08 95       	ret

00001112 <Pwm1_enuSetDutyCycleChannel_1>:
ES_t Pwm1_enuSetDutyCycleChannel_1(u8 Copy_f32DutyCycle){
    1112:	ef 92       	push	r14
    1114:	ff 92       	push	r15
    1116:	0f 93       	push	r16
    1118:	1f 93       	push	r17
    111a:	df 93       	push	r29
    111c:	cf 93       	push	r28
    111e:	00 d0       	rcall	.+0      	; 0x1120 <Pwm1_enuSetDutyCycleChannel_1+0xe>
    1120:	cd b7       	in	r28, 0x3d	; 61
    1122:	de b7       	in	r29, 0x3e	; 62
    1124:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_OK;
    1126:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_f32DutyCycle<0){
		Copy_f32DutyCycle=0;
	}
	else if(Copy_f32DutyCycle>100){
    1128:	8a 81       	ldd	r24, Y+2	; 0x02
    112a:	85 36       	cpi	r24, 0x65	; 101
    112c:	10 f0       	brcs	.+4      	; 0x1132 <Pwm1_enuSetDutyCycleChannel_1+0x20>
		Copy_f32DutyCycle=100;
    112e:	84 e6       	ldi	r24, 0x64	; 100
    1130:	8a 83       	std	Y+2, r24	; 0x02
	}
	OCR1A = (u16)(Copy_f32DutyCycle *( ICR1/100));
    1132:	0f 2e       	mov	r0, r31
    1134:	fa e4       	ldi	r31, 0x4A	; 74
    1136:	ef 2e       	mov	r14, r31
    1138:	ff 24       	eor	r15, r15
    113a:	f0 2d       	mov	r31, r0
    113c:	8a 81       	ldd	r24, Y+2	; 0x02
    113e:	08 2f       	mov	r16, r24
    1140:	10 e0       	ldi	r17, 0x00	; 0
    1142:	e6 e4       	ldi	r30, 0x46	; 70
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	91 81       	ldd	r25, Z+1	; 0x01
    114a:	24 e6       	ldi	r18, 0x64	; 100
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	b9 01       	movw	r22, r18
    1150:	0e 94 4e 3a 	call	0x749c	; 0x749c <__udivmodhi4>
    1154:	cb 01       	movw	r24, r22
    1156:	9c 01       	movw	r18, r24
    1158:	02 9f       	mul	r16, r18
    115a:	c0 01       	movw	r24, r0
    115c:	03 9f       	mul	r16, r19
    115e:	90 0d       	add	r25, r0
    1160:	12 9f       	mul	r17, r18
    1162:	90 0d       	add	r25, r0
    1164:	11 24       	eor	r1, r1
    1166:	f7 01       	movw	r30, r14
    1168:	91 83       	std	Z+1, r25	; 0x01
    116a:	80 83       	st	Z, r24


		return Local_enuErrorState;
    116c:	89 81       	ldd	r24, Y+1	; 0x01
	}
    116e:	0f 90       	pop	r0
    1170:	0f 90       	pop	r0
    1172:	cf 91       	pop	r28
    1174:	df 91       	pop	r29
    1176:	1f 91       	pop	r17
    1178:	0f 91       	pop	r16
    117a:	ff 90       	pop	r15
    117c:	ef 90       	pop	r14
    117e:	08 95       	ret

00001180 <Pwm1_enuSetDutyCycleChannel_2>:
ES_t Pwm1_enuSetDutyCycleChannel_2(u8 Copy_f32DutyCycle){
    1180:	ef 92       	push	r14
    1182:	ff 92       	push	r15
    1184:	0f 93       	push	r16
    1186:	1f 93       	push	r17
    1188:	df 93       	push	r29
    118a:	cf 93       	push	r28
    118c:	00 d0       	rcall	.+0      	; 0x118e <Pwm1_enuSetDutyCycleChannel_2+0xe>
    118e:	cd b7       	in	r28, 0x3d	; 61
    1190:	de b7       	in	r29, 0x3e	; 62
    1192:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_OK;
    1194:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_f32DutyCycle<0){
		Copy_f32DutyCycle=0;
	}
	else if(Copy_f32DutyCycle>100){
    1196:	8a 81       	ldd	r24, Y+2	; 0x02
    1198:	85 36       	cpi	r24, 0x65	; 101
    119a:	10 f0       	brcs	.+4      	; 0x11a0 <Pwm1_enuSetDutyCycleChannel_2+0x20>
		Copy_f32DutyCycle=100;
    119c:	84 e6       	ldi	r24, 0x64	; 100
    119e:	8a 83       	std	Y+2, r24	; 0x02
	}

		OCR1B = (u16)(Copy_f32DutyCycle *( ICR1/100)-1);
    11a0:	0f 2e       	mov	r0, r31
    11a2:	f8 e4       	ldi	r31, 0x48	; 72
    11a4:	ef 2e       	mov	r14, r31
    11a6:	ff 24       	eor	r15, r15
    11a8:	f0 2d       	mov	r31, r0
    11aa:	8a 81       	ldd	r24, Y+2	; 0x02
    11ac:	08 2f       	mov	r16, r24
    11ae:	10 e0       	ldi	r17, 0x00	; 0
    11b0:	e6 e4       	ldi	r30, 0x46	; 70
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	91 81       	ldd	r25, Z+1	; 0x01
    11b8:	24 e6       	ldi	r18, 0x64	; 100
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	b9 01       	movw	r22, r18
    11be:	0e 94 4e 3a 	call	0x749c	; 0x749c <__udivmodhi4>
    11c2:	cb 01       	movw	r24, r22
    11c4:	9c 01       	movw	r18, r24
    11c6:	02 9f       	mul	r16, r18
    11c8:	c0 01       	movw	r24, r0
    11ca:	03 9f       	mul	r16, r19
    11cc:	90 0d       	add	r25, r0
    11ce:	12 9f       	mul	r17, r18
    11d0:	90 0d       	add	r25, r0
    11d2:	11 24       	eor	r1, r1
    11d4:	01 97       	sbiw	r24, 0x01	; 1
    11d6:	f7 01       	movw	r30, r14
    11d8:	91 83       	std	Z+1, r25	; 0x01
    11da:	80 83       	st	Z, r24


		return Local_enuErrorState;
    11dc:	89 81       	ldd	r24, Y+1	; 0x01
	}
    11de:	0f 90       	pop	r0
    11e0:	0f 90       	pop	r0
    11e2:	cf 91       	pop	r28
    11e4:	df 91       	pop	r29
    11e6:	1f 91       	pop	r17
    11e8:	0f 91       	pop	r16
    11ea:	ff 90       	pop	r15
    11ec:	ef 90       	pop	r14
    11ee:	08 95       	ret

000011f0 <Pwm1_enuStart>:


ES_t Pwm1_enuStart(void){
    11f0:	df 93       	push	r29
    11f2:	cf 93       	push	r28
    11f4:	0f 92       	push	r0
    11f6:	cd b7       	in	r28, 0x3d	; 61
    11f8:	de b7       	in	r29, 0x3e	; 62
	ES_t local_enuErrorState=ES_OK;
    11fa:	19 82       	std	Y+1, r1	; 0x01

		TCCR1B|=(1<<0);
	#elif TIMER1_PRESCALER==PRESCLNG_8
		TCCR1B|=(1<<1);
	#elif TIMER1_PRESCALER==PRESCLNG_64
		TCCR1B|=(3<<0);
    11fc:	ae e4       	ldi	r26, 0x4E	; 78
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	ee e4       	ldi	r30, 0x4E	; 78
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	83 60       	ori	r24, 0x03	; 3
    1208:	8c 93       	st	X, r24
		TCCR1B|=(7<<0);
	#elif
		local_enuErrorState=ES_NOK;
	#endif

		return local_enuErrorState;
    120a:	89 81       	ldd	r24, Y+1	; 0x01
}
    120c:	0f 90       	pop	r0
    120e:	cf 91       	pop	r28
    1210:	df 91       	pop	r29
    1212:	08 95       	ret

00001214 <Pwm1_enuStop>:
ES_t Pwm1_enuStop(void){
    1214:	df 93       	push	r29
    1216:	cf 93       	push	r28
    1218:	cd b7       	in	r28, 0x3d	; 61
    121a:	de b7       	in	r29, 0x3e	; 62
	TCCR1B&=~(7<<0);
    121c:	ae e4       	ldi	r26, 0x4E	; 78
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	ee e4       	ldi	r30, 0x4E	; 78
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	88 7f       	andi	r24, 0xF8	; 248
    1228:	8c 93       	st	X, r24
	return ES_OK;
    122a:	80 e0       	ldi	r24, 0x00	; 0
}
    122c:	cf 91       	pop	r28
    122e:	df 91       	pop	r29
    1230:	08 95       	ret

00001232 <TIMER0_enuInit>:
#include "../TIMER0/TIMER0_conf.h"
static void (*ptr_ovf)(void)=NULL;
static void (*ptr_Ctc)(void)=NULL;
u16 Timer0_Num_OVF = 0;
u8 Timer0_Init_Value = 0;
ES_t TIMER0_enuInit(void){
    1232:	df 93       	push	r29
    1234:	cf 93       	push	r28
    1236:	0f 92       	push	r0
    1238:	cd b7       	in	r28, 0x3d	; 61
    123a:	de b7       	in	r29, 0x3e	; 62
	ES_t local_enuErrorState=ES_OK;
    123c:	19 82       	std	Y+1, r1	; 0x01

#if TIMER0_MODE==NORMAL_MODE
	TCCR0=0X00;
    123e:	e3 e5       	ldi	r30, 0x53	; 83
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	10 82       	st	Z, r1
	TCCR0|=(1<<3);
//	TIMSK|=(1<<1);
#elif
	local_enuErrorState=ES_NOK;
#endif
	return local_enuErrorState;
    1244:	89 81       	ldd	r24, Y+1	; 0x01
}
    1246:	0f 90       	pop	r0
    1248:	cf 91       	pop	r28
    124a:	df 91       	pop	r29
    124c:	08 95       	ret

0000124e <TIMER0_enuStart>:
ES_t TIMER0_enuStart(void){
    124e:	df 93       	push	r29
    1250:	cf 93       	push	r28
    1252:	0f 92       	push	r0
    1254:	cd b7       	in	r28, 0x3d	; 61
    1256:	de b7       	in	r29, 0x3e	; 62
	ES_t local_enuErrorState=ES_OK;
    1258:	19 82       	std	Y+1, r1	; 0x01
	TCCR0&=~(7<<0);
    125a:	a3 e5       	ldi	r26, 0x53	; 83
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	e3 e5       	ldi	r30, 0x53	; 83
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	88 7f       	andi	r24, 0xF8	; 248
    1266:	8c 93       	st	X, r24
#elif TIMER0_PRES==PRES_64
	TCCR0|=(3<<0);
#elif TIMER0_PRES==PRES_256
	TCCR0|=(1<<2);
#elif TIMER0_PRES==PRES_1024
	TCCR0|=(5<<0);
    1268:	a3 e5       	ldi	r26, 0x53	; 83
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	e3 e5       	ldi	r30, 0x53	; 83
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	85 60       	ori	r24, 0x05	; 5
    1274:	8c 93       	st	X, r24
	TCCR0|=(3<<4);
#elif
	local_EnuErrorState=ES_NOK;
#endif
#endif
	return local_enuErrorState;
    1276:	89 81       	ldd	r24, Y+1	; 0x01

	}
    1278:	0f 90       	pop	r0
    127a:	cf 91       	pop	r28
    127c:	df 91       	pop	r29
    127e:	08 95       	ret

00001280 <TIMER0_enuStop>:
ES_t TIMER0_enuStop(void){
    1280:	df 93       	push	r29
    1282:	cf 93       	push	r28
    1284:	cd b7       	in	r28, 0x3d	; 61
    1286:	de b7       	in	r29, 0x3e	; 62
	TCCR0&=~(7<<0);
    1288:	a3 e5       	ldi	r26, 0x53	; 83
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	e3 e5       	ldi	r30, 0x53	; 83
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	88 7f       	andi	r24, 0xF8	; 248
    1294:	8c 93       	st	X, r24
	return ES_OK;
    1296:	80 e0       	ldi	r24, 0x00	; 0
}
    1298:	cf 91       	pop	r28
    129a:	df 91       	pop	r29
    129c:	08 95       	ret

0000129e <TIMER0_enuDelay>:
ES_t TIMER0_enuDelay(u16 copy_u16millisec){
    129e:	ef 92       	push	r14
    12a0:	ff 92       	push	r15
    12a2:	0f 93       	push	r16
    12a4:	1f 93       	push	r17
    12a6:	df 93       	push	r29
    12a8:	cf 93       	push	r28
    12aa:	cd b7       	in	r28, 0x3d	; 61
    12ac:	de b7       	in	r29, 0x3e	; 62
    12ae:	63 97       	sbiw	r28, 0x13	; 19
    12b0:	0f b6       	in	r0, 0x3f	; 63
    12b2:	f8 94       	cli
    12b4:	de bf       	out	0x3e, r29	; 62
    12b6:	0f be       	out	0x3f, r0	; 63
    12b8:	cd bf       	out	0x3d, r28	; 61
    12ba:	9b 8b       	std	Y+19, r25	; 0x13
    12bc:	8a 8b       	std	Y+18, r24	; 0x12
	ES_t local_enuerrorState=ES_OK;
    12be:	19 8a       	std	Y+17, r1	; 0x11
	u16 local_u16Num_ov,local_u16TimeInitial;
	double local_doubleTimeMaxDelay,local_doubleTimetick;
	u32 local_u32OverFlowCounnt=0;
    12c0:	19 82       	std	Y+1, r1	; 0x01
    12c2:	1a 82       	std	Y+2, r1	; 0x02
    12c4:	1b 82       	std	Y+3, r1	; 0x03
    12c6:	1c 82       	std	Y+4, r1	; 0x04

	local_doubleTimetick = 1024.0/16000.0;   // pres/F_CPU
    12c8:	8f e6       	ldi	r24, 0x6F	; 111
    12ca:	92 e1       	ldi	r25, 0x12	; 18
    12cc:	a3 e8       	ldi	r26, 0x83	; 131
    12ce:	bd e3       	ldi	r27, 0x3D	; 61
    12d0:	8d 83       	std	Y+5, r24	; 0x05
    12d2:	9e 83       	std	Y+6, r25	; 0x06
    12d4:	af 83       	std	Y+7, r26	; 0x07
    12d6:	b8 87       	std	Y+8, r27	; 0x08

	local_doubleTimeMaxDelay= 256.0*1024.0/16000.0; //ms		Tmaxdelay = Ttick * 2^8
    12d8:	8f e6       	ldi	r24, 0x6F	; 111
    12da:	92 e1       	ldi	r25, 0x12	; 18
    12dc:	a3 e8       	ldi	r26, 0x83	; 131
    12de:	b1 e4       	ldi	r27, 0x41	; 65
    12e0:	89 87       	std	Y+9, r24	; 0x09
    12e2:	9a 87       	std	Y+10, r25	; 0x0a
    12e4:	ab 87       	std	Y+11, r26	; 0x0b
    12e6:	bc 87       	std	Y+12, r27	; 0x0c
	if(copy_u16millisec<local_doubleTimeMaxDelay){
    12e8:	8a 89       	ldd	r24, Y+18	; 0x12
    12ea:	9b 89       	ldd	r25, Y+19	; 0x13
    12ec:	cc 01       	movw	r24, r24
    12ee:	a0 e0       	ldi	r26, 0x00	; 0
    12f0:	b0 e0       	ldi	r27, 0x00	; 0
    12f2:	bc 01       	movw	r22, r24
    12f4:	cd 01       	movw	r24, r26
    12f6:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    12fa:	dc 01       	movw	r26, r24
    12fc:	cb 01       	movw	r24, r22
    12fe:	bc 01       	movw	r22, r24
    1300:	cd 01       	movw	r24, r26
    1302:	29 85       	ldd	r18, Y+9	; 0x09
    1304:	3a 85       	ldd	r19, Y+10	; 0x0a
    1306:	4b 85       	ldd	r20, Y+11	; 0x0b
    1308:	5c 85       	ldd	r21, Y+12	; 0x0c
    130a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    130e:	88 23       	and	r24, r24
    1310:	54 f5       	brge	.+84     	; 0x1366 <TIMER0_enuDelay+0xc8>
		local_u16TimeInitial = (local_doubleTimeMaxDelay-copy_u16millisec)/local_doubleTimetick;
    1312:	8a 89       	ldd	r24, Y+18	; 0x12
    1314:	9b 89       	ldd	r25, Y+19	; 0x13
    1316:	cc 01       	movw	r24, r24
    1318:	a0 e0       	ldi	r26, 0x00	; 0
    131a:	b0 e0       	ldi	r27, 0x00	; 0
    131c:	bc 01       	movw	r22, r24
    131e:	cd 01       	movw	r24, r26
    1320:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1324:	9b 01       	movw	r18, r22
    1326:	ac 01       	movw	r20, r24
    1328:	69 85       	ldd	r22, Y+9	; 0x09
    132a:	7a 85       	ldd	r23, Y+10	; 0x0a
    132c:	8b 85       	ldd	r24, Y+11	; 0x0b
    132e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1330:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1334:	dc 01       	movw	r26, r24
    1336:	cb 01       	movw	r24, r22
    1338:	bc 01       	movw	r22, r24
    133a:	cd 01       	movw	r24, r26
    133c:	2d 81       	ldd	r18, Y+5	; 0x05
    133e:	3e 81       	ldd	r19, Y+6	; 0x06
    1340:	4f 81       	ldd	r20, Y+7	; 0x07
    1342:	58 85       	ldd	r21, Y+8	; 0x08
    1344:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1348:	dc 01       	movw	r26, r24
    134a:	cb 01       	movw	r24, r22
    134c:	bc 01       	movw	r22, r24
    134e:	cd 01       	movw	r24, r26
    1350:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1354:	dc 01       	movw	r26, r24
    1356:	cb 01       	movw	r24, r22
    1358:	9e 87       	std	Y+14, r25	; 0x0e
    135a:	8d 87       	std	Y+13, r24	; 0x0d
		local_u16Num_ov = 1;
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	98 8b       	std	Y+16, r25	; 0x10
    1362:	8f 87       	std	Y+15, r24	; 0x0f
    1364:	72 c0       	rjmp	.+228    	; 0x144a <TIMER0_enuDelay+0x1ac>

	}else if(copy_u16millisec == (int)local_doubleTimeMaxDelay){
    1366:	69 85       	ldd	r22, Y+9	; 0x09
    1368:	7a 85       	ldd	r23, Y+10	; 0x0a
    136a:	8b 85       	ldd	r24, Y+11	; 0x0b
    136c:	9c 85       	ldd	r25, Y+12	; 0x0c
    136e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
    1372:	dc 01       	movw	r26, r24
    1374:	cb 01       	movw	r24, r22
    1376:	9c 01       	movw	r18, r24
    1378:	8a 89       	ldd	r24, Y+18	; 0x12
    137a:	9b 89       	ldd	r25, Y+19	; 0x13
    137c:	28 17       	cp	r18, r24
    137e:	39 07       	cpc	r19, r25
    1380:	39 f4       	brne	.+14     	; 0x1390 <TIMER0_enuDelay+0xf2>
		local_u16TimeInitial=0;
    1382:	1e 86       	std	Y+14, r1	; 0x0e
    1384:	1d 86       	std	Y+13, r1	; 0x0d
		local_u16Num_ov=1;
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	98 8b       	std	Y+16, r25	; 0x10
    138c:	8f 87       	std	Y+15, r24	; 0x0f
    138e:	5d c0       	rjmp	.+186    	; 0x144a <TIMER0_enuDelay+0x1ac>
	}else{
		local_u16Num_ov = ceil((double)copy_u16millisec/local_doubleTimeMaxDelay);
    1390:	8a 89       	ldd	r24, Y+18	; 0x12
    1392:	9b 89       	ldd	r25, Y+19	; 0x13
    1394:	cc 01       	movw	r24, r24
    1396:	a0 e0       	ldi	r26, 0x00	; 0
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	bc 01       	movw	r22, r24
    139c:	cd 01       	movw	r24, r26
    139e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    13a2:	dc 01       	movw	r26, r24
    13a4:	cb 01       	movw	r24, r22
    13a6:	bc 01       	movw	r22, r24
    13a8:	cd 01       	movw	r24, r26
    13aa:	29 85       	ldd	r18, Y+9	; 0x09
    13ac:	3a 85       	ldd	r19, Y+10	; 0x0a
    13ae:	4b 85       	ldd	r20, Y+11	; 0x0b
    13b0:	5c 85       	ldd	r21, Y+12	; 0x0c
    13b2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    13b6:	dc 01       	movw	r26, r24
    13b8:	cb 01       	movw	r24, r22
    13ba:	bc 01       	movw	r22, r24
    13bc:	cd 01       	movw	r24, r26
    13be:	0e 94 e9 3a 	call	0x75d2	; 0x75d2 <ceil>
    13c2:	dc 01       	movw	r26, r24
    13c4:	cb 01       	movw	r24, r22
    13c6:	bc 01       	movw	r22, r24
    13c8:	cd 01       	movw	r24, r26
    13ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13ce:	dc 01       	movw	r26, r24
    13d0:	cb 01       	movw	r24, r22
    13d2:	98 8b       	std	Y+16, r25	; 0x10
    13d4:	8f 87       	std	Y+15, r24	; 0x0f
		local_u16TimeInitial= (1<<8) - ((double)copy_u16millisec/local_doubleTimetick)/local_u16Num_ov;
    13d6:	8a 89       	ldd	r24, Y+18	; 0x12
    13d8:	9b 89       	ldd	r25, Y+19	; 0x13
    13da:	cc 01       	movw	r24, r24
    13dc:	a0 e0       	ldi	r26, 0x00	; 0
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	bc 01       	movw	r22, r24
    13e2:	cd 01       	movw	r24, r26
    13e4:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    13e8:	dc 01       	movw	r26, r24
    13ea:	cb 01       	movw	r24, r22
    13ec:	bc 01       	movw	r22, r24
    13ee:	cd 01       	movw	r24, r26
    13f0:	2d 81       	ldd	r18, Y+5	; 0x05
    13f2:	3e 81       	ldd	r19, Y+6	; 0x06
    13f4:	4f 81       	ldd	r20, Y+7	; 0x07
    13f6:	58 85       	ldd	r21, Y+8	; 0x08
    13f8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    13fc:	dc 01       	movw	r26, r24
    13fe:	cb 01       	movw	r24, r22
    1400:	7c 01       	movw	r14, r24
    1402:	8d 01       	movw	r16, r26
    1404:	8f 85       	ldd	r24, Y+15	; 0x0f
    1406:	98 89       	ldd	r25, Y+16	; 0x10
    1408:	cc 01       	movw	r24, r24
    140a:	a0 e0       	ldi	r26, 0x00	; 0
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	bc 01       	movw	r22, r24
    1410:	cd 01       	movw	r24, r26
    1412:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1416:	9b 01       	movw	r18, r22
    1418:	ac 01       	movw	r20, r24
    141a:	c8 01       	movw	r24, r16
    141c:	b7 01       	movw	r22, r14
    141e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1422:	dc 01       	movw	r26, r24
    1424:	cb 01       	movw	r24, r22
    1426:	9c 01       	movw	r18, r24
    1428:	ad 01       	movw	r20, r26
    142a:	60 e0       	ldi	r22, 0x00	; 0
    142c:	70 e0       	ldi	r23, 0x00	; 0
    142e:	80 e8       	ldi	r24, 0x80	; 128
    1430:	93 e4       	ldi	r25, 0x43	; 67
    1432:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1436:	dc 01       	movw	r26, r24
    1438:	cb 01       	movw	r24, r22
    143a:	bc 01       	movw	r22, r24
    143c:	cd 01       	movw	r24, r26
    143e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1442:	dc 01       	movw	r26, r24
    1444:	cb 01       	movw	r24, r22
    1446:	9e 87       	std	Y+14, r25	; 0x0e
    1448:	8d 87       	std	Y+13, r24	; 0x0d

	}
	TCNT0 = local_u16TimeInitial;
    144a:	e2 e5       	ldi	r30, 0x52	; 82
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1450:	80 83       	st	Z, r24
	TIMER0_enuStart();
    1452:	0e 94 27 09 	call	0x124e	; 0x124e <TIMER0_enuStart>
    1456:	1b c0       	rjmp	.+54     	; 0x148e <TIMER0_enuDelay+0x1f0>

	while(local_u32OverFlowCounnt<local_u16Num_ov){

		while(((TIFR>>0)&1)==0);
    1458:	e8 e5       	ldi	r30, 0x58	; 88
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	88 2f       	mov	r24, r24
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	81 70       	andi	r24, 0x01	; 1
    1464:	90 70       	andi	r25, 0x00	; 0
    1466:	00 97       	sbiw	r24, 0x00	; 0
    1468:	b9 f3       	breq	.-18     	; 0x1458 <TIMER0_enuDelay+0x1ba>

		TIFR|=(1<<0);
    146a:	a8 e5       	ldi	r26, 0x58	; 88
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	e8 e5       	ldi	r30, 0x58	; 88
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	81 60       	ori	r24, 0x01	; 1
    1476:	8c 93       	st	X, r24

		local_u32OverFlowCounnt++;
    1478:	89 81       	ldd	r24, Y+1	; 0x01
    147a:	9a 81       	ldd	r25, Y+2	; 0x02
    147c:	ab 81       	ldd	r26, Y+3	; 0x03
    147e:	bc 81       	ldd	r27, Y+4	; 0x04
    1480:	01 96       	adiw	r24, 0x01	; 1
    1482:	a1 1d       	adc	r26, r1
    1484:	b1 1d       	adc	r27, r1
    1486:	89 83       	std	Y+1, r24	; 0x01
    1488:	9a 83       	std	Y+2, r25	; 0x02
    148a:	ab 83       	std	Y+3, r26	; 0x03
    148c:	bc 83       	std	Y+4, r27	; 0x04

	}
	TCNT0 = local_u16TimeInitial;
	TIMER0_enuStart();

	while(local_u32OverFlowCounnt<local_u16Num_ov){
    148e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1490:	98 89       	ldd	r25, Y+16	; 0x10
    1492:	9c 01       	movw	r18, r24
    1494:	40 e0       	ldi	r20, 0x00	; 0
    1496:	50 e0       	ldi	r21, 0x00	; 0
    1498:	89 81       	ldd	r24, Y+1	; 0x01
    149a:	9a 81       	ldd	r25, Y+2	; 0x02
    149c:	ab 81       	ldd	r26, Y+3	; 0x03
    149e:	bc 81       	ldd	r27, Y+4	; 0x04
    14a0:	82 17       	cp	r24, r18
    14a2:	93 07       	cpc	r25, r19
    14a4:	a4 07       	cpc	r26, r20
    14a6:	b5 07       	cpc	r27, r21
    14a8:	b8 f2       	brcs	.-82     	; 0x1458 <TIMER0_enuDelay+0x1ba>
		TIFR|=(1<<0);

		local_u32OverFlowCounnt++;
	}

	TCCR0=0x00;
    14aa:	e3 e5       	ldi	r30, 0x53	; 83
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	10 82       	st	Z, r1
	return local_enuerrorState;
    14b0:	89 89       	ldd	r24, Y+17	; 0x11
}
    14b2:	63 96       	adiw	r28, 0x13	; 19
    14b4:	0f b6       	in	r0, 0x3f	; 63
    14b6:	f8 94       	cli
    14b8:	de bf       	out	0x3e, r29	; 62
    14ba:	0f be       	out	0x3f, r0	; 63
    14bc:	cd bf       	out	0x3d, r28	; 61
    14be:	cf 91       	pop	r28
    14c0:	df 91       	pop	r29
    14c2:	1f 91       	pop	r17
    14c4:	0f 91       	pop	r16
    14c6:	ff 90       	pop	r15
    14c8:	ef 90       	pop	r14
    14ca:	08 95       	ret

000014cc <TIMER0_enuCallBack>:





ES_t TIMER0_enuCallBack(void (*fun)(void)){
    14cc:	df 93       	push	r29
    14ce:	cf 93       	push	r28
    14d0:	00 d0       	rcall	.+0      	; 0x14d2 <TIMER0_enuCallBack+0x6>
    14d2:	0f 92       	push	r0
    14d4:	cd b7       	in	r28, 0x3d	; 61
    14d6:	de b7       	in	r29, 0x3e	; 62
    14d8:	9b 83       	std	Y+3, r25	; 0x03
    14da:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_OK;
    14dc:	19 82       	std	Y+1, r1	; 0x01
#if TIMER0_MODE==NORMAL_MODE
	ptr_ovf=fun;
    14de:	8a 81       	ldd	r24, Y+2	; 0x02
    14e0:	9b 81       	ldd	r25, Y+3	; 0x03
    14e2:	90 93 1d 08 	sts	0x081D, r25
    14e6:	80 93 1c 08 	sts	0x081C, r24
#elif TIMER0_MODE==CTC_MODE
	ptr_Ctc=fun;
#elif
	Local_enuErrorState=ES_NOK;
#endif
	return Local_enuErrorState;
    14ea:	89 81       	ldd	r24, Y+1	; 0x01

}
    14ec:	0f 90       	pop	r0
    14ee:	0f 90       	pop	r0
    14f0:	0f 90       	pop	r0
    14f2:	cf 91       	pop	r28
    14f4:	df 91       	pop	r29
    14f6:	08 95       	ret

000014f8 <PWM0_enuInit>:
ES_t PWM0_enuInit(void){
    14f8:	df 93       	push	r29
    14fa:	cf 93       	push	r28
    14fc:	0f 92       	push	r0
    14fe:	cd b7       	in	r28, 0x3d	; 61
    1500:	de b7       	in	r29, 0x3e	; 62
ES_t Local_enuErrorState=ES_OK;
    1502:	19 82       	std	Y+1, r1	; 0x01
#if PWM0_MODE==FAST_PWM_MODE
TCCR0|=(1<<3);
    1504:	a3 e5       	ldi	r26, 0x53	; 83
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	e3 e5       	ldi	r30, 0x53	; 83
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	88 60       	ori	r24, 0x08	; 8
    1510:	8c 93       	st	X, r24
TCCR0|=(1<<6);
    1512:	a3 e5       	ldi	r26, 0x53	; 83
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	e3 e5       	ldi	r30, 0x53	; 83
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	80 64       	ori	r24, 0x40	; 64
    151e:	8c 93       	st	X, r24
TCCR0|=(1<<6);
#elif
Local_enuErrorState=ES_NOK;
#endif
#if OUTPUT_MODE==NON_INVERTED
TCCR0|=(1<<5);
    1520:	a3 e5       	ldi	r26, 0x53	; 83
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	e3 e5       	ldi	r30, 0x53	; 83
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	80 62       	ori	r24, 0x20	; 32
    152c:	8c 93       	st	X, r24
#elif OUTPUT_MODE==INVERTED
TCCR0|=(3<<4);
#elif
Local_enuErrorState=ES_NOK;
#endif
return Local_enuErrorState;
    152e:	89 81       	ldd	r24, Y+1	; 0x01

	}
    1530:	0f 90       	pop	r0
    1532:	cf 91       	pop	r28
    1534:	df 91       	pop	r29
    1536:	08 95       	ret

00001538 <PWM0_enuSetDuty>:
ES_t PWM0_enuSetDuty(u8 Copy_u8Duty){
    1538:	df 93       	push	r29
    153a:	cf 93       	push	r28
    153c:	00 d0       	rcall	.+0      	; 0x153e <PWM0_enuSetDuty+0x6>
    153e:	cd b7       	in	r28, 0x3d	; 61
    1540:	de b7       	in	r29, 0x3e	; 62
    1542:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_OK;
    1544:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Duty < 0)
			Copy_u8Duty = 0;
		else if(Copy_u8Duty > 100)
    1546:	8a 81       	ldd	r24, Y+2	; 0x02
    1548:	85 36       	cpi	r24, 0x65	; 101
    154a:	10 f0       	brcs	.+4      	; 0x1550 <PWM0_enuSetDuty+0x18>
			Copy_u8Duty = 100;
    154c:	84 e6       	ldi	r24, 0x64	; 100
    154e:	8a 83       	std	Y+2, r24	; 0x02
				OCR0 = 255 - (Duty_Cycle * 255 / 100);

			#endif
		#endif

return Local_enuErrorState;
    1550:	89 81       	ldd	r24, Y+1	; 0x01
}
    1552:	0f 90       	pop	r0
    1554:	0f 90       	pop	r0
    1556:	cf 91       	pop	r28
    1558:	df 91       	pop	r29
    155a:	08 95       	ret

0000155c <PWM0_enuStart>:
ES_t PWM0_enuStart(){
    155c:	df 93       	push	r29
    155e:	cf 93       	push	r28
    1560:	cd b7       	in	r28, 0x3d	; 61
    1562:	de b7       	in	r29, 0x3e	; 62
	TIMER0_enuStart();
    1564:	0e 94 27 09 	call	0x124e	; 0x124e <TIMER0_enuStart>
	return ES_OK;
    1568:	80 e0       	ldi	r24, 0x00	; 0
}
    156a:	cf 91       	pop	r28
    156c:	df 91       	pop	r29
    156e:	08 95       	ret

00001570 <PWM0_enuStop>:
ES_t PWM0_enuStop(){
    1570:	df 93       	push	r29
    1572:	cf 93       	push	r28
    1574:	cd b7       	in	r28, 0x3d	; 61
    1576:	de b7       	in	r29, 0x3e	; 62
	TIMER0_enuStop();
    1578:	0e 94 40 09 	call	0x1280	; 0x1280 <TIMER0_enuStop>
	return ES_OK;
    157c:	80 e0       	ldi	r24, 0x00	; 0
}
    157e:	cf 91       	pop	r28
    1580:	df 91       	pop	r29
    1582:	08 95       	ret

00001584 <__vector_10>:
void __vector_10(void)__attribute__((signal));
	void __vector_10 (void)
	{static u32 local_enu32count=0;
    1584:	1f 92       	push	r1
    1586:	0f 92       	push	r0
    1588:	0f b6       	in	r0, 0x3f	; 63
    158a:	0f 92       	push	r0
    158c:	11 24       	eor	r1, r1
    158e:	2f 93       	push	r18
    1590:	3f 93       	push	r19
    1592:	4f 93       	push	r20
    1594:	5f 93       	push	r21
    1596:	6f 93       	push	r22
    1598:	7f 93       	push	r23
    159a:	8f 93       	push	r24
    159c:	9f 93       	push	r25
    159e:	af 93       	push	r26
    15a0:	bf 93       	push	r27
    15a2:	ef 93       	push	r30
    15a4:	ff 93       	push	r31
    15a6:	df 93       	push	r29
    15a8:	cf 93       	push	r28
    15aa:	cd b7       	in	r28, 0x3d	; 61
    15ac:	de b7       	in	r29, 0x3e	; 62
	local_enu32count++;
    15ae:	80 91 23 08 	lds	r24, 0x0823
    15b2:	90 91 24 08 	lds	r25, 0x0824
    15b6:	a0 91 25 08 	lds	r26, 0x0825
    15ba:	b0 91 26 08 	lds	r27, 0x0826
    15be:	01 96       	adiw	r24, 0x01	; 1
    15c0:	a1 1d       	adc	r26, r1
    15c2:	b1 1d       	adc	r27, r1
    15c4:	80 93 23 08 	sts	0x0823, r24
    15c8:	90 93 24 08 	sts	0x0824, r25
    15cc:	a0 93 25 08 	sts	0x0825, r26
    15d0:	b0 93 26 08 	sts	0x0826, r27

		if (ptr_Ctc != NULL)
    15d4:	80 91 1e 08 	lds	r24, 0x081E
    15d8:	90 91 1f 08 	lds	r25, 0x081F
    15dc:	00 97       	sbiw	r24, 0x00	; 0
    15de:	09 f4       	brne	.+2      	; 0x15e2 <__vector_10+0x5e>
    15e0:	67 c0       	rjmp	.+206    	; 0x16b0 <__vector_10+0x12c>
		{

			if(local_enu32count == 1 && Timer0_Num_OVF ==local_enu32count)
    15e2:	80 91 23 08 	lds	r24, 0x0823
    15e6:	90 91 24 08 	lds	r25, 0x0824
    15ea:	a0 91 25 08 	lds	r26, 0x0825
    15ee:	b0 91 26 08 	lds	r27, 0x0826
    15f2:	81 30       	cpi	r24, 0x01	; 1
    15f4:	91 05       	cpc	r25, r1
    15f6:	a1 05       	cpc	r26, r1
    15f8:	b1 05       	cpc	r27, r1
    15fa:	39 f5       	brne	.+78     	; 0x164a <__vector_10+0xc6>
    15fc:	80 91 20 08 	lds	r24, 0x0820
    1600:	90 91 21 08 	lds	r25, 0x0821
    1604:	9c 01       	movw	r18, r24
    1606:	40 e0       	ldi	r20, 0x00	; 0
    1608:	50 e0       	ldi	r21, 0x00	; 0
    160a:	80 91 23 08 	lds	r24, 0x0823
    160e:	90 91 24 08 	lds	r25, 0x0824
    1612:	a0 91 25 08 	lds	r26, 0x0825
    1616:	b0 91 26 08 	lds	r27, 0x0826
    161a:	28 17       	cp	r18, r24
    161c:	39 07       	cpc	r19, r25
    161e:	4a 07       	cpc	r20, r26
    1620:	5b 07       	cpc	r21, r27
    1622:	99 f4       	brne	.+38     	; 0x164a <__vector_10+0xc6>
				{

					ptr_Ctc();
    1624:	e0 91 1e 08 	lds	r30, 0x081E
    1628:	f0 91 1f 08 	lds	r31, 0x081F
    162c:	09 95       	icall

					local_enu32count = 0;
    162e:	10 92 23 08 	sts	0x0823, r1
    1632:	10 92 24 08 	sts	0x0824, r1
    1636:	10 92 25 08 	sts	0x0825, r1
    163a:	10 92 26 08 	sts	0x0826, r1
					OCR0 = Timer0_Init_Value;
    163e:	ec e5       	ldi	r30, 0x5C	; 92
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	80 91 22 08 	lds	r24, 0x0822
    1646:	80 83       	st	Z, r24
    1648:	33 c0       	rjmp	.+102    	; 0x16b0 <__vector_10+0x12c>
				}
				else if(local_enu32count== 1)
    164a:	80 91 23 08 	lds	r24, 0x0823
    164e:	90 91 24 08 	lds	r25, 0x0824
    1652:	a0 91 25 08 	lds	r26, 0x0825
    1656:	b0 91 26 08 	lds	r27, 0x0826
    165a:	81 30       	cpi	r24, 0x01	; 1
    165c:	91 05       	cpc	r25, r1
    165e:	a1 05       	cpc	r26, r1
    1660:	b1 05       	cpc	r27, r1
    1662:	29 f4       	brne	.+10     	; 0x166e <__vector_10+0xea>
					OCR0 = 255;
    1664:	ec e5       	ldi	r30, 0x5C	; 92
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	8f ef       	ldi	r24, 0xFF	; 255
    166a:	80 83       	st	Z, r24
    166c:	21 c0       	rjmp	.+66     	; 0x16b0 <__vector_10+0x12c>
				else if(Timer0_Num_OVF == local_enu32count)
    166e:	80 91 20 08 	lds	r24, 0x0820
    1672:	90 91 21 08 	lds	r25, 0x0821
    1676:	9c 01       	movw	r18, r24
    1678:	40 e0       	ldi	r20, 0x00	; 0
    167a:	50 e0       	ldi	r21, 0x00	; 0
    167c:	80 91 23 08 	lds	r24, 0x0823
    1680:	90 91 24 08 	lds	r25, 0x0824
    1684:	a0 91 25 08 	lds	r26, 0x0825
    1688:	b0 91 26 08 	lds	r27, 0x0826
    168c:	28 17       	cp	r18, r24
    168e:	39 07       	cpc	r19, r25
    1690:	4a 07       	cpc	r20, r26
    1692:	5b 07       	cpc	r21, r27
    1694:	69 f4       	brne	.+26     	; 0x16b0 <__vector_10+0x12c>
				{
					// Write your code here


					local_enu32count= 0;
    1696:	10 92 23 08 	sts	0x0823, r1
    169a:	10 92 24 08 	sts	0x0824, r1
    169e:	10 92 25 08 	sts	0x0825, r1
    16a2:	10 92 26 08 	sts	0x0826, r1
					OCR0 = Timer0_Init_Value;
    16a6:	ec e5       	ldi	r30, 0x5C	; 92
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 91 22 08 	lds	r24, 0x0822
    16ae:	80 83       	st	Z, r24
				}
		}
	}
    16b0:	cf 91       	pop	r28
    16b2:	df 91       	pop	r29
    16b4:	ff 91       	pop	r31
    16b6:	ef 91       	pop	r30
    16b8:	bf 91       	pop	r27
    16ba:	af 91       	pop	r26
    16bc:	9f 91       	pop	r25
    16be:	8f 91       	pop	r24
    16c0:	7f 91       	pop	r23
    16c2:	6f 91       	pop	r22
    16c4:	5f 91       	pop	r21
    16c6:	4f 91       	pop	r20
    16c8:	3f 91       	pop	r19
    16ca:	2f 91       	pop	r18
    16cc:	0f 90       	pop	r0
    16ce:	0f be       	out	0x3f, r0	; 63
    16d0:	0f 90       	pop	r0
    16d2:	1f 90       	pop	r1
    16d4:	18 95       	reti

000016d6 <__vector_11>:

/******************OVF*************/
void __vector_11 (void)__attribute__((signal));
void __vector_11(void)
{static u32 local_enu32counter=0;
    16d6:	1f 92       	push	r1
    16d8:	0f 92       	push	r0
    16da:	0f b6       	in	r0, 0x3f	; 63
    16dc:	0f 92       	push	r0
    16de:	11 24       	eor	r1, r1
    16e0:	2f 93       	push	r18
    16e2:	3f 93       	push	r19
    16e4:	4f 93       	push	r20
    16e6:	5f 93       	push	r21
    16e8:	6f 93       	push	r22
    16ea:	7f 93       	push	r23
    16ec:	8f 93       	push	r24
    16ee:	9f 93       	push	r25
    16f0:	af 93       	push	r26
    16f2:	bf 93       	push	r27
    16f4:	ef 93       	push	r30
    16f6:	ff 93       	push	r31
    16f8:	df 93       	push	r29
    16fa:	cf 93       	push	r28
    16fc:	cd b7       	in	r28, 0x3d	; 61
    16fe:	de b7       	in	r29, 0x3e	; 62

     local_enu32counter++;
    1700:	80 91 27 08 	lds	r24, 0x0827
    1704:	90 91 28 08 	lds	r25, 0x0828
    1708:	a0 91 29 08 	lds	r26, 0x0829
    170c:	b0 91 2a 08 	lds	r27, 0x082A
    1710:	01 96       	adiw	r24, 0x01	; 1
    1712:	a1 1d       	adc	r26, r1
    1714:	b1 1d       	adc	r27, r1
    1716:	80 93 27 08 	sts	0x0827, r24
    171a:	90 93 28 08 	sts	0x0828, r25
    171e:	a0 93 29 08 	sts	0x0829, r26
    1722:	b0 93 2a 08 	sts	0x082A, r27
	if (ptr_ovf != NULL)
    1726:	80 91 1c 08 	lds	r24, 0x081C
    172a:	90 91 1d 08 	lds	r25, 0x081D
    172e:	00 97       	sbiw	r24, 0x00	; 0
    1730:	31 f1       	breq	.+76     	; 0x177e <__vector_11+0xa8>
	{

		if(local_enu32counter==Timer0_Num_OVF){
    1732:	80 91 20 08 	lds	r24, 0x0820
    1736:	90 91 21 08 	lds	r25, 0x0821
    173a:	9c 01       	movw	r18, r24
    173c:	40 e0       	ldi	r20, 0x00	; 0
    173e:	50 e0       	ldi	r21, 0x00	; 0
    1740:	80 91 27 08 	lds	r24, 0x0827
    1744:	90 91 28 08 	lds	r25, 0x0828
    1748:	a0 91 29 08 	lds	r26, 0x0829
    174c:	b0 91 2a 08 	lds	r27, 0x082A
    1750:	28 17       	cp	r18, r24
    1752:	39 07       	cpc	r19, r25
    1754:	4a 07       	cpc	r20, r26
    1756:	5b 07       	cpc	r21, r27
    1758:	91 f4       	brne	.+36     	; 0x177e <__vector_11+0xa8>
			TCNT0=Timer0_Init_Value;
    175a:	e2 e5       	ldi	r30, 0x52	; 82
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 91 22 08 	lds	r24, 0x0822
    1762:	80 83       	st	Z, r24
			local_enu32counter=0;
    1764:	10 92 27 08 	sts	0x0827, r1
    1768:	10 92 28 08 	sts	0x0828, r1
    176c:	10 92 29 08 	sts	0x0829, r1
    1770:	10 92 2a 08 	sts	0x082A, r1
			ptr_ovf();
    1774:	e0 91 1c 08 	lds	r30, 0x081C
    1778:	f0 91 1d 08 	lds	r31, 0x081D
    177c:	09 95       	icall
		}
	}


}
    177e:	cf 91       	pop	r28
    1780:	df 91       	pop	r29
    1782:	ff 91       	pop	r31
    1784:	ef 91       	pop	r30
    1786:	bf 91       	pop	r27
    1788:	af 91       	pop	r26
    178a:	9f 91       	pop	r25
    178c:	8f 91       	pop	r24
    178e:	7f 91       	pop	r23
    1790:	6f 91       	pop	r22
    1792:	5f 91       	pop	r21
    1794:	4f 91       	pop	r20
    1796:	3f 91       	pop	r19
    1798:	2f 91       	pop	r18
    179a:	0f 90       	pop	r0
    179c:	0f be       	out	0x3f, r0	; 63
    179e:	0f 90       	pop	r0
    17a0:	1f 90       	pop	r1
    17a2:	18 95       	reti

000017a4 <IIC_enuInit>:
#include "../../LIBRARY/errorState.h"
#include "IIC_priv.h"
#include"IIC_conf.h"
#include <util/delay.h>
ES_t IIC_enuInit(void)
{
    17a4:	df 93       	push	r29
    17a6:	cf 93       	push	r28
    17a8:	cd b7       	in	r28, 0x3d	; 61
    17aa:	de b7       	in	r29, 0x3e	; 62
    17ac:	2f 97       	sbiw	r28, 0x0f	; 15
    17ae:	0f b6       	in	r0, 0x3f	; 63
    17b0:	f8 94       	cli
    17b2:	de bf       	out	0x3e, r29	; 62
    17b4:	0f be       	out	0x3f, r0	; 63
    17b6:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState=ES_OK;
    17b8:	1f 86       	std	Y+15, r1	; 0x0f
	TWCR&=~(1<<2);
    17ba:	a6 e5       	ldi	r26, 0x56	; 86
    17bc:	b0 e0       	ldi	r27, 0x00	; 0
    17be:	e6 e5       	ldi	r30, 0x56	; 86
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	8b 7f       	andi	r24, 0xFB	; 251
    17c6:	8c 93       	st	X, r24
	#if    I2C_MODE      ==   I2C_MASTER
	TWBR = 12;           // 400KHZ
    17c8:	e0 e2       	ldi	r30, 0x20	; 32
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	8c e0       	ldi	r24, 0x0C	; 12
    17ce:	80 83       	st	Z, r24
	#elif  I2C_MODE      ==   I2C_SLAVE
	TWAR = ((SLAVE_ADDRESS << 1) | GENERAL_CALL);
	#endif
	TWCR|=(1<<2);
    17d0:	a6 e5       	ldi	r26, 0x56	; 86
    17d2:	b0 e0       	ldi	r27, 0x00	; 0
    17d4:	e6 e5       	ldi	r30, 0x56	; 86
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	84 60       	ori	r24, 0x04	; 4
    17dc:	8c 93       	st	X, r24
    17de:	80 e0       	ldi	r24, 0x00	; 0
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	a0 e2       	ldi	r26, 0x20	; 32
    17e4:	b1 e4       	ldi	r27, 0x41	; 65
    17e6:	8b 87       	std	Y+11, r24	; 0x0b
    17e8:	9c 87       	std	Y+12, r25	; 0x0c
    17ea:	ad 87       	std	Y+13, r26	; 0x0d
    17ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    17f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    17f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    17f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    17f6:	20 e0       	ldi	r18, 0x00	; 0
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	4a e7       	ldi	r20, 0x7A	; 122
    17fc:	55 e4       	ldi	r21, 0x45	; 69
    17fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1802:	dc 01       	movw	r26, r24
    1804:	cb 01       	movw	r24, r22
    1806:	8f 83       	std	Y+7, r24	; 0x07
    1808:	98 87       	std	Y+8, r25	; 0x08
    180a:	a9 87       	std	Y+9, r26	; 0x09
    180c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    180e:	6f 81       	ldd	r22, Y+7	; 0x07
    1810:	78 85       	ldd	r23, Y+8	; 0x08
    1812:	89 85       	ldd	r24, Y+9	; 0x09
    1814:	9a 85       	ldd	r25, Y+10	; 0x0a
    1816:	20 e0       	ldi	r18, 0x00	; 0
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	40 e8       	ldi	r20, 0x80	; 128
    181c:	5f e3       	ldi	r21, 0x3F	; 63
    181e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1822:	88 23       	and	r24, r24
    1824:	2c f4       	brge	.+10     	; 0x1830 <IIC_enuInit+0x8c>
		__ticks = 1;
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	9e 83       	std	Y+6, r25	; 0x06
    182c:	8d 83       	std	Y+5, r24	; 0x05
    182e:	3f c0       	rjmp	.+126    	; 0x18ae <IIC_enuInit+0x10a>
	else if (__tmp > 65535)
    1830:	6f 81       	ldd	r22, Y+7	; 0x07
    1832:	78 85       	ldd	r23, Y+8	; 0x08
    1834:	89 85       	ldd	r24, Y+9	; 0x09
    1836:	9a 85       	ldd	r25, Y+10	; 0x0a
    1838:	20 e0       	ldi	r18, 0x00	; 0
    183a:	3f ef       	ldi	r19, 0xFF	; 255
    183c:	4f e7       	ldi	r20, 0x7F	; 127
    183e:	57 e4       	ldi	r21, 0x47	; 71
    1840:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1844:	18 16       	cp	r1, r24
    1846:	4c f5       	brge	.+82     	; 0x189a <IIC_enuInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1848:	6b 85       	ldd	r22, Y+11	; 0x0b
    184a:	7c 85       	ldd	r23, Y+12	; 0x0c
    184c:	8d 85       	ldd	r24, Y+13	; 0x0d
    184e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	40 e2       	ldi	r20, 0x20	; 32
    1856:	51 e4       	ldi	r21, 0x41	; 65
    1858:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    185c:	dc 01       	movw	r26, r24
    185e:	cb 01       	movw	r24, r22
    1860:	bc 01       	movw	r22, r24
    1862:	cd 01       	movw	r24, r26
    1864:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1868:	dc 01       	movw	r26, r24
    186a:	cb 01       	movw	r24, r22
    186c:	9e 83       	std	Y+6, r25	; 0x06
    186e:	8d 83       	std	Y+5, r24	; 0x05
    1870:	0f c0       	rjmp	.+30     	; 0x1890 <IIC_enuInit+0xec>
    1872:	80 e9       	ldi	r24, 0x90	; 144
    1874:	91 e0       	ldi	r25, 0x01	; 1
    1876:	9c 83       	std	Y+4, r25	; 0x04
    1878:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    187a:	8b 81       	ldd	r24, Y+3	; 0x03
    187c:	9c 81       	ldd	r25, Y+4	; 0x04
    187e:	01 97       	sbiw	r24, 0x01	; 1
    1880:	f1 f7       	brne	.-4      	; 0x187e <IIC_enuInit+0xda>
    1882:	9c 83       	std	Y+4, r25	; 0x04
    1884:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1886:	8d 81       	ldd	r24, Y+5	; 0x05
    1888:	9e 81       	ldd	r25, Y+6	; 0x06
    188a:	01 97       	sbiw	r24, 0x01	; 1
    188c:	9e 83       	std	Y+6, r25	; 0x06
    188e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1890:	8d 81       	ldd	r24, Y+5	; 0x05
    1892:	9e 81       	ldd	r25, Y+6	; 0x06
    1894:	00 97       	sbiw	r24, 0x00	; 0
    1896:	69 f7       	brne	.-38     	; 0x1872 <IIC_enuInit+0xce>
    1898:	14 c0       	rjmp	.+40     	; 0x18c2 <IIC_enuInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    189a:	6f 81       	ldd	r22, Y+7	; 0x07
    189c:	78 85       	ldd	r23, Y+8	; 0x08
    189e:	89 85       	ldd	r24, Y+9	; 0x09
    18a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    18a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a6:	dc 01       	movw	r26, r24
    18a8:	cb 01       	movw	r24, r22
    18aa:	9e 83       	std	Y+6, r25	; 0x06
    18ac:	8d 83       	std	Y+5, r24	; 0x05
    18ae:	8d 81       	ldd	r24, Y+5	; 0x05
    18b0:	9e 81       	ldd	r25, Y+6	; 0x06
    18b2:	9a 83       	std	Y+2, r25	; 0x02
    18b4:	89 83       	std	Y+1, r24	; 0x01
    18b6:	89 81       	ldd	r24, Y+1	; 0x01
    18b8:	9a 81       	ldd	r25, Y+2	; 0x02
    18ba:	01 97       	sbiw	r24, 0x01	; 1
    18bc:	f1 f7       	brne	.-4      	; 0x18ba <IIC_enuInit+0x116>
    18be:	9a 83       	std	Y+2, r25	; 0x02
    18c0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	return Local_enuErrorState;
    18c2:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    18c4:	2f 96       	adiw	r28, 0x0f	; 15
    18c6:	0f b6       	in	r0, 0x3f	; 63
    18c8:	f8 94       	cli
    18ca:	de bf       	out	0x3e, r29	; 62
    18cc:	0f be       	out	0x3f, r0	; 63
    18ce:	cd bf       	out	0x3d, r28	; 61
    18d0:	cf 91       	pop	r28
    18d2:	df 91       	pop	r29
    18d4:	08 95       	ret

000018d6 <IIC_enuStartCondition>:
ES_t IIC_enuStartCondition(void)
{
    18d6:	df 93       	push	r29
    18d8:	cf 93       	push	r28
    18da:	cd b7       	in	r28, 0x3d	; 61
    18dc:	de b7       	in	r29, 0x3e	; 62
    18de:	2f 97       	sbiw	r28, 0x0f	; 15
    18e0:	0f b6       	in	r0, 0x3f	; 63
    18e2:	f8 94       	cli
    18e4:	de bf       	out	0x3e, r29	; 62
    18e6:	0f be       	out	0x3f, r0	; 63
    18e8:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState=ES_OK;
    18ea:	1f 86       	std	Y+15, r1	; 0x0f
	TWCR|=(1<<5);
    18ec:	a6 e5       	ldi	r26, 0x56	; 86
    18ee:	b0 e0       	ldi	r27, 0x00	; 0
    18f0:	e6 e5       	ldi	r30, 0x56	; 86
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	80 62       	ori	r24, 0x20	; 32
    18f8:	8c 93       	st	X, r24
	TWCR|=(1<<7);
    18fa:	a6 e5       	ldi	r26, 0x56	; 86
    18fc:	b0 e0       	ldi	r27, 0x00	; 0
    18fe:	e6 e5       	ldi	r30, 0x56	; 86
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	80 81       	ld	r24, Z
    1904:	80 68       	ori	r24, 0x80	; 128
    1906:	8c 93       	st	X, r24
	while((TWCR>>7) == 0);
    1908:	e6 e5       	ldi	r30, 0x56	; 86
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	80 81       	ld	r24, Z
    190e:	88 23       	and	r24, r24
    1910:	dc f7       	brge	.-10     	; 0x1908 <IIC_enuStartCondition+0x32>
	while((TWSR & 0xF8) != START_CONDITION_TRANSMITTED);
    1912:	e1 e2       	ldi	r30, 0x21	; 33
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	80 81       	ld	r24, Z
    1918:	88 2f       	mov	r24, r24
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	88 7f       	andi	r24, 0xF8	; 248
    191e:	90 70       	andi	r25, 0x00	; 0
    1920:	88 30       	cpi	r24, 0x08	; 8
    1922:	91 05       	cpc	r25, r1
    1924:	b1 f7       	brne	.-20     	; 0x1912 <IIC_enuStartCondition+0x3c>
    1926:	80 e0       	ldi	r24, 0x00	; 0
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	a0 e2       	ldi	r26, 0x20	; 32
    192c:	b1 e4       	ldi	r27, 0x41	; 65
    192e:	8b 87       	std	Y+11, r24	; 0x0b
    1930:	9c 87       	std	Y+12, r25	; 0x0c
    1932:	ad 87       	std	Y+13, r26	; 0x0d
    1934:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1936:	6b 85       	ldd	r22, Y+11	; 0x0b
    1938:	7c 85       	ldd	r23, Y+12	; 0x0c
    193a:	8d 85       	ldd	r24, Y+13	; 0x0d
    193c:	9e 85       	ldd	r25, Y+14	; 0x0e
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	4a e7       	ldi	r20, 0x7A	; 122
    1944:	55 e4       	ldi	r21, 0x45	; 69
    1946:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    194a:	dc 01       	movw	r26, r24
    194c:	cb 01       	movw	r24, r22
    194e:	8f 83       	std	Y+7, r24	; 0x07
    1950:	98 87       	std	Y+8, r25	; 0x08
    1952:	a9 87       	std	Y+9, r26	; 0x09
    1954:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1956:	6f 81       	ldd	r22, Y+7	; 0x07
    1958:	78 85       	ldd	r23, Y+8	; 0x08
    195a:	89 85       	ldd	r24, Y+9	; 0x09
    195c:	9a 85       	ldd	r25, Y+10	; 0x0a
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	40 e8       	ldi	r20, 0x80	; 128
    1964:	5f e3       	ldi	r21, 0x3F	; 63
    1966:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    196a:	88 23       	and	r24, r24
    196c:	2c f4       	brge	.+10     	; 0x1978 <IIC_enuStartCondition+0xa2>
		__ticks = 1;
    196e:	81 e0       	ldi	r24, 0x01	; 1
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	9e 83       	std	Y+6, r25	; 0x06
    1974:	8d 83       	std	Y+5, r24	; 0x05
    1976:	3f c0       	rjmp	.+126    	; 0x19f6 <IIC_enuStartCondition+0x120>
	else if (__tmp > 65535)
    1978:	6f 81       	ldd	r22, Y+7	; 0x07
    197a:	78 85       	ldd	r23, Y+8	; 0x08
    197c:	89 85       	ldd	r24, Y+9	; 0x09
    197e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1980:	20 e0       	ldi	r18, 0x00	; 0
    1982:	3f ef       	ldi	r19, 0xFF	; 255
    1984:	4f e7       	ldi	r20, 0x7F	; 127
    1986:	57 e4       	ldi	r21, 0x47	; 71
    1988:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    198c:	18 16       	cp	r1, r24
    198e:	4c f5       	brge	.+82     	; 0x19e2 <IIC_enuStartCondition+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1990:	6b 85       	ldd	r22, Y+11	; 0x0b
    1992:	7c 85       	ldd	r23, Y+12	; 0x0c
    1994:	8d 85       	ldd	r24, Y+13	; 0x0d
    1996:	9e 85       	ldd	r25, Y+14	; 0x0e
    1998:	20 e0       	ldi	r18, 0x00	; 0
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	40 e2       	ldi	r20, 0x20	; 32
    199e:	51 e4       	ldi	r21, 0x41	; 65
    19a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a4:	dc 01       	movw	r26, r24
    19a6:	cb 01       	movw	r24, r22
    19a8:	bc 01       	movw	r22, r24
    19aa:	cd 01       	movw	r24, r26
    19ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b0:	dc 01       	movw	r26, r24
    19b2:	cb 01       	movw	r24, r22
    19b4:	9e 83       	std	Y+6, r25	; 0x06
    19b6:	8d 83       	std	Y+5, r24	; 0x05
    19b8:	0f c0       	rjmp	.+30     	; 0x19d8 <IIC_enuStartCondition+0x102>
    19ba:	80 e9       	ldi	r24, 0x90	; 144
    19bc:	91 e0       	ldi	r25, 0x01	; 1
    19be:	9c 83       	std	Y+4, r25	; 0x04
    19c0:	8b 83       	std	Y+3, r24	; 0x03
    19c2:	8b 81       	ldd	r24, Y+3	; 0x03
    19c4:	9c 81       	ldd	r25, Y+4	; 0x04
    19c6:	01 97       	sbiw	r24, 0x01	; 1
    19c8:	f1 f7       	brne	.-4      	; 0x19c6 <IIC_enuStartCondition+0xf0>
    19ca:	9c 83       	std	Y+4, r25	; 0x04
    19cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ce:	8d 81       	ldd	r24, Y+5	; 0x05
    19d0:	9e 81       	ldd	r25, Y+6	; 0x06
    19d2:	01 97       	sbiw	r24, 0x01	; 1
    19d4:	9e 83       	std	Y+6, r25	; 0x06
    19d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19d8:	8d 81       	ldd	r24, Y+5	; 0x05
    19da:	9e 81       	ldd	r25, Y+6	; 0x06
    19dc:	00 97       	sbiw	r24, 0x00	; 0
    19de:	69 f7       	brne	.-38     	; 0x19ba <IIC_enuStartCondition+0xe4>
    19e0:	14 c0       	rjmp	.+40     	; 0x1a0a <IIC_enuStartCondition+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19e2:	6f 81       	ldd	r22, Y+7	; 0x07
    19e4:	78 85       	ldd	r23, Y+8	; 0x08
    19e6:	89 85       	ldd	r24, Y+9	; 0x09
    19e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ee:	dc 01       	movw	r26, r24
    19f0:	cb 01       	movw	r24, r22
    19f2:	9e 83       	std	Y+6, r25	; 0x06
    19f4:	8d 83       	std	Y+5, r24	; 0x05
    19f6:	8d 81       	ldd	r24, Y+5	; 0x05
    19f8:	9e 81       	ldd	r25, Y+6	; 0x06
    19fa:	9a 83       	std	Y+2, r25	; 0x02
    19fc:	89 83       	std	Y+1, r24	; 0x01
    19fe:	89 81       	ldd	r24, Y+1	; 0x01
    1a00:	9a 81       	ldd	r25, Y+2	; 0x02
    1a02:	01 97       	sbiw	r24, 0x01	; 1
    1a04:	f1 f7       	brne	.-4      	; 0x1a02 <IIC_enuStartCondition+0x12c>
    1a06:	9a 83       	std	Y+2, r25	; 0x02
    1a08:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	return Local_enuErrorState;
    1a0a:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    1a0c:	2f 96       	adiw	r28, 0x0f	; 15
    1a0e:	0f b6       	in	r0, 0x3f	; 63
    1a10:	f8 94       	cli
    1a12:	de bf       	out	0x3e, r29	; 62
    1a14:	0f be       	out	0x3f, r0	; 63
    1a16:	cd bf       	out	0x3d, r28	; 61
    1a18:	cf 91       	pop	r28
    1a1a:	df 91       	pop	r29
    1a1c:	08 95       	ret

00001a1e <IIC_enuSendSlaveAddressWrite>:
ES_t IIC_enuSendSlaveAddressWrite(u8 Copy_u8Address)
{
    1a1e:	df 93       	push	r29
    1a20:	cf 93       	push	r28
    1a22:	cd b7       	in	r28, 0x3d	; 61
    1a24:	de b7       	in	r29, 0x3e	; 62
    1a26:	60 97       	sbiw	r28, 0x10	; 16
    1a28:	0f b6       	in	r0, 0x3f	; 63
    1a2a:	f8 94       	cli
    1a2c:	de bf       	out	0x3e, r29	; 62
    1a2e:	0f be       	out	0x3f, r0	; 63
    1a30:	cd bf       	out	0x3d, r28	; 61
    1a32:	88 8b       	std	Y+16, r24	; 0x10
	ES_t Local_enuErrorState=ES_OK;
    1a34:	1f 86       	std	Y+15, r1	; 0x0f
	TWDR = (Copy_u8Address << 1);
    1a36:	e3 e2       	ldi	r30, 0x23	; 35
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	88 89       	ldd	r24, Y+16	; 0x10
    1a3c:	88 0f       	add	r24, r24
    1a3e:	80 83       	st	Z, r24
    TWCR|=(1<<7);
    1a40:	a6 e5       	ldi	r26, 0x56	; 86
    1a42:	b0 e0       	ldi	r27, 0x00	; 0
    1a44:	e6 e5       	ldi	r30, 0x56	; 86
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	80 81       	ld	r24, Z
    1a4a:	80 68       	ori	r24, 0x80	; 128
    1a4c:	8c 93       	st	X, r24
	while((TWCR>>7) == 0);
    1a4e:	e6 e5       	ldi	r30, 0x56	; 86
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	80 81       	ld	r24, Z
    1a54:	88 23       	and	r24, r24
    1a56:	dc f7       	brge	.-10     	; 0x1a4e <IIC_enuSendSlaveAddressWrite+0x30>
	while((TWSR & 0xF8) != SLAVE_AD_AND_WR_ACK);
    1a58:	e1 e2       	ldi	r30, 0x21	; 33
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	80 81       	ld	r24, Z
    1a5e:	88 2f       	mov	r24, r24
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	88 7f       	andi	r24, 0xF8	; 248
    1a64:	90 70       	andi	r25, 0x00	; 0
    1a66:	88 31       	cpi	r24, 0x18	; 24
    1a68:	91 05       	cpc	r25, r1
    1a6a:	b1 f7       	brne	.-20     	; 0x1a58 <IIC_enuSendSlaveAddressWrite+0x3a>
    1a6c:	80 e0       	ldi	r24, 0x00	; 0
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	a0 e2       	ldi	r26, 0x20	; 32
    1a72:	b1 e4       	ldi	r27, 0x41	; 65
    1a74:	8b 87       	std	Y+11, r24	; 0x0b
    1a76:	9c 87       	std	Y+12, r25	; 0x0c
    1a78:	ad 87       	std	Y+13, r26	; 0x0d
    1a7a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a80:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a82:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a84:	20 e0       	ldi	r18, 0x00	; 0
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	4a e7       	ldi	r20, 0x7A	; 122
    1a8a:	55 e4       	ldi	r21, 0x45	; 69
    1a8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a90:	dc 01       	movw	r26, r24
    1a92:	cb 01       	movw	r24, r22
    1a94:	8f 83       	std	Y+7, r24	; 0x07
    1a96:	98 87       	std	Y+8, r25	; 0x08
    1a98:	a9 87       	std	Y+9, r26	; 0x09
    1a9a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a9e:	78 85       	ldd	r23, Y+8	; 0x08
    1aa0:	89 85       	ldd	r24, Y+9	; 0x09
    1aa2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa4:	20 e0       	ldi	r18, 0x00	; 0
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	40 e8       	ldi	r20, 0x80	; 128
    1aaa:	5f e3       	ldi	r21, 0x3F	; 63
    1aac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ab0:	88 23       	and	r24, r24
    1ab2:	2c f4       	brge	.+10     	; 0x1abe <IIC_enuSendSlaveAddressWrite+0xa0>
		__ticks = 1;
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	9e 83       	std	Y+6, r25	; 0x06
    1aba:	8d 83       	std	Y+5, r24	; 0x05
    1abc:	3f c0       	rjmp	.+126    	; 0x1b3c <IIC_enuSendSlaveAddressWrite+0x11e>
	else if (__tmp > 65535)
    1abe:	6f 81       	ldd	r22, Y+7	; 0x07
    1ac0:	78 85       	ldd	r23, Y+8	; 0x08
    1ac2:	89 85       	ldd	r24, Y+9	; 0x09
    1ac4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	3f ef       	ldi	r19, 0xFF	; 255
    1aca:	4f e7       	ldi	r20, 0x7F	; 127
    1acc:	57 e4       	ldi	r21, 0x47	; 71
    1ace:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ad2:	18 16       	cp	r1, r24
    1ad4:	4c f5       	brge	.+82     	; 0x1b28 <IIC_enuSendSlaveAddressWrite+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ad8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ada:	8d 85       	ldd	r24, Y+13	; 0x0d
    1adc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ade:	20 e0       	ldi	r18, 0x00	; 0
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	40 e2       	ldi	r20, 0x20	; 32
    1ae4:	51 e4       	ldi	r21, 0x41	; 65
    1ae6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aea:	dc 01       	movw	r26, r24
    1aec:	cb 01       	movw	r24, r22
    1aee:	bc 01       	movw	r22, r24
    1af0:	cd 01       	movw	r24, r26
    1af2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af6:	dc 01       	movw	r26, r24
    1af8:	cb 01       	movw	r24, r22
    1afa:	9e 83       	std	Y+6, r25	; 0x06
    1afc:	8d 83       	std	Y+5, r24	; 0x05
    1afe:	0f c0       	rjmp	.+30     	; 0x1b1e <IIC_enuSendSlaveAddressWrite+0x100>
    1b00:	80 e9       	ldi	r24, 0x90	; 144
    1b02:	91 e0       	ldi	r25, 0x01	; 1
    1b04:	9c 83       	std	Y+4, r25	; 0x04
    1b06:	8b 83       	std	Y+3, r24	; 0x03
    1b08:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0c:	01 97       	sbiw	r24, 0x01	; 1
    1b0e:	f1 f7       	brne	.-4      	; 0x1b0c <IIC_enuSendSlaveAddressWrite+0xee>
    1b10:	9c 83       	std	Y+4, r25	; 0x04
    1b12:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b14:	8d 81       	ldd	r24, Y+5	; 0x05
    1b16:	9e 81       	ldd	r25, Y+6	; 0x06
    1b18:	01 97       	sbiw	r24, 0x01	; 1
    1b1a:	9e 83       	std	Y+6, r25	; 0x06
    1b1c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b20:	9e 81       	ldd	r25, Y+6	; 0x06
    1b22:	00 97       	sbiw	r24, 0x00	; 0
    1b24:	69 f7       	brne	.-38     	; 0x1b00 <IIC_enuSendSlaveAddressWrite+0xe2>
    1b26:	14 c0       	rjmp	.+40     	; 0x1b50 <IIC_enuSendSlaveAddressWrite+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b28:	6f 81       	ldd	r22, Y+7	; 0x07
    1b2a:	78 85       	ldd	r23, Y+8	; 0x08
    1b2c:	89 85       	ldd	r24, Y+9	; 0x09
    1b2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22
    1b38:	9e 83       	std	Y+6, r25	; 0x06
    1b3a:	8d 83       	std	Y+5, r24	; 0x05
    1b3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b40:	9a 83       	std	Y+2, r25	; 0x02
    1b42:	89 83       	std	Y+1, r24	; 0x01
    1b44:	89 81       	ldd	r24, Y+1	; 0x01
    1b46:	9a 81       	ldd	r25, Y+2	; 0x02
    1b48:	01 97       	sbiw	r24, 0x01	; 1
    1b4a:	f1 f7       	brne	.-4      	; 0x1b48 <IIC_enuSendSlaveAddressWrite+0x12a>
    1b4c:	9a 83       	std	Y+2, r25	; 0x02
    1b4e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	return Local_enuErrorState;
    1b50:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    1b52:	60 96       	adiw	r28, 0x10	; 16
    1b54:	0f b6       	in	r0, 0x3f	; 63
    1b56:	f8 94       	cli
    1b58:	de bf       	out	0x3e, r29	; 62
    1b5a:	0f be       	out	0x3f, r0	; 63
    1b5c:	cd bf       	out	0x3d, r28	; 61
    1b5e:	cf 91       	pop	r28
    1b60:	df 91       	pop	r29
    1b62:	08 95       	ret

00001b64 <IIC_enuSendSlaveAddressRead>:
ES_t IIC_enuSendSlaveAddressRead(u8 Copy_u8Address)
{
    1b64:	df 93       	push	r29
    1b66:	cf 93       	push	r28
    1b68:	cd b7       	in	r28, 0x3d	; 61
    1b6a:	de b7       	in	r29, 0x3e	; 62
    1b6c:	60 97       	sbiw	r28, 0x10	; 16
    1b6e:	0f b6       	in	r0, 0x3f	; 63
    1b70:	f8 94       	cli
    1b72:	de bf       	out	0x3e, r29	; 62
    1b74:	0f be       	out	0x3f, r0	; 63
    1b76:	cd bf       	out	0x3d, r28	; 61
    1b78:	88 8b       	std	Y+16, r24	; 0x10
	ES_t Local_enuErrorState=ES_OK;
    1b7a:	1f 86       	std	Y+15, r1	; 0x0f
	TWDR = ((Copy_u8Address << 1) | 1);
    1b7c:	e3 e2       	ldi	r30, 0x23	; 35
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	88 89       	ldd	r24, Y+16	; 0x10
    1b82:	88 2f       	mov	r24, r24
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	88 0f       	add	r24, r24
    1b88:	99 1f       	adc	r25, r25
    1b8a:	81 60       	ori	r24, 0x01	; 1
    1b8c:	80 83       	st	Z, r24
	TWCR|=(1<<7);
    1b8e:	a6 e5       	ldi	r26, 0x56	; 86
    1b90:	b0 e0       	ldi	r27, 0x00	; 0
    1b92:	e6 e5       	ldi	r30, 0x56	; 86
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	80 81       	ld	r24, Z
    1b98:	80 68       	ori	r24, 0x80	; 128
    1b9a:	8c 93       	st	X, r24
	while((TWCR>>7) == 0);
    1b9c:	e6 e5       	ldi	r30, 0x56	; 86
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	80 81       	ld	r24, Z
    1ba2:	88 23       	and	r24, r24
    1ba4:	dc f7       	brge	.-10     	; 0x1b9c <IIC_enuSendSlaveAddressRead+0x38>
	while((TWSR & 0xF8) != SLAVE_AD_AND_RD_ACK);
    1ba6:	e1 e2       	ldi	r30, 0x21	; 33
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	80 81       	ld	r24, Z
    1bac:	88 2f       	mov	r24, r24
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	88 7f       	andi	r24, 0xF8	; 248
    1bb2:	90 70       	andi	r25, 0x00	; 0
    1bb4:	80 34       	cpi	r24, 0x40	; 64
    1bb6:	91 05       	cpc	r25, r1
    1bb8:	b1 f7       	brne	.-20     	; 0x1ba6 <IIC_enuSendSlaveAddressRead+0x42>
    1bba:	80 e0       	ldi	r24, 0x00	; 0
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	a0 e2       	ldi	r26, 0x20	; 32
    1bc0:	b1 e4       	ldi	r27, 0x41	; 65
    1bc2:	8b 87       	std	Y+11, r24	; 0x0b
    1bc4:	9c 87       	std	Y+12, r25	; 0x0c
    1bc6:	ad 87       	std	Y+13, r26	; 0x0d
    1bc8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bca:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bcc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bce:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bd2:	20 e0       	ldi	r18, 0x00	; 0
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	4a e7       	ldi	r20, 0x7A	; 122
    1bd8:	55 e4       	ldi	r21, 0x45	; 69
    1bda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bde:	dc 01       	movw	r26, r24
    1be0:	cb 01       	movw	r24, r22
    1be2:	8f 83       	std	Y+7, r24	; 0x07
    1be4:	98 87       	std	Y+8, r25	; 0x08
    1be6:	a9 87       	std	Y+9, r26	; 0x09
    1be8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bea:	6f 81       	ldd	r22, Y+7	; 0x07
    1bec:	78 85       	ldd	r23, Y+8	; 0x08
    1bee:	89 85       	ldd	r24, Y+9	; 0x09
    1bf0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bf2:	20 e0       	ldi	r18, 0x00	; 0
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	40 e8       	ldi	r20, 0x80	; 128
    1bf8:	5f e3       	ldi	r21, 0x3F	; 63
    1bfa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bfe:	88 23       	and	r24, r24
    1c00:	2c f4       	brge	.+10     	; 0x1c0c <IIC_enuSendSlaveAddressRead+0xa8>
		__ticks = 1;
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	9e 83       	std	Y+6, r25	; 0x06
    1c08:	8d 83       	std	Y+5, r24	; 0x05
    1c0a:	3f c0       	rjmp	.+126    	; 0x1c8a <IIC_enuSendSlaveAddressRead+0x126>
	else if (__tmp > 65535)
    1c0c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c0e:	78 85       	ldd	r23, Y+8	; 0x08
    1c10:	89 85       	ldd	r24, Y+9	; 0x09
    1c12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c14:	20 e0       	ldi	r18, 0x00	; 0
    1c16:	3f ef       	ldi	r19, 0xFF	; 255
    1c18:	4f e7       	ldi	r20, 0x7F	; 127
    1c1a:	57 e4       	ldi	r21, 0x47	; 71
    1c1c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c20:	18 16       	cp	r1, r24
    1c22:	4c f5       	brge	.+82     	; 0x1c76 <IIC_enuSendSlaveAddressRead+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c24:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c26:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c28:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c2c:	20 e0       	ldi	r18, 0x00	; 0
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	40 e2       	ldi	r20, 0x20	; 32
    1c32:	51 e4       	ldi	r21, 0x41	; 65
    1c34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c38:	dc 01       	movw	r26, r24
    1c3a:	cb 01       	movw	r24, r22
    1c3c:	bc 01       	movw	r22, r24
    1c3e:	cd 01       	movw	r24, r26
    1c40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c44:	dc 01       	movw	r26, r24
    1c46:	cb 01       	movw	r24, r22
    1c48:	9e 83       	std	Y+6, r25	; 0x06
    1c4a:	8d 83       	std	Y+5, r24	; 0x05
    1c4c:	0f c0       	rjmp	.+30     	; 0x1c6c <IIC_enuSendSlaveAddressRead+0x108>
    1c4e:	80 e9       	ldi	r24, 0x90	; 144
    1c50:	91 e0       	ldi	r25, 0x01	; 1
    1c52:	9c 83       	std	Y+4, r25	; 0x04
    1c54:	8b 83       	std	Y+3, r24	; 0x03
    1c56:	8b 81       	ldd	r24, Y+3	; 0x03
    1c58:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5a:	01 97       	sbiw	r24, 0x01	; 1
    1c5c:	f1 f7       	brne	.-4      	; 0x1c5a <IIC_enuSendSlaveAddressRead+0xf6>
    1c5e:	9c 83       	std	Y+4, r25	; 0x04
    1c60:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c62:	8d 81       	ldd	r24, Y+5	; 0x05
    1c64:	9e 81       	ldd	r25, Y+6	; 0x06
    1c66:	01 97       	sbiw	r24, 0x01	; 1
    1c68:	9e 83       	std	Y+6, r25	; 0x06
    1c6a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c70:	00 97       	sbiw	r24, 0x00	; 0
    1c72:	69 f7       	brne	.-38     	; 0x1c4e <IIC_enuSendSlaveAddressRead+0xea>
    1c74:	14 c0       	rjmp	.+40     	; 0x1c9e <IIC_enuSendSlaveAddressRead+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c76:	6f 81       	ldd	r22, Y+7	; 0x07
    1c78:	78 85       	ldd	r23, Y+8	; 0x08
    1c7a:	89 85       	ldd	r24, Y+9	; 0x09
    1c7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c82:	dc 01       	movw	r26, r24
    1c84:	cb 01       	movw	r24, r22
    1c86:	9e 83       	std	Y+6, r25	; 0x06
    1c88:	8d 83       	std	Y+5, r24	; 0x05
    1c8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c8e:	9a 83       	std	Y+2, r25	; 0x02
    1c90:	89 83       	std	Y+1, r24	; 0x01
    1c92:	89 81       	ldd	r24, Y+1	; 0x01
    1c94:	9a 81       	ldd	r25, Y+2	; 0x02
    1c96:	01 97       	sbiw	r24, 0x01	; 1
    1c98:	f1 f7       	brne	.-4      	; 0x1c96 <IIC_enuSendSlaveAddressRead+0x132>
    1c9a:	9a 83       	std	Y+2, r25	; 0x02
    1c9c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	return Local_enuErrorState;
    1c9e:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    1ca0:	60 96       	adiw	r28, 0x10	; 16
    1ca2:	0f b6       	in	r0, 0x3f	; 63
    1ca4:	f8 94       	cli
    1ca6:	de bf       	out	0x3e, r29	; 62
    1ca8:	0f be       	out	0x3f, r0	; 63
    1caa:	cd bf       	out	0x3d, r28	; 61
    1cac:	cf 91       	pop	r28
    1cae:	df 91       	pop	r29
    1cb0:	08 95       	ret

00001cb2 <IIC_enuSendData>:
ES_t IIC_enuSendData(u8 Copy_u8Data)
{
    1cb2:	df 93       	push	r29
    1cb4:	cf 93       	push	r28
    1cb6:	cd b7       	in	r28, 0x3d	; 61
    1cb8:	de b7       	in	r29, 0x3e	; 62
    1cba:	60 97       	sbiw	r28, 0x10	; 16
    1cbc:	0f b6       	in	r0, 0x3f	; 63
    1cbe:	f8 94       	cli
    1cc0:	de bf       	out	0x3e, r29	; 62
    1cc2:	0f be       	out	0x3f, r0	; 63
    1cc4:	cd bf       	out	0x3d, r28	; 61
    1cc6:	88 8b       	std	Y+16, r24	; 0x10
	ES_t Local_enuErrorState=ES_OK;
    1cc8:	1f 86       	std	Y+15, r1	; 0x0f
	TWDR = Copy_u8Data;
    1cca:	e3 e2       	ldi	r30, 0x23	; 35
    1ccc:	f0 e0       	ldi	r31, 0x00	; 0
    1cce:	88 89       	ldd	r24, Y+16	; 0x10
    1cd0:	80 83       	st	Z, r24
    TWCR&=~(1<<5);
    1cd2:	a6 e5       	ldi	r26, 0x56	; 86
    1cd4:	b0 e0       	ldi	r27, 0x00	; 0
    1cd6:	e6 e5       	ldi	r30, 0x56	; 86
    1cd8:	f0 e0       	ldi	r31, 0x00	; 0
    1cda:	80 81       	ld	r24, Z
    1cdc:	8f 7d       	andi	r24, 0xDF	; 223
    1cde:	8c 93       	st	X, r24
	TWCR|=(1<<7);
    1ce0:	a6 e5       	ldi	r26, 0x56	; 86
    1ce2:	b0 e0       	ldi	r27, 0x00	; 0
    1ce4:	e6 e5       	ldi	r30, 0x56	; 86
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	80 81       	ld	r24, Z
    1cea:	80 68       	ori	r24, 0x80	; 128
    1cec:	8c 93       	st	X, r24
	while((TWCR>>7)== 0);
    1cee:	e6 e5       	ldi	r30, 0x56	; 86
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	80 81       	ld	r24, Z
    1cf4:	88 23       	and	r24, r24
    1cf6:	dc f7       	brge	.-10     	; 0x1cee <IIC_enuSendData+0x3c>
	while((TWSR & 0xF8) != WR_BYTE_ACK);
    1cf8:	e1 e2       	ldi	r30, 0x21	; 33
    1cfa:	f0 e0       	ldi	r31, 0x00	; 0
    1cfc:	80 81       	ld	r24, Z
    1cfe:	88 2f       	mov	r24, r24
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	88 7f       	andi	r24, 0xF8	; 248
    1d04:	90 70       	andi	r25, 0x00	; 0
    1d06:	88 32       	cpi	r24, 0x28	; 40
    1d08:	91 05       	cpc	r25, r1
    1d0a:	b1 f7       	brne	.-20     	; 0x1cf8 <IIC_enuSendData+0x46>
    1d0c:	80 e0       	ldi	r24, 0x00	; 0
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	a8 ec       	ldi	r26, 0xC8	; 200
    1d12:	b2 e4       	ldi	r27, 0x42	; 66
    1d14:	8b 87       	std	Y+11, r24	; 0x0b
    1d16:	9c 87       	std	Y+12, r25	; 0x0c
    1d18:	ad 87       	std	Y+13, r26	; 0x0d
    1d1a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d20:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d22:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d24:	20 e0       	ldi	r18, 0x00	; 0
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	4a e7       	ldi	r20, 0x7A	; 122
    1d2a:	55 e4       	ldi	r21, 0x45	; 69
    1d2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d30:	dc 01       	movw	r26, r24
    1d32:	cb 01       	movw	r24, r22
    1d34:	8f 83       	std	Y+7, r24	; 0x07
    1d36:	98 87       	std	Y+8, r25	; 0x08
    1d38:	a9 87       	std	Y+9, r26	; 0x09
    1d3a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d3c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d3e:	78 85       	ldd	r23, Y+8	; 0x08
    1d40:	89 85       	ldd	r24, Y+9	; 0x09
    1d42:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	40 e8       	ldi	r20, 0x80	; 128
    1d4a:	5f e3       	ldi	r21, 0x3F	; 63
    1d4c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d50:	88 23       	and	r24, r24
    1d52:	2c f4       	brge	.+10     	; 0x1d5e <IIC_enuSendData+0xac>
		__ticks = 1;
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	9e 83       	std	Y+6, r25	; 0x06
    1d5a:	8d 83       	std	Y+5, r24	; 0x05
    1d5c:	3f c0       	rjmp	.+126    	; 0x1ddc <IIC_enuSendData+0x12a>
	else if (__tmp > 65535)
    1d5e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d60:	78 85       	ldd	r23, Y+8	; 0x08
    1d62:	89 85       	ldd	r24, Y+9	; 0x09
    1d64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d66:	20 e0       	ldi	r18, 0x00	; 0
    1d68:	3f ef       	ldi	r19, 0xFF	; 255
    1d6a:	4f e7       	ldi	r20, 0x7F	; 127
    1d6c:	57 e4       	ldi	r21, 0x47	; 71
    1d6e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d72:	18 16       	cp	r1, r24
    1d74:	4c f5       	brge	.+82     	; 0x1dc8 <IIC_enuSendData+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d76:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d78:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d7e:	20 e0       	ldi	r18, 0x00	; 0
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	40 e2       	ldi	r20, 0x20	; 32
    1d84:	51 e4       	ldi	r21, 0x41	; 65
    1d86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d8a:	dc 01       	movw	r26, r24
    1d8c:	cb 01       	movw	r24, r22
    1d8e:	bc 01       	movw	r22, r24
    1d90:	cd 01       	movw	r24, r26
    1d92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	9e 83       	std	Y+6, r25	; 0x06
    1d9c:	8d 83       	std	Y+5, r24	; 0x05
    1d9e:	0f c0       	rjmp	.+30     	; 0x1dbe <IIC_enuSendData+0x10c>
    1da0:	80 e9       	ldi	r24, 0x90	; 144
    1da2:	91 e0       	ldi	r25, 0x01	; 1
    1da4:	9c 83       	std	Y+4, r25	; 0x04
    1da6:	8b 83       	std	Y+3, r24	; 0x03
    1da8:	8b 81       	ldd	r24, Y+3	; 0x03
    1daa:	9c 81       	ldd	r25, Y+4	; 0x04
    1dac:	01 97       	sbiw	r24, 0x01	; 1
    1dae:	f1 f7       	brne	.-4      	; 0x1dac <IIC_enuSendData+0xfa>
    1db0:	9c 83       	std	Y+4, r25	; 0x04
    1db2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1db4:	8d 81       	ldd	r24, Y+5	; 0x05
    1db6:	9e 81       	ldd	r25, Y+6	; 0x06
    1db8:	01 97       	sbiw	r24, 0x01	; 1
    1dba:	9e 83       	std	Y+6, r25	; 0x06
    1dbc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dbe:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc0:	9e 81       	ldd	r25, Y+6	; 0x06
    1dc2:	00 97       	sbiw	r24, 0x00	; 0
    1dc4:	69 f7       	brne	.-38     	; 0x1da0 <IIC_enuSendData+0xee>
    1dc6:	14 c0       	rjmp	.+40     	; 0x1df0 <IIC_enuSendData+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dc8:	6f 81       	ldd	r22, Y+7	; 0x07
    1dca:	78 85       	ldd	r23, Y+8	; 0x08
    1dcc:	89 85       	ldd	r24, Y+9	; 0x09
    1dce:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd4:	dc 01       	movw	r26, r24
    1dd6:	cb 01       	movw	r24, r22
    1dd8:	9e 83       	std	Y+6, r25	; 0x06
    1dda:	8d 83       	std	Y+5, r24	; 0x05
    1ddc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dde:	9e 81       	ldd	r25, Y+6	; 0x06
    1de0:	9a 83       	std	Y+2, r25	; 0x02
    1de2:	89 83       	std	Y+1, r24	; 0x01
    1de4:	89 81       	ldd	r24, Y+1	; 0x01
    1de6:	9a 81       	ldd	r25, Y+2	; 0x02
    1de8:	01 97       	sbiw	r24, 0x01	; 1
    1dea:	f1 f7       	brne	.-4      	; 0x1de8 <IIC_enuSendData+0x136>
    1dec:	9a 83       	std	Y+2, r25	; 0x02
    1dee:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
	return Local_enuErrorState;
    1df0:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    1df2:	60 96       	adiw	r28, 0x10	; 16
    1df4:	0f b6       	in	r0, 0x3f	; 63
    1df6:	f8 94       	cli
    1df8:	de bf       	out	0x3e, r29	; 62
    1dfa:	0f be       	out	0x3f, r0	; 63
    1dfc:	cd bf       	out	0x3d, r28	; 61
    1dfe:	cf 91       	pop	r28
    1e00:	df 91       	pop	r29
    1e02:	08 95       	ret

00001e04 <IIC_enuReadData>:
ES_t IIC_enuReadData(u8* Copy_u8Data)
{
    1e04:	df 93       	push	r29
    1e06:	cf 93       	push	r28
    1e08:	00 d0       	rcall	.+0      	; 0x1e0a <IIC_enuReadData+0x6>
    1e0a:	0f 92       	push	r0
    1e0c:	cd b7       	in	r28, 0x3d	; 61
    1e0e:	de b7       	in	r29, 0x3e	; 62
    1e10:	9b 83       	std	Y+3, r25	; 0x03
    1e12:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_OK;
    1e14:	19 82       	std	Y+1, r1	; 0x01
	TWCR = 0xC4;
    1e16:	e6 e5       	ldi	r30, 0x56	; 86
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	84 ec       	ldi	r24, 0xC4	; 196
    1e1c:	80 83       	st	Z, r24
	while((TWCR>>7)==0);
    1e1e:	e6 e5       	ldi	r30, 0x56	; 86
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	80 81       	ld	r24, Z
    1e24:	88 23       	and	r24, r24
    1e26:	dc f7       	brge	.-10     	; 0x1e1e <IIC_enuReadData+0x1a>
	*Copy_u8Data=TWDR;
    1e28:	e3 e2       	ldi	r30, 0x23	; 35
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	80 81       	ld	r24, Z
    1e2e:	ea 81       	ldd	r30, Y+2	; 0x02
    1e30:	fb 81       	ldd	r31, Y+3	; 0x03
    1e32:	80 83       	st	Z, r24
	return Local_enuErrorState;
    1e34:	89 81       	ldd	r24, Y+1	; 0x01

}
    1e36:	0f 90       	pop	r0
    1e38:	0f 90       	pop	r0
    1e3a:	0f 90       	pop	r0
    1e3c:	cf 91       	pop	r28
    1e3e:	df 91       	pop	r29
    1e40:	08 95       	ret

00001e42 <IIC_enuReadDataNoAck>:
ES_t IIC_enuReadDataNoAck(u8* Copy_u8Data)
{
    1e42:	df 93       	push	r29
    1e44:	cf 93       	push	r28
    1e46:	00 d0       	rcall	.+0      	; 0x1e48 <IIC_enuReadDataNoAck+0x6>
    1e48:	0f 92       	push	r0
    1e4a:	cd b7       	in	r28, 0x3d	; 61
    1e4c:	de b7       	in	r29, 0x3e	; 62
    1e4e:	9b 83       	std	Y+3, r25	; 0x03
    1e50:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_OK;
    1e52:	19 82       	std	Y+1, r1	; 0x01
	TWCR = 0x84;;
    1e54:	e6 e5       	ldi	r30, 0x56	; 86
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	84 e8       	ldi	r24, 0x84	; 132
    1e5a:	80 83       	st	Z, r24
	while((TWCR>>7) == 0);
    1e5c:	e6 e5       	ldi	r30, 0x56	; 86
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	80 81       	ld	r24, Z
    1e62:	88 23       	and	r24, r24
    1e64:	dc f7       	brge	.-10     	; 0x1e5c <IIC_enuReadDataNoAck+0x1a>
	*Copy_u8Data=TWDR;
    1e66:	e3 e2       	ldi	r30, 0x23	; 35
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	80 81       	ld	r24, Z
    1e6c:	ea 81       	ldd	r30, Y+2	; 0x02
    1e6e:	fb 81       	ldd	r31, Y+3	; 0x03
    1e70:	80 83       	st	Z, r24
	return Local_enuErrorState;
    1e72:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e74:	0f 90       	pop	r0
    1e76:	0f 90       	pop	r0
    1e78:	0f 90       	pop	r0
    1e7a:	cf 91       	pop	r28
    1e7c:	df 91       	pop	r29
    1e7e:	08 95       	ret

00001e80 <IIC_enuRepeatedStart>:
ES_t IIC_enuRepeatedStart(void)
{
    1e80:	df 93       	push	r29
    1e82:	cf 93       	push	r28
    1e84:	0f 92       	push	r0
    1e86:	cd b7       	in	r28, 0x3d	; 61
    1e88:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_OK;
    1e8a:	19 82       	std	Y+1, r1	; 0x01
	TWCR|=(1<<5);
    1e8c:	a6 e5       	ldi	r26, 0x56	; 86
    1e8e:	b0 e0       	ldi	r27, 0x00	; 0
    1e90:	e6 e5       	ldi	r30, 0x56	; 86
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	80 81       	ld	r24, Z
    1e96:	80 62       	ori	r24, 0x20	; 32
    1e98:	8c 93       	st	X, r24
	TWCR|=(1<<7);
    1e9a:	a6 e5       	ldi	r26, 0x56	; 86
    1e9c:	b0 e0       	ldi	r27, 0x00	; 0
    1e9e:	e6 e5       	ldi	r30, 0x56	; 86
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	80 81       	ld	r24, Z
    1ea4:	80 68       	ori	r24, 0x80	; 128
    1ea6:	8c 93       	st	X, r24
	while((TWCR>>7) == 0);
    1ea8:	e6 e5       	ldi	r30, 0x56	; 86
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	80 81       	ld	r24, Z
    1eae:	88 23       	and	r24, r24
    1eb0:	dc f7       	brge	.-10     	; 0x1ea8 <IIC_enuRepeatedStart+0x28>
	while((TWSR & 0xF8) != REP_START_ACK);
    1eb2:	e1 e2       	ldi	r30, 0x21	; 33
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	80 81       	ld	r24, Z
    1eb8:	88 2f       	mov	r24, r24
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	88 7f       	andi	r24, 0xF8	; 248
    1ebe:	90 70       	andi	r25, 0x00	; 0
    1ec0:	80 31       	cpi	r24, 0x10	; 16
    1ec2:	91 05       	cpc	r25, r1
    1ec4:	b1 f7       	brne	.-20     	; 0x1eb2 <IIC_enuRepeatedStart+0x32>
	return Local_enuErrorState;
    1ec6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ec8:	0f 90       	pop	r0
    1eca:	cf 91       	pop	r28
    1ecc:	df 91       	pop	r29
    1ece:	08 95       	ret

00001ed0 <IIC_enuStopCondition>:
ES_t IIC_enuStopCondition(void)
{
    1ed0:	df 93       	push	r29
    1ed2:	cf 93       	push	r28
    1ed4:	cd b7       	in	r28, 0x3d	; 61
    1ed6:	de b7       	in	r29, 0x3e	; 62
    1ed8:	2f 97       	sbiw	r28, 0x0f	; 15
    1eda:	0f b6       	in	r0, 0x3f	; 63
    1edc:	f8 94       	cli
    1ede:	de bf       	out	0x3e, r29	; 62
    1ee0:	0f be       	out	0x3f, r0	; 63
    1ee2:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState=ES_OK;
    1ee4:	1f 86       	std	Y+15, r1	; 0x0f
	TWCR|=(1<<4);
    1ee6:	a6 e5       	ldi	r26, 0x56	; 86
    1ee8:	b0 e0       	ldi	r27, 0x00	; 0
    1eea:	e6 e5       	ldi	r30, 0x56	; 86
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	80 81       	ld	r24, Z
    1ef0:	80 61       	ori	r24, 0x10	; 16
    1ef2:	8c 93       	st	X, r24
		TWCR|=(1<<7);
    1ef4:	a6 e5       	ldi	r26, 0x56	; 86
    1ef6:	b0 e0       	ldi	r27, 0x00	; 0
    1ef8:	e6 e5       	ldi	r30, 0x56	; 86
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	80 81       	ld	r24, Z
    1efe:	80 68       	ori	r24, 0x80	; 128
    1f00:	8c 93       	st	X, r24
    1f02:	80 e0       	ldi	r24, 0x00	; 0
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	a0 e8       	ldi	r26, 0x80	; 128
    1f08:	bf e3       	ldi	r27, 0x3F	; 63
    1f0a:	8b 87       	std	Y+11, r24	; 0x0b
    1f0c:	9c 87       	std	Y+12, r25	; 0x0c
    1f0e:	ad 87       	std	Y+13, r26	; 0x0d
    1f10:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f12:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f14:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f16:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f18:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f1a:	20 e0       	ldi	r18, 0x00	; 0
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	4a e7       	ldi	r20, 0x7A	; 122
    1f20:	55 e4       	ldi	r21, 0x45	; 69
    1f22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f26:	dc 01       	movw	r26, r24
    1f28:	cb 01       	movw	r24, r22
    1f2a:	8f 83       	std	Y+7, r24	; 0x07
    1f2c:	98 87       	std	Y+8, r25	; 0x08
    1f2e:	a9 87       	std	Y+9, r26	; 0x09
    1f30:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f32:	6f 81       	ldd	r22, Y+7	; 0x07
    1f34:	78 85       	ldd	r23, Y+8	; 0x08
    1f36:	89 85       	ldd	r24, Y+9	; 0x09
    1f38:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f3a:	20 e0       	ldi	r18, 0x00	; 0
    1f3c:	30 e0       	ldi	r19, 0x00	; 0
    1f3e:	40 e8       	ldi	r20, 0x80	; 128
    1f40:	5f e3       	ldi	r21, 0x3F	; 63
    1f42:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f46:	88 23       	and	r24, r24
    1f48:	2c f4       	brge	.+10     	; 0x1f54 <IIC_enuStopCondition+0x84>
		__ticks = 1;
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	9e 83       	std	Y+6, r25	; 0x06
    1f50:	8d 83       	std	Y+5, r24	; 0x05
    1f52:	3f c0       	rjmp	.+126    	; 0x1fd2 <IIC_enuStopCondition+0x102>
	else if (__tmp > 65535)
    1f54:	6f 81       	ldd	r22, Y+7	; 0x07
    1f56:	78 85       	ldd	r23, Y+8	; 0x08
    1f58:	89 85       	ldd	r24, Y+9	; 0x09
    1f5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f5c:	20 e0       	ldi	r18, 0x00	; 0
    1f5e:	3f ef       	ldi	r19, 0xFF	; 255
    1f60:	4f e7       	ldi	r20, 0x7F	; 127
    1f62:	57 e4       	ldi	r21, 0x47	; 71
    1f64:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f68:	18 16       	cp	r1, r24
    1f6a:	4c f5       	brge	.+82     	; 0x1fbe <IIC_enuStopCondition+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f70:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f72:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f74:	20 e0       	ldi	r18, 0x00	; 0
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	40 e2       	ldi	r20, 0x20	; 32
    1f7a:	51 e4       	ldi	r21, 0x41	; 65
    1f7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f80:	dc 01       	movw	r26, r24
    1f82:	cb 01       	movw	r24, r22
    1f84:	bc 01       	movw	r22, r24
    1f86:	cd 01       	movw	r24, r26
    1f88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f8c:	dc 01       	movw	r26, r24
    1f8e:	cb 01       	movw	r24, r22
    1f90:	9e 83       	std	Y+6, r25	; 0x06
    1f92:	8d 83       	std	Y+5, r24	; 0x05
    1f94:	0f c0       	rjmp	.+30     	; 0x1fb4 <IIC_enuStopCondition+0xe4>
    1f96:	80 e9       	ldi	r24, 0x90	; 144
    1f98:	91 e0       	ldi	r25, 0x01	; 1
    1f9a:	9c 83       	std	Y+4, r25	; 0x04
    1f9c:	8b 83       	std	Y+3, r24	; 0x03
    1f9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa2:	01 97       	sbiw	r24, 0x01	; 1
    1fa4:	f1 f7       	brne	.-4      	; 0x1fa2 <IIC_enuStopCondition+0xd2>
    1fa6:	9c 83       	std	Y+4, r25	; 0x04
    1fa8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1faa:	8d 81       	ldd	r24, Y+5	; 0x05
    1fac:	9e 81       	ldd	r25, Y+6	; 0x06
    1fae:	01 97       	sbiw	r24, 0x01	; 1
    1fb0:	9e 83       	std	Y+6, r25	; 0x06
    1fb2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fb4:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb6:	9e 81       	ldd	r25, Y+6	; 0x06
    1fb8:	00 97       	sbiw	r24, 0x00	; 0
    1fba:	69 f7       	brne	.-38     	; 0x1f96 <IIC_enuStopCondition+0xc6>
    1fbc:	14 c0       	rjmp	.+40     	; 0x1fe6 <IIC_enuStopCondition+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fbe:	6f 81       	ldd	r22, Y+7	; 0x07
    1fc0:	78 85       	ldd	r23, Y+8	; 0x08
    1fc2:	89 85       	ldd	r24, Y+9	; 0x09
    1fc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fca:	dc 01       	movw	r26, r24
    1fcc:	cb 01       	movw	r24, r22
    1fce:	9e 83       	std	Y+6, r25	; 0x06
    1fd0:	8d 83       	std	Y+5, r24	; 0x05
    1fd2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fd4:	9e 81       	ldd	r25, Y+6	; 0x06
    1fd6:	9a 83       	std	Y+2, r25	; 0x02
    1fd8:	89 83       	std	Y+1, r24	; 0x01
    1fda:	89 81       	ldd	r24, Y+1	; 0x01
    1fdc:	9a 81       	ldd	r25, Y+2	; 0x02
    1fde:	01 97       	sbiw	r24, 0x01	; 1
    1fe0:	f1 f7       	brne	.-4      	; 0x1fde <IIC_enuStopCondition+0x10e>
    1fe2:	9a 83       	std	Y+2, r25	; 0x02
    1fe4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	return Local_enuErrorState;
    1fe6:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    1fe8:	2f 96       	adiw	r28, 0x0f	; 15
    1fea:	0f b6       	in	r0, 0x3f	; 63
    1fec:	f8 94       	cli
    1fee:	de bf       	out	0x3e, r29	; 62
    1ff0:	0f be       	out	0x3f, r0	; 63
    1ff2:	cd bf       	out	0x3d, r28	; 61
    1ff4:	cf 91       	pop	r28
    1ff6:	df 91       	pop	r29
    1ff8:	08 95       	ret

00001ffa <GIE_enuEnable>:
 */
#include"../../LIBRARY/errorState.h"
#include"../../LIBRARY/stdTypes.h"
#include"GIE_conf.h"
#include"GIE_priv.h"
ES_t GIE_enuEnable(void){
    1ffa:	df 93       	push	r29
    1ffc:	cf 93       	push	r28
    1ffe:	0f 92       	push	r0
    2000:	cd b7       	in	r28, 0x3d	; 61
    2002:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_OK;
    2004:	19 82       	std	Y+1, r1	; 0x01
	SREG|=(1<<7);
    2006:	af e5       	ldi	r26, 0x5F	; 95
    2008:	b0 e0       	ldi	r27, 0x00	; 0
    200a:	ef e5       	ldi	r30, 0x5F	; 95
    200c:	f0 e0       	ldi	r31, 0x00	; 0
    200e:	80 81       	ld	r24, Z
    2010:	80 68       	ori	r24, 0x80	; 128
    2012:	8c 93       	st	X, r24
	return Local_enuErrorState;
    2014:	89 81       	ldd	r24, Y+1	; 0x01
}
    2016:	0f 90       	pop	r0
    2018:	cf 91       	pop	r28
    201a:	df 91       	pop	r29
    201c:	08 95       	ret

0000201e <GIE_enuDisable>:
ES_t GIE_enuDisable(void){
    201e:	df 93       	push	r29
    2020:	cf 93       	push	r28
    2022:	0f 92       	push	r0
    2024:	cd b7       	in	r28, 0x3d	; 61
    2026:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_OK;
    2028:	19 82       	std	Y+1, r1	; 0x01
	SREG&=~(1<<7);
    202a:	af e5       	ldi	r26, 0x5F	; 95
    202c:	b0 e0       	ldi	r27, 0x00	; 0
    202e:	ef e5       	ldi	r30, 0x5F	; 95
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	80 81       	ld	r24, Z
    2034:	8f 77       	andi	r24, 0x7F	; 127
    2036:	8c 93       	st	X, r24
	return Local_enuErrorState;
    2038:	89 81       	ldd	r24, Y+1	; 0x01
}
    203a:	0f 90       	pop	r0
    203c:	cf 91       	pop	r28
    203e:	df 91       	pop	r29
    2040:	08 95       	ret

00002042 <EXTI_enuInit>:
#include"EXTI_priv.h"
#include"../DIO/DIO_int.h"
static void (*EXTI_pFunISR0Fun)(void) = NULL;
static void (*EXTI_pFunISR1Fun)(void) = NULL;
static void (*EXTI_pFunISR2Fun)(void) = NULL;
ES_t EXTI_enuInit(void){
    2042:	df 93       	push	r29
    2044:	cf 93       	push	r28
    2046:	0f 92       	push	r0
    2048:	cd b7       	in	r28, 0x3d	; 61
    204a:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_OK;
    204c:	19 82       	std	Y+1, r1	; 0x01
	//INT0
#if EXTI0_INT_MODE==EVENT_TRIGGERED
	GICR|=(DIO_u8BIT_MASK<<6);
    204e:	ab e5       	ldi	r26, 0x5B	; 91
    2050:	b0 e0       	ldi	r27, 0x00	; 0
    2052:	eb e5       	ldi	r30, 0x5B	; 91
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	80 81       	ld	r24, Z
    2058:	80 64       	ori	r24, 0x40	; 64
    205a:	8c 93       	st	X, r24
#else
#error exti0 configuration is wrong

#endif
	//clear register before intializion
	MCUCR &=~(3<<0);
    205c:	a5 e5       	ldi	r26, 0x55	; 85
    205e:	b0 e0       	ldi	r27, 0x00	; 0
    2060:	e5 e5       	ldi	r30, 0x55	; 85
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	80 81       	ld	r24, Z
    2066:	8c 7f       	andi	r24, 0xFC	; 252
    2068:	8c 93       	st	X, r24
#if EXTI0_SENSE_LEVEL == LOW_LEVEL

#elif EXTI0_SENSE_LEVEL == ANY_CHANGE
	MCUCR |= (1<<0);
#elif EXTI0_SENSE_LEVEL == FALLING
	MCUCR |= (2<<0);
    206a:	a5 e5       	ldi	r26, 0x55	; 85
    206c:	b0 e0       	ldi	r27, 0x00	; 0
    206e:	e5 e5       	ldi	r30, 0x55	; 85
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	80 81       	ld	r24, Z
    2074:	82 60       	ori	r24, 0x02	; 2
    2076:	8c 93       	st	X, r24
	GICR&=~(DIO_u8BIT_MASK<<7);
#else
//#error exti0 configuration is wrong
#endif
	//clear register before intializion
	MCUCR &=~(3<<2);
    2078:	a5 e5       	ldi	r26, 0x55	; 85
    207a:	b0 e0       	ldi	r27, 0x00	; 0
    207c:	e5 e5       	ldi	r30, 0x55	; 85
    207e:	f0 e0       	ldi	r31, 0x00	; 0
    2080:	80 81       	ld	r24, Z
    2082:	83 7f       	andi	r24, 0xF3	; 243
    2084:	8c 93       	st	X, r24
	GICR&=~(DIO_u8BIT_MASK<<5);
#else
//#error exti2 configuration is wrong
#endif
	//clear register before intializion
	MCUCSR&=~(1<<6);
    2086:	a4 e5       	ldi	r26, 0x54	; 84
    2088:	b0 e0       	ldi	r27, 0x00	; 0
    208a:	e4 e5       	ldi	r30, 0x54	; 84
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	80 81       	ld	r24, Z
    2090:	8f 7b       	andi	r24, 0xBF	; 191
    2092:	8c 93       	st	X, r24

#if EXTI2_SENSE_LEVEL==FALLING

#elif EXTI2_SENSE_LEVEL==RISING
	MCUCSR|=(1<<6);
    2094:	a4 e5       	ldi	r26, 0x54	; 84
    2096:	b0 e0       	ldi	r27, 0x00	; 0
    2098:	e4 e5       	ldi	r30, 0x54	; 84
    209a:	f0 e0       	ldi	r31, 0x00	; 0
    209c:	80 81       	ld	r24, Z
    209e:	80 64       	ori	r24, 0x40	; 64
    20a0:	8c 93       	st	X, r24
#else
#error sense level of exti 0 is wrong
#endif
	return Local_enuErrorState;
    20a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    20a4:	0f 90       	pop	r0
    20a6:	cf 91       	pop	r28
    20a8:	df 91       	pop	r29
    20aa:	08 95       	ret

000020ac <EXTI_enuSetSenseLevel>:

ES_t EXTI_enuSetSenseLevel(u8 Copy_u8IntPinNum , u8 Copy_u8SenseLevel){
    20ac:	df 93       	push	r29
    20ae:	cf 93       	push	r28
    20b0:	cd b7       	in	r28, 0x3d	; 61
    20b2:	de b7       	in	r29, 0x3e	; 62
    20b4:	29 97       	sbiw	r28, 0x09	; 9
    20b6:	0f b6       	in	r0, 0x3f	; 63
    20b8:	f8 94       	cli
    20ba:	de bf       	out	0x3e, r29	; 62
    20bc:	0f be       	out	0x3f, r0	; 63
    20be:	cd bf       	out	0x3d, r28	; 61
    20c0:	8a 83       	std	Y+2, r24	; 0x02
    20c2:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState=ES_OK;
    20c4:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8IntPinNum == INT0)
    20c6:	8a 81       	ldd	r24, Y+2	; 0x02
    20c8:	88 23       	and	r24, r24
    20ca:	09 f0       	breq	.+2      	; 0x20ce <EXTI_enuSetSenseLevel+0x22>
    20cc:	43 c0       	rjmp	.+134    	; 0x2154 <EXTI_enuSetSenseLevel+0xa8>
		{
			MCUCR &=~(3<<0);
    20ce:	a5 e5       	ldi	r26, 0x55	; 85
    20d0:	b0 e0       	ldi	r27, 0x00	; 0
    20d2:	e5 e5       	ldi	r30, 0x55	; 85
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	80 81       	ld	r24, Z
    20d8:	8c 7f       	andi	r24, 0xFC	; 252
    20da:	8c 93       	st	X, r24
			switch(Copy_u8SenseLevel)
    20dc:	8b 81       	ldd	r24, Y+3	; 0x03
    20de:	28 2f       	mov	r18, r24
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	39 87       	std	Y+9, r19	; 0x09
    20e4:	28 87       	std	Y+8, r18	; 0x08
    20e6:	88 85       	ldd	r24, Y+8	; 0x08
    20e8:	99 85       	ldd	r25, Y+9	; 0x09
    20ea:	82 32       	cpi	r24, 0x22	; 34
    20ec:	91 05       	cpc	r25, r1
    20ee:	b9 f0       	breq	.+46     	; 0x211e <EXTI_enuSetSenseLevel+0x72>
    20f0:	28 85       	ldd	r18, Y+8	; 0x08
    20f2:	39 85       	ldd	r19, Y+9	; 0x09
    20f4:	23 32       	cpi	r18, 0x23	; 35
    20f6:	31 05       	cpc	r19, r1
    20f8:	64 f4       	brge	.+24     	; 0x2112 <EXTI_enuSetSenseLevel+0x66>
    20fa:	88 85       	ldd	r24, Y+8	; 0x08
    20fc:	99 85       	ldd	r25, Y+9	; 0x09
    20fe:	8a 30       	cpi	r24, 0x0A	; 10
    2100:	91 05       	cpc	r25, r1
    2102:	a9 f0       	breq	.+42     	; 0x212e <EXTI_enuSetSenseLevel+0x82>
    2104:	28 85       	ldd	r18, Y+8	; 0x08
    2106:	39 85       	ldd	r19, Y+9	; 0x09
    2108:	20 32       	cpi	r18, 0x20	; 32
    210a:	31 05       	cpc	r19, r1
    210c:	09 f4       	brne	.+2      	; 0x2110 <EXTI_enuSetSenseLevel+0x64>
    210e:	8f c0       	rjmp	.+286    	; 0x222e <EXTI_enuSetSenseLevel+0x182>
    2110:	1e c0       	rjmp	.+60     	; 0x214e <EXTI_enuSetSenseLevel+0xa2>
    2112:	88 85       	ldd	r24, Y+8	; 0x08
    2114:	99 85       	ldd	r25, Y+9	; 0x09
    2116:	89 34       	cpi	r24, 0x49	; 73
    2118:	91 05       	cpc	r25, r1
    211a:	89 f0       	breq	.+34     	; 0x213e <EXTI_enuSetSenseLevel+0x92>
    211c:	18 c0       	rjmp	.+48     	; 0x214e <EXTI_enuSetSenseLevel+0xa2>
			{
			case LOW_LEVEL:

				break;
			case ANY_CHANGE:
				MCUCR |= (1<<0);
    211e:	a5 e5       	ldi	r26, 0x55	; 85
    2120:	b0 e0       	ldi	r27, 0x00	; 0
    2122:	e5 e5       	ldi	r30, 0x55	; 85
    2124:	f0 e0       	ldi	r31, 0x00	; 0
    2126:	80 81       	ld	r24, Z
    2128:	81 60       	ori	r24, 0x01	; 1
    212a:	8c 93       	st	X, r24
    212c:	80 c0       	rjmp	.+256    	; 0x222e <EXTI_enuSetSenseLevel+0x182>
				break;
			case FALLING:
				MCUCR |= (2<<0);
    212e:	a5 e5       	ldi	r26, 0x55	; 85
    2130:	b0 e0       	ldi	r27, 0x00	; 0
    2132:	e5 e5       	ldi	r30, 0x55	; 85
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	80 81       	ld	r24, Z
    2138:	82 60       	ori	r24, 0x02	; 2
    213a:	8c 93       	st	X, r24
    213c:	78 c0       	rjmp	.+240    	; 0x222e <EXTI_enuSetSenseLevel+0x182>
				break;
			case RISING:
				MCUCR |= (3<<0);
    213e:	a5 e5       	ldi	r26, 0x55	; 85
    2140:	b0 e0       	ldi	r27, 0x00	; 0
    2142:	e5 e5       	ldi	r30, 0x55	; 85
    2144:	f0 e0       	ldi	r31, 0x00	; 0
    2146:	80 81       	ld	r24, Z
    2148:	83 60       	ori	r24, 0x03	; 3
    214a:	8c 93       	st	X, r24
    214c:	70 c0       	rjmp	.+224    	; 0x222e <EXTI_enuSetSenseLevel+0x182>
				break;
			default:
				Local_enuErrorState = ES_OUT_OF_RANGE;
    214e:	82 e0       	ldi	r24, 0x02	; 2
    2150:	89 83       	std	Y+1, r24	; 0x01
    2152:	6d c0       	rjmp	.+218    	; 0x222e <EXTI_enuSetSenseLevel+0x182>
			}
		}
		else if(Copy_u8IntPinNum == INT1)
    2154:	8a 81       	ldd	r24, Y+2	; 0x02
    2156:	81 30       	cpi	r24, 0x01	; 1
    2158:	09 f0       	breq	.+2      	; 0x215c <EXTI_enuSetSenseLevel+0xb0>
    215a:	43 c0       	rjmp	.+134    	; 0x21e2 <EXTI_enuSetSenseLevel+0x136>
		{
           MCUCR&=~(3<<2);
    215c:	a5 e5       	ldi	r26, 0x55	; 85
    215e:	b0 e0       	ldi	r27, 0x00	; 0
    2160:	e5 e5       	ldi	r30, 0x55	; 85
    2162:	f0 e0       	ldi	r31, 0x00	; 0
    2164:	80 81       	ld	r24, Z
    2166:	83 7f       	andi	r24, 0xF3	; 243
    2168:	8c 93       	st	X, r24
       	switch(Copy_u8SenseLevel)
    216a:	8b 81       	ldd	r24, Y+3	; 0x03
    216c:	28 2f       	mov	r18, r24
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	3f 83       	std	Y+7, r19	; 0x07
    2172:	2e 83       	std	Y+6, r18	; 0x06
    2174:	8e 81       	ldd	r24, Y+6	; 0x06
    2176:	9f 81       	ldd	r25, Y+7	; 0x07
    2178:	82 32       	cpi	r24, 0x22	; 34
    217a:	91 05       	cpc	r25, r1
    217c:	b9 f0       	breq	.+46     	; 0x21ac <EXTI_enuSetSenseLevel+0x100>
    217e:	2e 81       	ldd	r18, Y+6	; 0x06
    2180:	3f 81       	ldd	r19, Y+7	; 0x07
    2182:	23 32       	cpi	r18, 0x23	; 35
    2184:	31 05       	cpc	r19, r1
    2186:	64 f4       	brge	.+24     	; 0x21a0 <EXTI_enuSetSenseLevel+0xf4>
    2188:	8e 81       	ldd	r24, Y+6	; 0x06
    218a:	9f 81       	ldd	r25, Y+7	; 0x07
    218c:	8a 30       	cpi	r24, 0x0A	; 10
    218e:	91 05       	cpc	r25, r1
    2190:	a9 f0       	breq	.+42     	; 0x21bc <EXTI_enuSetSenseLevel+0x110>
    2192:	2e 81       	ldd	r18, Y+6	; 0x06
    2194:	3f 81       	ldd	r19, Y+7	; 0x07
    2196:	20 32       	cpi	r18, 0x20	; 32
    2198:	31 05       	cpc	r19, r1
    219a:	09 f4       	brne	.+2      	; 0x219e <EXTI_enuSetSenseLevel+0xf2>
    219c:	48 c0       	rjmp	.+144    	; 0x222e <EXTI_enuSetSenseLevel+0x182>
    219e:	1e c0       	rjmp	.+60     	; 0x21dc <EXTI_enuSetSenseLevel+0x130>
    21a0:	8e 81       	ldd	r24, Y+6	; 0x06
    21a2:	9f 81       	ldd	r25, Y+7	; 0x07
    21a4:	89 34       	cpi	r24, 0x49	; 73
    21a6:	91 05       	cpc	r25, r1
    21a8:	89 f0       	breq	.+34     	; 0x21cc <EXTI_enuSetSenseLevel+0x120>
    21aa:	18 c0       	rjmp	.+48     	; 0x21dc <EXTI_enuSetSenseLevel+0x130>
       			{
       			case LOW_LEVEL:

       				break;
       			case ANY_CHANGE:
       				MCUCR |= (1<<2);
    21ac:	a5 e5       	ldi	r26, 0x55	; 85
    21ae:	b0 e0       	ldi	r27, 0x00	; 0
    21b0:	e5 e5       	ldi	r30, 0x55	; 85
    21b2:	f0 e0       	ldi	r31, 0x00	; 0
    21b4:	80 81       	ld	r24, Z
    21b6:	84 60       	ori	r24, 0x04	; 4
    21b8:	8c 93       	st	X, r24
    21ba:	39 c0       	rjmp	.+114    	; 0x222e <EXTI_enuSetSenseLevel+0x182>
       				break;
       			case FALLING:
       				MCUCR |= (2<<2);
    21bc:	a5 e5       	ldi	r26, 0x55	; 85
    21be:	b0 e0       	ldi	r27, 0x00	; 0
    21c0:	e5 e5       	ldi	r30, 0x55	; 85
    21c2:	f0 e0       	ldi	r31, 0x00	; 0
    21c4:	80 81       	ld	r24, Z
    21c6:	88 60       	ori	r24, 0x08	; 8
    21c8:	8c 93       	st	X, r24
    21ca:	31 c0       	rjmp	.+98     	; 0x222e <EXTI_enuSetSenseLevel+0x182>
       				break;
       			case RISING:
       				MCUCR |= (3<<2);
    21cc:	a5 e5       	ldi	r26, 0x55	; 85
    21ce:	b0 e0       	ldi	r27, 0x00	; 0
    21d0:	e5 e5       	ldi	r30, 0x55	; 85
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	80 81       	ld	r24, Z
    21d6:	8c 60       	ori	r24, 0x0C	; 12
    21d8:	8c 93       	st	X, r24
    21da:	29 c0       	rjmp	.+82     	; 0x222e <EXTI_enuSetSenseLevel+0x182>
       				break;
       			default:
       				Local_enuErrorState = ES_OUT_OF_RANGE;
    21dc:	82 e0       	ldi	r24, 0x02	; 2
    21de:	89 83       	std	Y+1, r24	; 0x01
    21e0:	26 c0       	rjmp	.+76     	; 0x222e <EXTI_enuSetSenseLevel+0x182>
       			}

		}
		else if(Copy_u8IntPinNum == INT2)
    21e2:	8a 81       	ldd	r24, Y+2	; 0x02
    21e4:	82 30       	cpi	r24, 0x02	; 2
    21e6:	09 f5       	brne	.+66     	; 0x222a <EXTI_enuSetSenseLevel+0x17e>
		{
        MCUCSR&=~(1<<6);
    21e8:	a4 e5       	ldi	r26, 0x54	; 84
    21ea:	b0 e0       	ldi	r27, 0x00	; 0
    21ec:	e4 e5       	ldi	r30, 0x54	; 84
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	80 81       	ld	r24, Z
    21f2:	8f 7b       	andi	r24, 0xBF	; 191
    21f4:	8c 93       	st	X, r24
        switch(Copy_u8SenseLevel){
    21f6:	8b 81       	ldd	r24, Y+3	; 0x03
    21f8:	28 2f       	mov	r18, r24
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	3d 83       	std	Y+5, r19	; 0x05
    21fe:	2c 83       	std	Y+4, r18	; 0x04
    2200:	8c 81       	ldd	r24, Y+4	; 0x04
    2202:	9d 81       	ldd	r25, Y+5	; 0x05
    2204:	8a 30       	cpi	r24, 0x0A	; 10
    2206:	91 05       	cpc	r25, r1
    2208:	91 f0       	breq	.+36     	; 0x222e <EXTI_enuSetSenseLevel+0x182>
    220a:	2c 81       	ldd	r18, Y+4	; 0x04
    220c:	3d 81       	ldd	r19, Y+5	; 0x05
    220e:	29 34       	cpi	r18, 0x49	; 73
    2210:	31 05       	cpc	r19, r1
    2212:	41 f4       	brne	.+16     	; 0x2224 <EXTI_enuSetSenseLevel+0x178>
        case FALLING:
        	break;
        case RISING:
        	MCUCSR|=(1<<6);
    2214:	a4 e5       	ldi	r26, 0x54	; 84
    2216:	b0 e0       	ldi	r27, 0x00	; 0
    2218:	e4 e5       	ldi	r30, 0x54	; 84
    221a:	f0 e0       	ldi	r31, 0x00	; 0
    221c:	80 81       	ld	r24, Z
    221e:	80 64       	ori	r24, 0x40	; 64
    2220:	8c 93       	st	X, r24
    2222:	05 c0       	rjmp	.+10     	; 0x222e <EXTI_enuSetSenseLevel+0x182>
        	break;
        	default:
			Local_enuErrorState=ES_OUT_OF_RANGE;
    2224:	82 e0       	ldi	r24, 0x02	; 2
    2226:	89 83       	std	Y+1, r24	; 0x01
    2228:	02 c0       	rjmp	.+4      	; 0x222e <EXTI_enuSetSenseLevel+0x182>
		}}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    222a:	82 e0       	ldi	r24, 0x02	; 2
    222c:	89 83       	std	Y+1, r24	; 0x01
		}


		return Local_enuErrorState;
    222e:	89 81       	ldd	r24, Y+1	; 0x01
	}
    2230:	29 96       	adiw	r28, 0x09	; 9
    2232:	0f b6       	in	r0, 0x3f	; 63
    2234:	f8 94       	cli
    2236:	de bf       	out	0x3e, r29	; 62
    2238:	0f be       	out	0x3f, r0	; 63
    223a:	cd bf       	out	0x3d, r28	; 61
    223c:	cf 91       	pop	r28
    223e:	df 91       	pop	r29
    2240:	08 95       	ret

00002242 <EXTI_enuEnableInterrupt>:


ES_t EXTI_enuEnableInterrupt(u8 Copy_u8IntPinNum){
    2242:	df 93       	push	r29
    2244:	cf 93       	push	r28
    2246:	00 d0       	rcall	.+0      	; 0x2248 <EXTI_enuEnableInterrupt+0x6>
    2248:	00 d0       	rcall	.+0      	; 0x224a <EXTI_enuEnableInterrupt+0x8>
    224a:	cd b7       	in	r28, 0x3d	; 61
    224c:	de b7       	in	r29, 0x3e	; 62
    224e:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_OK;
    2250:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8IntPinNum){
    2252:	8a 81       	ldd	r24, Y+2	; 0x02
    2254:	28 2f       	mov	r18, r24
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	3c 83       	std	Y+4, r19	; 0x04
    225a:	2b 83       	std	Y+3, r18	; 0x03
    225c:	8b 81       	ldd	r24, Y+3	; 0x03
    225e:	9c 81       	ldd	r25, Y+4	; 0x04
    2260:	81 30       	cpi	r24, 0x01	; 1
    2262:	91 05       	cpc	r25, r1
    2264:	89 f0       	breq	.+34     	; 0x2288 <EXTI_enuEnableInterrupt+0x46>
    2266:	2b 81       	ldd	r18, Y+3	; 0x03
    2268:	3c 81       	ldd	r19, Y+4	; 0x04
    226a:	22 30       	cpi	r18, 0x02	; 2
    226c:	31 05       	cpc	r19, r1
    226e:	a1 f0       	breq	.+40     	; 0x2298 <EXTI_enuEnableInterrupt+0x56>
    2270:	8b 81       	ldd	r24, Y+3	; 0x03
    2272:	9c 81       	ldd	r25, Y+4	; 0x04
    2274:	00 97       	sbiw	r24, 0x00	; 0
    2276:	c1 f4       	brne	.+48     	; 0x22a8 <EXTI_enuEnableInterrupt+0x66>
	case INT0:
		GICR|=(1<<6);
    2278:	ab e5       	ldi	r26, 0x5B	; 91
    227a:	b0 e0       	ldi	r27, 0x00	; 0
    227c:	eb e5       	ldi	r30, 0x5B	; 91
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	80 81       	ld	r24, Z
    2282:	80 64       	ori	r24, 0x40	; 64
    2284:	8c 93       	st	X, r24
    2286:	12 c0       	rjmp	.+36     	; 0x22ac <EXTI_enuEnableInterrupt+0x6a>
		break;
	case INT1:
		GICR|=(1<<7	);
    2288:	ab e5       	ldi	r26, 0x5B	; 91
    228a:	b0 e0       	ldi	r27, 0x00	; 0
    228c:	eb e5       	ldi	r30, 0x5B	; 91
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	80 81       	ld	r24, Z
    2292:	80 68       	ori	r24, 0x80	; 128
    2294:	8c 93       	st	X, r24
    2296:	0a c0       	rjmp	.+20     	; 0x22ac <EXTI_enuEnableInterrupt+0x6a>
		break;
	case INT2:
		GICR|=(1<<5);
    2298:	ab e5       	ldi	r26, 0x5B	; 91
    229a:	b0 e0       	ldi	r27, 0x00	; 0
    229c:	eb e5       	ldi	r30, 0x5B	; 91
    229e:	f0 e0       	ldi	r31, 0x00	; 0
    22a0:	80 81       	ld	r24, Z
    22a2:	80 62       	ori	r24, 0x20	; 32
    22a4:	8c 93       	st	X, r24
    22a6:	02 c0       	rjmp	.+4      	; 0x22ac <EXTI_enuEnableInterrupt+0x6a>
		break;
	default:
		Local_enuErrorState=ES_OUT_OF_RANGE;
    22a8:	82 e0       	ldi	r24, 0x02	; 2
    22aa:	89 83       	std	Y+1, r24	; 0x01
}
return Local_enuErrorState;
    22ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    22ae:	0f 90       	pop	r0
    22b0:	0f 90       	pop	r0
    22b2:	0f 90       	pop	r0
    22b4:	0f 90       	pop	r0
    22b6:	cf 91       	pop	r28
    22b8:	df 91       	pop	r29
    22ba:	08 95       	ret

000022bc <EXTI_enuDisableInterrupt>:
ES_t EXTI_enuDisableInterrupt(u8 Copy_u8IntPinNum){
    22bc:	df 93       	push	r29
    22be:	cf 93       	push	r28
    22c0:	00 d0       	rcall	.+0      	; 0x22c2 <EXTI_enuDisableInterrupt+0x6>
    22c2:	00 d0       	rcall	.+0      	; 0x22c4 <EXTI_enuDisableInterrupt+0x8>
    22c4:	cd b7       	in	r28, 0x3d	; 61
    22c6:	de b7       	in	r29, 0x3e	; 62
    22c8:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_OK;
    22ca:	19 82       	std	Y+1, r1	; 0x01
		switch(Copy_u8IntPinNum){
    22cc:	8a 81       	ldd	r24, Y+2	; 0x02
    22ce:	28 2f       	mov	r18, r24
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	3c 83       	std	Y+4, r19	; 0x04
    22d4:	2b 83       	std	Y+3, r18	; 0x03
    22d6:	8b 81       	ldd	r24, Y+3	; 0x03
    22d8:	9c 81       	ldd	r25, Y+4	; 0x04
    22da:	81 30       	cpi	r24, 0x01	; 1
    22dc:	91 05       	cpc	r25, r1
    22de:	89 f0       	breq	.+34     	; 0x2302 <EXTI_enuDisableInterrupt+0x46>
    22e0:	2b 81       	ldd	r18, Y+3	; 0x03
    22e2:	3c 81       	ldd	r19, Y+4	; 0x04
    22e4:	22 30       	cpi	r18, 0x02	; 2
    22e6:	31 05       	cpc	r19, r1
    22e8:	a1 f0       	breq	.+40     	; 0x2312 <EXTI_enuDisableInterrupt+0x56>
    22ea:	8b 81       	ldd	r24, Y+3	; 0x03
    22ec:	9c 81       	ldd	r25, Y+4	; 0x04
    22ee:	00 97       	sbiw	r24, 0x00	; 0
    22f0:	c1 f4       	brne	.+48     	; 0x2322 <EXTI_enuDisableInterrupt+0x66>
		case INT0:
			GICR&=~(1<<6);
    22f2:	ab e5       	ldi	r26, 0x5B	; 91
    22f4:	b0 e0       	ldi	r27, 0x00	; 0
    22f6:	eb e5       	ldi	r30, 0x5B	; 91
    22f8:	f0 e0       	ldi	r31, 0x00	; 0
    22fa:	80 81       	ld	r24, Z
    22fc:	8f 7b       	andi	r24, 0xBF	; 191
    22fe:	8c 93       	st	X, r24
    2300:	12 c0       	rjmp	.+36     	; 0x2326 <EXTI_enuDisableInterrupt+0x6a>
			break;
		case INT1:
			GICR&=~(1<<7	);
    2302:	ab e5       	ldi	r26, 0x5B	; 91
    2304:	b0 e0       	ldi	r27, 0x00	; 0
    2306:	eb e5       	ldi	r30, 0x5B	; 91
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	80 81       	ld	r24, Z
    230c:	8f 77       	andi	r24, 0x7F	; 127
    230e:	8c 93       	st	X, r24
    2310:	0a c0       	rjmp	.+20     	; 0x2326 <EXTI_enuDisableInterrupt+0x6a>
			break;
		case INT2:
			GICR&=~(1<<5);
    2312:	ab e5       	ldi	r26, 0x5B	; 91
    2314:	b0 e0       	ldi	r27, 0x00	; 0
    2316:	eb e5       	ldi	r30, 0x5B	; 91
    2318:	f0 e0       	ldi	r31, 0x00	; 0
    231a:	80 81       	ld	r24, Z
    231c:	8f 7d       	andi	r24, 0xDF	; 223
    231e:	8c 93       	st	X, r24
    2320:	02 c0       	rjmp	.+4      	; 0x2326 <EXTI_enuDisableInterrupt+0x6a>
			break;
		default:
			Local_enuErrorState=ES_OUT_OF_RANGE;
    2322:	82 e0       	ldi	r24, 0x02	; 2
    2324:	89 83       	std	Y+1, r24	; 0x01
}
		return Local_enuErrorState;
    2326:	89 81       	ldd	r24, Y+1	; 0x01
}
    2328:	0f 90       	pop	r0
    232a:	0f 90       	pop	r0
    232c:	0f 90       	pop	r0
    232e:	0f 90       	pop	r0
    2330:	cf 91       	pop	r28
    2332:	df 91       	pop	r29
    2334:	08 95       	ret

00002336 <EXTI_enuCallBack>:

ES_t EXTI_enuCallBack(void(*Copy_pFunAppFun)(void) , u8 Copy_u8IntPinNum){
    2336:	df 93       	push	r29
    2338:	cf 93       	push	r28
    233a:	00 d0       	rcall	.+0      	; 0x233c <EXTI_enuCallBack+0x6>
    233c:	00 d0       	rcall	.+0      	; 0x233e <EXTI_enuCallBack+0x8>
    233e:	00 d0       	rcall	.+0      	; 0x2340 <EXTI_enuCallBack+0xa>
    2340:	cd b7       	in	r28, 0x3d	; 61
    2342:	de b7       	in	r29, 0x3e	; 62
    2344:	9b 83       	std	Y+3, r25	; 0x03
    2346:	8a 83       	std	Y+2, r24	; 0x02
    2348:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState=ES_OK;
    234a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pFunAppFun != NULL)
    234c:	8a 81       	ldd	r24, Y+2	; 0x02
    234e:	9b 81       	ldd	r25, Y+3	; 0x03
    2350:	00 97       	sbiw	r24, 0x00	; 0
    2352:	51 f1       	breq	.+84     	; 0x23a8 <EXTI_enuCallBack+0x72>
		{
			switch(Copy_u8IntPinNum){
    2354:	8c 81       	ldd	r24, Y+4	; 0x04
    2356:	28 2f       	mov	r18, r24
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	3e 83       	std	Y+6, r19	; 0x06
    235c:	2d 83       	std	Y+5, r18	; 0x05
    235e:	8d 81       	ldd	r24, Y+5	; 0x05
    2360:	9e 81       	ldd	r25, Y+6	; 0x06
    2362:	81 30       	cpi	r24, 0x01	; 1
    2364:	91 05       	cpc	r25, r1
    2366:	81 f0       	breq	.+32     	; 0x2388 <EXTI_enuCallBack+0x52>
    2368:	2d 81       	ldd	r18, Y+5	; 0x05
    236a:	3e 81       	ldd	r19, Y+6	; 0x06
    236c:	22 30       	cpi	r18, 0x02	; 2
    236e:	31 05       	cpc	r19, r1
    2370:	91 f0       	breq	.+36     	; 0x2396 <EXTI_enuCallBack+0x60>
    2372:	8d 81       	ldd	r24, Y+5	; 0x05
    2374:	9e 81       	ldd	r25, Y+6	; 0x06
    2376:	00 97       	sbiw	r24, 0x00	; 0
    2378:	a9 f4       	brne	.+42     	; 0x23a4 <EXTI_enuCallBack+0x6e>
			case INT0:
				EXTI_pFunISR0Fun=Copy_pFunAppFun;
    237a:	8a 81       	ldd	r24, Y+2	; 0x02
    237c:	9b 81       	ldd	r25, Y+3	; 0x03
    237e:	90 93 2c 08 	sts	0x082C, r25
    2382:	80 93 2b 08 	sts	0x082B, r24
    2386:	10 c0       	rjmp	.+32     	; 0x23a8 <EXTI_enuCallBack+0x72>
				break;
			case INT1:
				EXTI_pFunISR1Fun=Copy_pFunAppFun;
    2388:	8a 81       	ldd	r24, Y+2	; 0x02
    238a:	9b 81       	ldd	r25, Y+3	; 0x03
    238c:	90 93 2e 08 	sts	0x082E, r25
    2390:	80 93 2d 08 	sts	0x082D, r24
    2394:	09 c0       	rjmp	.+18     	; 0x23a8 <EXTI_enuCallBack+0x72>
				break;
			case INT2:
				EXTI_pFunISR2Fun=Copy_pFunAppFun;
    2396:	8a 81       	ldd	r24, Y+2	; 0x02
    2398:	9b 81       	ldd	r25, Y+3	; 0x03
    239a:	90 93 30 08 	sts	0x0830, r25
    239e:	80 93 2f 08 	sts	0x082F, r24
    23a2:	02 c0       	rjmp	.+4      	; 0x23a8 <EXTI_enuCallBack+0x72>
				break;
			default:
				Local_enuErrorState=ES_OUT_OF_RANGE;
    23a4:	82 e0       	ldi	r24, 0x02	; 2
    23a6:	89 83       	std	Y+1, r24	; 0x01
			}
		}
		return Local_enuErrorState;
    23a8:	89 81       	ldd	r24, Y+1	; 0x01
	}
    23aa:	26 96       	adiw	r28, 0x06	; 6
    23ac:	0f b6       	in	r0, 0x3f	; 63
    23ae:	f8 94       	cli
    23b0:	de bf       	out	0x3e, r29	; 62
    23b2:	0f be       	out	0x3f, r0	; 63
    23b4:	cd bf       	out	0x3d, r28	; 61
    23b6:	cf 91       	pop	r28
    23b8:	df 91       	pop	r29
    23ba:	08 95       	ret

000023bc <__vector_1>:
void __vector_2 (void)__attribute__((signal));
void __vector_3 (void)__attribute__((signal));

	//int0
	void __vector_1 (void)
	{
    23bc:	1f 92       	push	r1
    23be:	0f 92       	push	r0
    23c0:	0f b6       	in	r0, 0x3f	; 63
    23c2:	0f 92       	push	r0
    23c4:	11 24       	eor	r1, r1
    23c6:	2f 93       	push	r18
    23c8:	3f 93       	push	r19
    23ca:	4f 93       	push	r20
    23cc:	5f 93       	push	r21
    23ce:	6f 93       	push	r22
    23d0:	7f 93       	push	r23
    23d2:	8f 93       	push	r24
    23d4:	9f 93       	push	r25
    23d6:	af 93       	push	r26
    23d8:	bf 93       	push	r27
    23da:	ef 93       	push	r30
    23dc:	ff 93       	push	r31
    23de:	df 93       	push	r29
    23e0:	cf 93       	push	r28
    23e2:	cd b7       	in	r28, 0x3d	; 61
    23e4:	de b7       	in	r29, 0x3e	; 62
		if (EXTI_pFunISR0Fun != NULL)
    23e6:	80 91 2b 08 	lds	r24, 0x082B
    23ea:	90 91 2c 08 	lds	r25, 0x082C
    23ee:	00 97       	sbiw	r24, 0x00	; 0
    23f0:	29 f0       	breq	.+10     	; 0x23fc <__vector_1+0x40>
		{
			EXTI_pFunISR0Fun ();
    23f2:	e0 91 2b 08 	lds	r30, 0x082B
    23f6:	f0 91 2c 08 	lds	r31, 0x082C
    23fa:	09 95       	icall
		}
	}
    23fc:	cf 91       	pop	r28
    23fe:	df 91       	pop	r29
    2400:	ff 91       	pop	r31
    2402:	ef 91       	pop	r30
    2404:	bf 91       	pop	r27
    2406:	af 91       	pop	r26
    2408:	9f 91       	pop	r25
    240a:	8f 91       	pop	r24
    240c:	7f 91       	pop	r23
    240e:	6f 91       	pop	r22
    2410:	5f 91       	pop	r21
    2412:	4f 91       	pop	r20
    2414:	3f 91       	pop	r19
    2416:	2f 91       	pop	r18
    2418:	0f 90       	pop	r0
    241a:	0f be       	out	0x3f, r0	; 63
    241c:	0f 90       	pop	r0
    241e:	1f 90       	pop	r1
    2420:	18 95       	reti

00002422 <__vector_2>:

	//int1
	void __vector_2 (void)
	{
    2422:	1f 92       	push	r1
    2424:	0f 92       	push	r0
    2426:	0f b6       	in	r0, 0x3f	; 63
    2428:	0f 92       	push	r0
    242a:	11 24       	eor	r1, r1
    242c:	2f 93       	push	r18
    242e:	3f 93       	push	r19
    2430:	4f 93       	push	r20
    2432:	5f 93       	push	r21
    2434:	6f 93       	push	r22
    2436:	7f 93       	push	r23
    2438:	8f 93       	push	r24
    243a:	9f 93       	push	r25
    243c:	af 93       	push	r26
    243e:	bf 93       	push	r27
    2440:	ef 93       	push	r30
    2442:	ff 93       	push	r31
    2444:	df 93       	push	r29
    2446:	cf 93       	push	r28
    2448:	cd b7       	in	r28, 0x3d	; 61
    244a:	de b7       	in	r29, 0x3e	; 62
		if (EXTI_pFunISR1Fun != NULL)
    244c:	80 91 2d 08 	lds	r24, 0x082D
    2450:	90 91 2e 08 	lds	r25, 0x082E
    2454:	00 97       	sbiw	r24, 0x00	; 0
    2456:	29 f0       	breq	.+10     	; 0x2462 <__vector_2+0x40>
				{
					EXTI_pFunISR1Fun ();
    2458:	e0 91 2d 08 	lds	r30, 0x082D
    245c:	f0 91 2e 08 	lds	r31, 0x082E
    2460:	09 95       	icall
				}
	}
    2462:	cf 91       	pop	r28
    2464:	df 91       	pop	r29
    2466:	ff 91       	pop	r31
    2468:	ef 91       	pop	r30
    246a:	bf 91       	pop	r27
    246c:	af 91       	pop	r26
    246e:	9f 91       	pop	r25
    2470:	8f 91       	pop	r24
    2472:	7f 91       	pop	r23
    2474:	6f 91       	pop	r22
    2476:	5f 91       	pop	r21
    2478:	4f 91       	pop	r20
    247a:	3f 91       	pop	r19
    247c:	2f 91       	pop	r18
    247e:	0f 90       	pop	r0
    2480:	0f be       	out	0x3f, r0	; 63
    2482:	0f 90       	pop	r0
    2484:	1f 90       	pop	r1
    2486:	18 95       	reti

00002488 <__vector_3>:

	//int2
	void __vector_3 (void)
	{
    2488:	1f 92       	push	r1
    248a:	0f 92       	push	r0
    248c:	0f b6       	in	r0, 0x3f	; 63
    248e:	0f 92       	push	r0
    2490:	11 24       	eor	r1, r1
    2492:	2f 93       	push	r18
    2494:	3f 93       	push	r19
    2496:	4f 93       	push	r20
    2498:	5f 93       	push	r21
    249a:	6f 93       	push	r22
    249c:	7f 93       	push	r23
    249e:	8f 93       	push	r24
    24a0:	9f 93       	push	r25
    24a2:	af 93       	push	r26
    24a4:	bf 93       	push	r27
    24a6:	ef 93       	push	r30
    24a8:	ff 93       	push	r31
    24aa:	df 93       	push	r29
    24ac:	cf 93       	push	r28
    24ae:	cd b7       	in	r28, 0x3d	; 61
    24b0:	de b7       	in	r29, 0x3e	; 62
		if (EXTI_pFunISR2Fun != NULL)
    24b2:	80 91 2f 08 	lds	r24, 0x082F
    24b6:	90 91 30 08 	lds	r25, 0x0830
    24ba:	00 97       	sbiw	r24, 0x00	; 0
    24bc:	29 f0       	breq	.+10     	; 0x24c8 <__vector_3+0x40>
				{
					EXTI_pFunISR2Fun ();
    24be:	e0 91 2f 08 	lds	r30, 0x082F
    24c2:	f0 91 30 08 	lds	r31, 0x0830
    24c6:	09 95       	icall
				}
	}
    24c8:	cf 91       	pop	r28
    24ca:	df 91       	pop	r29
    24cc:	ff 91       	pop	r31
    24ce:	ef 91       	pop	r30
    24d0:	bf 91       	pop	r27
    24d2:	af 91       	pop	r26
    24d4:	9f 91       	pop	r25
    24d6:	8f 91       	pop	r24
    24d8:	7f 91       	pop	r23
    24da:	6f 91       	pop	r22
    24dc:	5f 91       	pop	r21
    24de:	4f 91       	pop	r20
    24e0:	3f 91       	pop	r19
    24e2:	2f 91       	pop	r18
    24e4:	0f 90       	pop	r0
    24e6:	0f be       	out	0x3f, r0	; 63
    24e8:	0f 90       	pop	r0
    24ea:	1f 90       	pop	r1
    24ec:	18 95       	reti

000024ee <DIO_enuSetPinDirection>:

#include"DIO_conf.h"
#include"DIO_priv.h"


ES_t DIO_enuSetPinDirection(u8 Copy_u8GroupID, u8 Copy_u8PinID, u8 Copy_u8Direction){
    24ee:	df 93       	push	r29
    24f0:	cf 93       	push	r28
    24f2:	00 d0       	rcall	.+0      	; 0x24f4 <DIO_enuSetPinDirection+0x6>
    24f4:	00 d0       	rcall	.+0      	; 0x24f6 <DIO_enuSetPinDirection+0x8>
    24f6:	00 d0       	rcall	.+0      	; 0x24f8 <DIO_enuSetPinDirection+0xa>
    24f8:	cd b7       	in	r28, 0x3d	; 61
    24fa:	de b7       	in	r29, 0x3e	; 62
    24fc:	8a 83       	std	Y+2, r24	; 0x02
    24fe:	6b 83       	std	Y+3, r22	; 0x03
    2500:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState=ES_OK;
    2502:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8GroupID<=DIO_u8GROUP_D&&Copy_u8PinID<=DIO_u8PIN7&&Copy_u8Direction<=DIO_u8OUTPUT){
    2504:	8a 81       	ldd	r24, Y+2	; 0x02
    2506:	84 30       	cpi	r24, 0x04	; 4
    2508:	08 f0       	brcs	.+2      	; 0x250c <DIO_enuSetPinDirection+0x1e>
    250a:	cf c0       	rjmp	.+414    	; 0x26aa <DIO_enuSetPinDirection+0x1bc>
    250c:	8b 81       	ldd	r24, Y+3	; 0x03
    250e:	88 30       	cpi	r24, 0x08	; 8
    2510:	08 f0       	brcs	.+2      	; 0x2514 <DIO_enuSetPinDirection+0x26>
    2512:	cb c0       	rjmp	.+406    	; 0x26aa <DIO_enuSetPinDirection+0x1bc>
    2514:	8c 81       	ldd	r24, Y+4	; 0x04
    2516:	82 30       	cpi	r24, 0x02	; 2
    2518:	08 f0       	brcs	.+2      	; 0x251c <DIO_enuSetPinDirection+0x2e>
    251a:	c7 c0       	rjmp	.+398    	; 0x26aa <DIO_enuSetPinDirection+0x1bc>
		switch(Copy_u8GroupID){
    251c:	8a 81       	ldd	r24, Y+2	; 0x02
    251e:	28 2f       	mov	r18, r24
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	3e 83       	std	Y+6, r19	; 0x06
    2524:	2d 83       	std	Y+5, r18	; 0x05
    2526:	6d 81       	ldd	r22, Y+5	; 0x05
    2528:	7e 81       	ldd	r23, Y+6	; 0x06
    252a:	61 30       	cpi	r22, 0x01	; 1
    252c:	71 05       	cpc	r23, r1
    252e:	09 f4       	brne	.+2      	; 0x2532 <DIO_enuSetPinDirection+0x44>
    2530:	41 c0       	rjmp	.+130    	; 0x25b4 <DIO_enuSetPinDirection+0xc6>
    2532:	8d 81       	ldd	r24, Y+5	; 0x05
    2534:	9e 81       	ldd	r25, Y+6	; 0x06
    2536:	82 30       	cpi	r24, 0x02	; 2
    2538:	91 05       	cpc	r25, r1
    253a:	34 f4       	brge	.+12     	; 0x2548 <DIO_enuSetPinDirection+0x5a>
    253c:	2d 81       	ldd	r18, Y+5	; 0x05
    253e:	3e 81       	ldd	r19, Y+6	; 0x06
    2540:	21 15       	cp	r18, r1
    2542:	31 05       	cpc	r19, r1
    2544:	71 f0       	breq	.+28     	; 0x2562 <DIO_enuSetPinDirection+0x74>
    2546:	b3 c0       	rjmp	.+358    	; 0x26ae <DIO_enuSetPinDirection+0x1c0>
    2548:	6d 81       	ldd	r22, Y+5	; 0x05
    254a:	7e 81       	ldd	r23, Y+6	; 0x06
    254c:	62 30       	cpi	r22, 0x02	; 2
    254e:	71 05       	cpc	r23, r1
    2550:	09 f4       	brne	.+2      	; 0x2554 <DIO_enuSetPinDirection+0x66>
    2552:	59 c0       	rjmp	.+178    	; 0x2606 <DIO_enuSetPinDirection+0x118>
    2554:	8d 81       	ldd	r24, Y+5	; 0x05
    2556:	9e 81       	ldd	r25, Y+6	; 0x06
    2558:	83 30       	cpi	r24, 0x03	; 3
    255a:	91 05       	cpc	r25, r1
    255c:	09 f4       	brne	.+2      	; 0x2560 <DIO_enuSetPinDirection+0x72>
    255e:	7c c0       	rjmp	.+248    	; 0x2658 <DIO_enuSetPinDirection+0x16a>
    2560:	a6 c0       	rjmp	.+332    	; 0x26ae <DIO_enuSetPinDirection+0x1c0>
		case DIO_u8GROUP_A:
			DDRA &=~(DIO_u8BIT_MASK<<Copy_u8PinID);
    2562:	aa e3       	ldi	r26, 0x3A	; 58
    2564:	b0 e0       	ldi	r27, 0x00	; 0
    2566:	ea e3       	ldi	r30, 0x3A	; 58
    2568:	f0 e0       	ldi	r31, 0x00	; 0
    256a:	80 81       	ld	r24, Z
    256c:	48 2f       	mov	r20, r24
    256e:	8b 81       	ldd	r24, Y+3	; 0x03
    2570:	28 2f       	mov	r18, r24
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	81 e0       	ldi	r24, 0x01	; 1
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	02 c0       	rjmp	.+4      	; 0x257e <DIO_enuSetPinDirection+0x90>
    257a:	88 0f       	add	r24, r24
    257c:	99 1f       	adc	r25, r25
    257e:	2a 95       	dec	r18
    2580:	e2 f7       	brpl	.-8      	; 0x257a <DIO_enuSetPinDirection+0x8c>
    2582:	80 95       	com	r24
    2584:	84 23       	and	r24, r20
    2586:	8c 93       	st	X, r24
			DDRA |=(Copy_u8Direction<<Copy_u8PinID);
    2588:	aa e3       	ldi	r26, 0x3A	; 58
    258a:	b0 e0       	ldi	r27, 0x00	; 0
    258c:	ea e3       	ldi	r30, 0x3A	; 58
    258e:	f0 e0       	ldi	r31, 0x00	; 0
    2590:	80 81       	ld	r24, Z
    2592:	48 2f       	mov	r20, r24
    2594:	8c 81       	ldd	r24, Y+4	; 0x04
    2596:	28 2f       	mov	r18, r24
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	8b 81       	ldd	r24, Y+3	; 0x03
    259c:	88 2f       	mov	r24, r24
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	b9 01       	movw	r22, r18
    25a2:	02 c0       	rjmp	.+4      	; 0x25a8 <DIO_enuSetPinDirection+0xba>
    25a4:	66 0f       	add	r22, r22
    25a6:	77 1f       	adc	r23, r23
    25a8:	8a 95       	dec	r24
    25aa:	e2 f7       	brpl	.-8      	; 0x25a4 <DIO_enuSetPinDirection+0xb6>
    25ac:	cb 01       	movw	r24, r22
    25ae:	84 2b       	or	r24, r20
    25b0:	8c 93       	st	X, r24
    25b2:	7d c0       	rjmp	.+250    	; 0x26ae <DIO_enuSetPinDirection+0x1c0>
			break;
		case DIO_u8GROUP_B:
			DDRB &=~(DIO_u8BIT_MASK<<Copy_u8PinID);
    25b4:	a7 e3       	ldi	r26, 0x37	; 55
    25b6:	b0 e0       	ldi	r27, 0x00	; 0
    25b8:	e7 e3       	ldi	r30, 0x37	; 55
    25ba:	f0 e0       	ldi	r31, 0x00	; 0
    25bc:	80 81       	ld	r24, Z
    25be:	48 2f       	mov	r20, r24
    25c0:	8b 81       	ldd	r24, Y+3	; 0x03
    25c2:	28 2f       	mov	r18, r24
    25c4:	30 e0       	ldi	r19, 0x00	; 0
    25c6:	81 e0       	ldi	r24, 0x01	; 1
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	02 c0       	rjmp	.+4      	; 0x25d0 <DIO_enuSetPinDirection+0xe2>
    25cc:	88 0f       	add	r24, r24
    25ce:	99 1f       	adc	r25, r25
    25d0:	2a 95       	dec	r18
    25d2:	e2 f7       	brpl	.-8      	; 0x25cc <DIO_enuSetPinDirection+0xde>
    25d4:	80 95       	com	r24
    25d6:	84 23       	and	r24, r20
    25d8:	8c 93       	st	X, r24
			DDRB |=(Copy_u8Direction<<Copy_u8PinID);
    25da:	a7 e3       	ldi	r26, 0x37	; 55
    25dc:	b0 e0       	ldi	r27, 0x00	; 0
    25de:	e7 e3       	ldi	r30, 0x37	; 55
    25e0:	f0 e0       	ldi	r31, 0x00	; 0
    25e2:	80 81       	ld	r24, Z
    25e4:	48 2f       	mov	r20, r24
    25e6:	8c 81       	ldd	r24, Y+4	; 0x04
    25e8:	28 2f       	mov	r18, r24
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	8b 81       	ldd	r24, Y+3	; 0x03
    25ee:	88 2f       	mov	r24, r24
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	b9 01       	movw	r22, r18
    25f4:	02 c0       	rjmp	.+4      	; 0x25fa <DIO_enuSetPinDirection+0x10c>
    25f6:	66 0f       	add	r22, r22
    25f8:	77 1f       	adc	r23, r23
    25fa:	8a 95       	dec	r24
    25fc:	e2 f7       	brpl	.-8      	; 0x25f6 <DIO_enuSetPinDirection+0x108>
    25fe:	cb 01       	movw	r24, r22
    2600:	84 2b       	or	r24, r20
    2602:	8c 93       	st	X, r24
    2604:	54 c0       	rjmp	.+168    	; 0x26ae <DIO_enuSetPinDirection+0x1c0>
			break;
		case DIO_u8GROUP_C:
			DDRC &=~(DIO_u8BIT_MASK<<Copy_u8PinID);
    2606:	a4 e3       	ldi	r26, 0x34	; 52
    2608:	b0 e0       	ldi	r27, 0x00	; 0
    260a:	e4 e3       	ldi	r30, 0x34	; 52
    260c:	f0 e0       	ldi	r31, 0x00	; 0
    260e:	80 81       	ld	r24, Z
    2610:	48 2f       	mov	r20, r24
    2612:	8b 81       	ldd	r24, Y+3	; 0x03
    2614:	28 2f       	mov	r18, r24
    2616:	30 e0       	ldi	r19, 0x00	; 0
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	02 c0       	rjmp	.+4      	; 0x2622 <DIO_enuSetPinDirection+0x134>
    261e:	88 0f       	add	r24, r24
    2620:	99 1f       	adc	r25, r25
    2622:	2a 95       	dec	r18
    2624:	e2 f7       	brpl	.-8      	; 0x261e <DIO_enuSetPinDirection+0x130>
    2626:	80 95       	com	r24
    2628:	84 23       	and	r24, r20
    262a:	8c 93       	st	X, r24
			DDRC |=(Copy_u8Direction<<Copy_u8PinID);
    262c:	a4 e3       	ldi	r26, 0x34	; 52
    262e:	b0 e0       	ldi	r27, 0x00	; 0
    2630:	e4 e3       	ldi	r30, 0x34	; 52
    2632:	f0 e0       	ldi	r31, 0x00	; 0
    2634:	80 81       	ld	r24, Z
    2636:	48 2f       	mov	r20, r24
    2638:	8c 81       	ldd	r24, Y+4	; 0x04
    263a:	28 2f       	mov	r18, r24
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	8b 81       	ldd	r24, Y+3	; 0x03
    2640:	88 2f       	mov	r24, r24
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	b9 01       	movw	r22, r18
    2646:	02 c0       	rjmp	.+4      	; 0x264c <DIO_enuSetPinDirection+0x15e>
    2648:	66 0f       	add	r22, r22
    264a:	77 1f       	adc	r23, r23
    264c:	8a 95       	dec	r24
    264e:	e2 f7       	brpl	.-8      	; 0x2648 <DIO_enuSetPinDirection+0x15a>
    2650:	cb 01       	movw	r24, r22
    2652:	84 2b       	or	r24, r20
    2654:	8c 93       	st	X, r24
    2656:	2b c0       	rjmp	.+86     	; 0x26ae <DIO_enuSetPinDirection+0x1c0>
			break;
		case DIO_u8GROUP_D:
			DDRD &=~(DIO_u8BIT_MASK<<Copy_u8PinID);
    2658:	a1 e3       	ldi	r26, 0x31	; 49
    265a:	b0 e0       	ldi	r27, 0x00	; 0
    265c:	e1 e3       	ldi	r30, 0x31	; 49
    265e:	f0 e0       	ldi	r31, 0x00	; 0
    2660:	80 81       	ld	r24, Z
    2662:	48 2f       	mov	r20, r24
    2664:	8b 81       	ldd	r24, Y+3	; 0x03
    2666:	28 2f       	mov	r18, r24
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	81 e0       	ldi	r24, 0x01	; 1
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	02 c0       	rjmp	.+4      	; 0x2674 <DIO_enuSetPinDirection+0x186>
    2670:	88 0f       	add	r24, r24
    2672:	99 1f       	adc	r25, r25
    2674:	2a 95       	dec	r18
    2676:	e2 f7       	brpl	.-8      	; 0x2670 <DIO_enuSetPinDirection+0x182>
    2678:	80 95       	com	r24
    267a:	84 23       	and	r24, r20
    267c:	8c 93       	st	X, r24
			DDRD |=(Copy_u8Direction<<Copy_u8PinID);
    267e:	a1 e3       	ldi	r26, 0x31	; 49
    2680:	b0 e0       	ldi	r27, 0x00	; 0
    2682:	e1 e3       	ldi	r30, 0x31	; 49
    2684:	f0 e0       	ldi	r31, 0x00	; 0
    2686:	80 81       	ld	r24, Z
    2688:	48 2f       	mov	r20, r24
    268a:	8c 81       	ldd	r24, Y+4	; 0x04
    268c:	28 2f       	mov	r18, r24
    268e:	30 e0       	ldi	r19, 0x00	; 0
    2690:	8b 81       	ldd	r24, Y+3	; 0x03
    2692:	88 2f       	mov	r24, r24
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	b9 01       	movw	r22, r18
    2698:	02 c0       	rjmp	.+4      	; 0x269e <DIO_enuSetPinDirection+0x1b0>
    269a:	66 0f       	add	r22, r22
    269c:	77 1f       	adc	r23, r23
    269e:	8a 95       	dec	r24
    26a0:	e2 f7       	brpl	.-8      	; 0x269a <DIO_enuSetPinDirection+0x1ac>
    26a2:	cb 01       	movw	r24, r22
    26a4:	84 2b       	or	r24, r20
    26a6:	8c 93       	st	X, r24
    26a8:	02 c0       	rjmp	.+4      	; 0x26ae <DIO_enuSetPinDirection+0x1c0>

		}

	}
	else
		Local_enuErrorState=ES_OUT_OF_RANGE;
    26aa:	82 e0       	ldi	r24, 0x02	; 2
    26ac:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState;
    26ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    26b0:	26 96       	adiw	r28, 0x06	; 6
    26b2:	0f b6       	in	r0, 0x3f	; 63
    26b4:	f8 94       	cli
    26b6:	de bf       	out	0x3e, r29	; 62
    26b8:	0f be       	out	0x3f, r0	; 63
    26ba:	cd bf       	out	0x3d, r28	; 61
    26bc:	cf 91       	pop	r28
    26be:	df 91       	pop	r29
    26c0:	08 95       	ret

000026c2 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8GroupID, u8 Copy_u8PinID, u8 Copy_u8Value){
    26c2:	df 93       	push	r29
    26c4:	cf 93       	push	r28
    26c6:	00 d0       	rcall	.+0      	; 0x26c8 <DIO_enuSetPinValue+0x6>
    26c8:	00 d0       	rcall	.+0      	; 0x26ca <DIO_enuSetPinValue+0x8>
    26ca:	00 d0       	rcall	.+0      	; 0x26cc <DIO_enuSetPinValue+0xa>
    26cc:	cd b7       	in	r28, 0x3d	; 61
    26ce:	de b7       	in	r29, 0x3e	; 62
    26d0:	8a 83       	std	Y+2, r24	; 0x02
    26d2:	6b 83       	std	Y+3, r22	; 0x03
    26d4:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState=ES_OK;
    26d6:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8GroupID<=DIO_u8GROUP_D&&Copy_u8PinID<=DIO_u8PIN7&&DIO_u8HIGH){
    26d8:	8a 81       	ldd	r24, Y+2	; 0x02
    26da:	84 30       	cpi	r24, 0x04	; 4
    26dc:	08 f0       	brcs	.+2      	; 0x26e0 <DIO_enuSetPinValue+0x1e>
    26de:	cb c0       	rjmp	.+406    	; 0x2876 <DIO_enuSetPinValue+0x1b4>
    26e0:	8b 81       	ldd	r24, Y+3	; 0x03
    26e2:	88 30       	cpi	r24, 0x08	; 8
    26e4:	08 f0       	brcs	.+2      	; 0x26e8 <DIO_enuSetPinValue+0x26>
    26e6:	c7 c0       	rjmp	.+398    	; 0x2876 <DIO_enuSetPinValue+0x1b4>
		switch(Copy_u8GroupID){
    26e8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ea:	28 2f       	mov	r18, r24
    26ec:	30 e0       	ldi	r19, 0x00	; 0
    26ee:	3e 83       	std	Y+6, r19	; 0x06
    26f0:	2d 83       	std	Y+5, r18	; 0x05
    26f2:	6d 81       	ldd	r22, Y+5	; 0x05
    26f4:	7e 81       	ldd	r23, Y+6	; 0x06
    26f6:	61 30       	cpi	r22, 0x01	; 1
    26f8:	71 05       	cpc	r23, r1
    26fa:	09 f4       	brne	.+2      	; 0x26fe <DIO_enuSetPinValue+0x3c>
    26fc:	41 c0       	rjmp	.+130    	; 0x2780 <DIO_enuSetPinValue+0xbe>
    26fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2700:	9e 81       	ldd	r25, Y+6	; 0x06
    2702:	82 30       	cpi	r24, 0x02	; 2
    2704:	91 05       	cpc	r25, r1
    2706:	34 f4       	brge	.+12     	; 0x2714 <DIO_enuSetPinValue+0x52>
    2708:	2d 81       	ldd	r18, Y+5	; 0x05
    270a:	3e 81       	ldd	r19, Y+6	; 0x06
    270c:	21 15       	cp	r18, r1
    270e:	31 05       	cpc	r19, r1
    2710:	71 f0       	breq	.+28     	; 0x272e <DIO_enuSetPinValue+0x6c>
    2712:	b3 c0       	rjmp	.+358    	; 0x287a <DIO_enuSetPinValue+0x1b8>
    2714:	6d 81       	ldd	r22, Y+5	; 0x05
    2716:	7e 81       	ldd	r23, Y+6	; 0x06
    2718:	62 30       	cpi	r22, 0x02	; 2
    271a:	71 05       	cpc	r23, r1
    271c:	09 f4       	brne	.+2      	; 0x2720 <DIO_enuSetPinValue+0x5e>
    271e:	59 c0       	rjmp	.+178    	; 0x27d2 <DIO_enuSetPinValue+0x110>
    2720:	8d 81       	ldd	r24, Y+5	; 0x05
    2722:	9e 81       	ldd	r25, Y+6	; 0x06
    2724:	83 30       	cpi	r24, 0x03	; 3
    2726:	91 05       	cpc	r25, r1
    2728:	09 f4       	brne	.+2      	; 0x272c <DIO_enuSetPinValue+0x6a>
    272a:	7c c0       	rjmp	.+248    	; 0x2824 <DIO_enuSetPinValue+0x162>
    272c:	a6 c0       	rjmp	.+332    	; 0x287a <DIO_enuSetPinValue+0x1b8>
		case DIO_u8GROUP_A:
			PORTA &=~(DIO_u8BIT_MASK<<Copy_u8PinID);
    272e:	ab e3       	ldi	r26, 0x3B	; 59
    2730:	b0 e0       	ldi	r27, 0x00	; 0
    2732:	eb e3       	ldi	r30, 0x3B	; 59
    2734:	f0 e0       	ldi	r31, 0x00	; 0
    2736:	80 81       	ld	r24, Z
    2738:	48 2f       	mov	r20, r24
    273a:	8b 81       	ldd	r24, Y+3	; 0x03
    273c:	28 2f       	mov	r18, r24
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	81 e0       	ldi	r24, 0x01	; 1
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	02 c0       	rjmp	.+4      	; 0x274a <DIO_enuSetPinValue+0x88>
    2746:	88 0f       	add	r24, r24
    2748:	99 1f       	adc	r25, r25
    274a:	2a 95       	dec	r18
    274c:	e2 f7       	brpl	.-8      	; 0x2746 <DIO_enuSetPinValue+0x84>
    274e:	80 95       	com	r24
    2750:	84 23       	and	r24, r20
    2752:	8c 93       	st	X, r24
			PORTA |=(Copy_u8Value<<Copy_u8PinID);
    2754:	ab e3       	ldi	r26, 0x3B	; 59
    2756:	b0 e0       	ldi	r27, 0x00	; 0
    2758:	eb e3       	ldi	r30, 0x3B	; 59
    275a:	f0 e0       	ldi	r31, 0x00	; 0
    275c:	80 81       	ld	r24, Z
    275e:	48 2f       	mov	r20, r24
    2760:	8c 81       	ldd	r24, Y+4	; 0x04
    2762:	28 2f       	mov	r18, r24
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	8b 81       	ldd	r24, Y+3	; 0x03
    2768:	88 2f       	mov	r24, r24
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	b9 01       	movw	r22, r18
    276e:	02 c0       	rjmp	.+4      	; 0x2774 <DIO_enuSetPinValue+0xb2>
    2770:	66 0f       	add	r22, r22
    2772:	77 1f       	adc	r23, r23
    2774:	8a 95       	dec	r24
    2776:	e2 f7       	brpl	.-8      	; 0x2770 <DIO_enuSetPinValue+0xae>
    2778:	cb 01       	movw	r24, r22
    277a:	84 2b       	or	r24, r20
    277c:	8c 93       	st	X, r24
    277e:	7d c0       	rjmp	.+250    	; 0x287a <DIO_enuSetPinValue+0x1b8>
			break;
		case DIO_u8GROUP_B:
			PORTB &=~(DIO_u8BIT_MASK<<Copy_u8PinID);
    2780:	a8 e3       	ldi	r26, 0x38	; 56
    2782:	b0 e0       	ldi	r27, 0x00	; 0
    2784:	e8 e3       	ldi	r30, 0x38	; 56
    2786:	f0 e0       	ldi	r31, 0x00	; 0
    2788:	80 81       	ld	r24, Z
    278a:	48 2f       	mov	r20, r24
    278c:	8b 81       	ldd	r24, Y+3	; 0x03
    278e:	28 2f       	mov	r18, r24
    2790:	30 e0       	ldi	r19, 0x00	; 0
    2792:	81 e0       	ldi	r24, 0x01	; 1
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	02 c0       	rjmp	.+4      	; 0x279c <DIO_enuSetPinValue+0xda>
    2798:	88 0f       	add	r24, r24
    279a:	99 1f       	adc	r25, r25
    279c:	2a 95       	dec	r18
    279e:	e2 f7       	brpl	.-8      	; 0x2798 <DIO_enuSetPinValue+0xd6>
    27a0:	80 95       	com	r24
    27a2:	84 23       	and	r24, r20
    27a4:	8c 93       	st	X, r24
			PORTB |=(Copy_u8Value<<Copy_u8PinID);
    27a6:	a8 e3       	ldi	r26, 0x38	; 56
    27a8:	b0 e0       	ldi	r27, 0x00	; 0
    27aa:	e8 e3       	ldi	r30, 0x38	; 56
    27ac:	f0 e0       	ldi	r31, 0x00	; 0
    27ae:	80 81       	ld	r24, Z
    27b0:	48 2f       	mov	r20, r24
    27b2:	8c 81       	ldd	r24, Y+4	; 0x04
    27b4:	28 2f       	mov	r18, r24
    27b6:	30 e0       	ldi	r19, 0x00	; 0
    27b8:	8b 81       	ldd	r24, Y+3	; 0x03
    27ba:	88 2f       	mov	r24, r24
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	b9 01       	movw	r22, r18
    27c0:	02 c0       	rjmp	.+4      	; 0x27c6 <DIO_enuSetPinValue+0x104>
    27c2:	66 0f       	add	r22, r22
    27c4:	77 1f       	adc	r23, r23
    27c6:	8a 95       	dec	r24
    27c8:	e2 f7       	brpl	.-8      	; 0x27c2 <DIO_enuSetPinValue+0x100>
    27ca:	cb 01       	movw	r24, r22
    27cc:	84 2b       	or	r24, r20
    27ce:	8c 93       	st	X, r24
    27d0:	54 c0       	rjmp	.+168    	; 0x287a <DIO_enuSetPinValue+0x1b8>
		 break;
		case DIO_u8GROUP_C:
			PORTC &=~(DIO_u8BIT_MASK<<Copy_u8PinID);
    27d2:	a5 e3       	ldi	r26, 0x35	; 53
    27d4:	b0 e0       	ldi	r27, 0x00	; 0
    27d6:	e5 e3       	ldi	r30, 0x35	; 53
    27d8:	f0 e0       	ldi	r31, 0x00	; 0
    27da:	80 81       	ld	r24, Z
    27dc:	48 2f       	mov	r20, r24
    27de:	8b 81       	ldd	r24, Y+3	; 0x03
    27e0:	28 2f       	mov	r18, r24
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	81 e0       	ldi	r24, 0x01	; 1
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	02 c0       	rjmp	.+4      	; 0x27ee <DIO_enuSetPinValue+0x12c>
    27ea:	88 0f       	add	r24, r24
    27ec:	99 1f       	adc	r25, r25
    27ee:	2a 95       	dec	r18
    27f0:	e2 f7       	brpl	.-8      	; 0x27ea <DIO_enuSetPinValue+0x128>
    27f2:	80 95       	com	r24
    27f4:	84 23       	and	r24, r20
    27f6:	8c 93       	st	X, r24
			PORTC |=(Copy_u8Value<<Copy_u8PinID);
    27f8:	a5 e3       	ldi	r26, 0x35	; 53
    27fa:	b0 e0       	ldi	r27, 0x00	; 0
    27fc:	e5 e3       	ldi	r30, 0x35	; 53
    27fe:	f0 e0       	ldi	r31, 0x00	; 0
    2800:	80 81       	ld	r24, Z
    2802:	48 2f       	mov	r20, r24
    2804:	8c 81       	ldd	r24, Y+4	; 0x04
    2806:	28 2f       	mov	r18, r24
    2808:	30 e0       	ldi	r19, 0x00	; 0
    280a:	8b 81       	ldd	r24, Y+3	; 0x03
    280c:	88 2f       	mov	r24, r24
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	b9 01       	movw	r22, r18
    2812:	02 c0       	rjmp	.+4      	; 0x2818 <DIO_enuSetPinValue+0x156>
    2814:	66 0f       	add	r22, r22
    2816:	77 1f       	adc	r23, r23
    2818:	8a 95       	dec	r24
    281a:	e2 f7       	brpl	.-8      	; 0x2814 <DIO_enuSetPinValue+0x152>
    281c:	cb 01       	movw	r24, r22
    281e:	84 2b       	or	r24, r20
    2820:	8c 93       	st	X, r24
    2822:	2b c0       	rjmp	.+86     	; 0x287a <DIO_enuSetPinValue+0x1b8>
			break;
		case DIO_u8GROUP_D:
			PORTD &=~(DIO_u8BIT_MASK<<Copy_u8PinID);
    2824:	a2 e3       	ldi	r26, 0x32	; 50
    2826:	b0 e0       	ldi	r27, 0x00	; 0
    2828:	e2 e3       	ldi	r30, 0x32	; 50
    282a:	f0 e0       	ldi	r31, 0x00	; 0
    282c:	80 81       	ld	r24, Z
    282e:	48 2f       	mov	r20, r24
    2830:	8b 81       	ldd	r24, Y+3	; 0x03
    2832:	28 2f       	mov	r18, r24
    2834:	30 e0       	ldi	r19, 0x00	; 0
    2836:	81 e0       	ldi	r24, 0x01	; 1
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	02 c0       	rjmp	.+4      	; 0x2840 <DIO_enuSetPinValue+0x17e>
    283c:	88 0f       	add	r24, r24
    283e:	99 1f       	adc	r25, r25
    2840:	2a 95       	dec	r18
    2842:	e2 f7       	brpl	.-8      	; 0x283c <DIO_enuSetPinValue+0x17a>
    2844:	80 95       	com	r24
    2846:	84 23       	and	r24, r20
    2848:	8c 93       	st	X, r24
			PORTD |=(Copy_u8Value<<Copy_u8PinID);
    284a:	a2 e3       	ldi	r26, 0x32	; 50
    284c:	b0 e0       	ldi	r27, 0x00	; 0
    284e:	e2 e3       	ldi	r30, 0x32	; 50
    2850:	f0 e0       	ldi	r31, 0x00	; 0
    2852:	80 81       	ld	r24, Z
    2854:	48 2f       	mov	r20, r24
    2856:	8c 81       	ldd	r24, Y+4	; 0x04
    2858:	28 2f       	mov	r18, r24
    285a:	30 e0       	ldi	r19, 0x00	; 0
    285c:	8b 81       	ldd	r24, Y+3	; 0x03
    285e:	88 2f       	mov	r24, r24
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	b9 01       	movw	r22, r18
    2864:	02 c0       	rjmp	.+4      	; 0x286a <DIO_enuSetPinValue+0x1a8>
    2866:	66 0f       	add	r22, r22
    2868:	77 1f       	adc	r23, r23
    286a:	8a 95       	dec	r24
    286c:	e2 f7       	brpl	.-8      	; 0x2866 <DIO_enuSetPinValue+0x1a4>
    286e:	cb 01       	movw	r24, r22
    2870:	84 2b       	or	r24, r20
    2872:	8c 93       	st	X, r24
    2874:	02 c0       	rjmp	.+4      	; 0x287a <DIO_enuSetPinValue+0x1b8>
			break;
		}
	}
	else
		Local_enuErrorState=ES_OUT_OF_RANGE;
    2876:	82 e0       	ldi	r24, 0x02	; 2
    2878:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState;
    287a:	89 81       	ldd	r24, Y+1	; 0x01
}
    287c:	26 96       	adiw	r28, 0x06	; 6
    287e:	0f b6       	in	r0, 0x3f	; 63
    2880:	f8 94       	cli
    2882:	de bf       	out	0x3e, r29	; 62
    2884:	0f be       	out	0x3f, r0	; 63
    2886:	cd bf       	out	0x3d, r28	; 61
    2888:	cf 91       	pop	r28
    288a:	df 91       	pop	r29
    288c:	08 95       	ret

0000288e <DIO_enuTogglePinValue>:

ES_t DIO_enuTogglePinValue(u8 Copy_u8GroupID, u8 Copy_u8PinID){
    288e:	df 93       	push	r29
    2890:	cf 93       	push	r28
    2892:	00 d0       	rcall	.+0      	; 0x2894 <DIO_enuTogglePinValue+0x6>
    2894:	00 d0       	rcall	.+0      	; 0x2896 <DIO_enuTogglePinValue+0x8>
    2896:	0f 92       	push	r0
    2898:	cd b7       	in	r28, 0x3d	; 61
    289a:	de b7       	in	r29, 0x3e	; 62
    289c:	8a 83       	std	Y+2, r24	; 0x02
    289e:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState=ES_OK;
    28a0:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8GroupID<=DIO_u8GROUP_D&&Copy_u8PinID<=DIO_u8PIN7){
    28a2:	8a 81       	ldd	r24, Y+2	; 0x02
    28a4:	84 30       	cpi	r24, 0x04	; 4
    28a6:	08 f0       	brcs	.+2      	; 0x28aa <DIO_enuTogglePinValue+0x1c>
    28a8:	73 c0       	rjmp	.+230    	; 0x2990 <DIO_enuTogglePinValue+0x102>
    28aa:	8b 81       	ldd	r24, Y+3	; 0x03
    28ac:	88 30       	cpi	r24, 0x08	; 8
    28ae:	08 f0       	brcs	.+2      	; 0x28b2 <DIO_enuTogglePinValue+0x24>
    28b0:	6f c0       	rjmp	.+222    	; 0x2990 <DIO_enuTogglePinValue+0x102>
		switch(Copy_u8GroupID){
    28b2:	8a 81       	ldd	r24, Y+2	; 0x02
    28b4:	28 2f       	mov	r18, r24
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	3d 83       	std	Y+5, r19	; 0x05
    28ba:	2c 83       	std	Y+4, r18	; 0x04
    28bc:	8c 81       	ldd	r24, Y+4	; 0x04
    28be:	9d 81       	ldd	r25, Y+5	; 0x05
    28c0:	81 30       	cpi	r24, 0x01	; 1
    28c2:	91 05       	cpc	r25, r1
    28c4:	49 f1       	breq	.+82     	; 0x2918 <DIO_enuTogglePinValue+0x8a>
    28c6:	2c 81       	ldd	r18, Y+4	; 0x04
    28c8:	3d 81       	ldd	r19, Y+5	; 0x05
    28ca:	22 30       	cpi	r18, 0x02	; 2
    28cc:	31 05       	cpc	r19, r1
    28ce:	2c f4       	brge	.+10     	; 0x28da <DIO_enuTogglePinValue+0x4c>
    28d0:	8c 81       	ldd	r24, Y+4	; 0x04
    28d2:	9d 81       	ldd	r25, Y+5	; 0x05
    28d4:	00 97       	sbiw	r24, 0x00	; 0
    28d6:	61 f0       	breq	.+24     	; 0x28f0 <DIO_enuTogglePinValue+0x62>
    28d8:	5d c0       	rjmp	.+186    	; 0x2994 <DIO_enuTogglePinValue+0x106>
    28da:	2c 81       	ldd	r18, Y+4	; 0x04
    28dc:	3d 81       	ldd	r19, Y+5	; 0x05
    28de:	22 30       	cpi	r18, 0x02	; 2
    28e0:	31 05       	cpc	r19, r1
    28e2:	71 f1       	breq	.+92     	; 0x2940 <DIO_enuTogglePinValue+0xb2>
    28e4:	8c 81       	ldd	r24, Y+4	; 0x04
    28e6:	9d 81       	ldd	r25, Y+5	; 0x05
    28e8:	83 30       	cpi	r24, 0x03	; 3
    28ea:	91 05       	cpc	r25, r1
    28ec:	e9 f1       	breq	.+122    	; 0x2968 <DIO_enuTogglePinValue+0xda>
    28ee:	52 c0       	rjmp	.+164    	; 0x2994 <DIO_enuTogglePinValue+0x106>
		case DIO_u8GROUP_A:
			PORTA ^=(DIO_u8BIT_MASK<<Copy_u8PinID);
    28f0:	ab e3       	ldi	r26, 0x3B	; 59
    28f2:	b0 e0       	ldi	r27, 0x00	; 0
    28f4:	eb e3       	ldi	r30, 0x3B	; 59
    28f6:	f0 e0       	ldi	r31, 0x00	; 0
    28f8:	80 81       	ld	r24, Z
    28fa:	48 2f       	mov	r20, r24
    28fc:	8b 81       	ldd	r24, Y+3	; 0x03
    28fe:	28 2f       	mov	r18, r24
    2900:	30 e0       	ldi	r19, 0x00	; 0
    2902:	81 e0       	ldi	r24, 0x01	; 1
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	02 2e       	mov	r0, r18
    2908:	02 c0       	rjmp	.+4      	; 0x290e <DIO_enuTogglePinValue+0x80>
    290a:	88 0f       	add	r24, r24
    290c:	99 1f       	adc	r25, r25
    290e:	0a 94       	dec	r0
    2910:	e2 f7       	brpl	.-8      	; 0x290a <DIO_enuTogglePinValue+0x7c>
    2912:	84 27       	eor	r24, r20
    2914:	8c 93       	st	X, r24
    2916:	3e c0       	rjmp	.+124    	; 0x2994 <DIO_enuTogglePinValue+0x106>
			break;
		case DIO_u8GROUP_B:
		   PORTB ^=(DIO_u8BIT_MASK<<Copy_u8PinID);
    2918:	a8 e3       	ldi	r26, 0x38	; 56
    291a:	b0 e0       	ldi	r27, 0x00	; 0
    291c:	e8 e3       	ldi	r30, 0x38	; 56
    291e:	f0 e0       	ldi	r31, 0x00	; 0
    2920:	80 81       	ld	r24, Z
    2922:	48 2f       	mov	r20, r24
    2924:	8b 81       	ldd	r24, Y+3	; 0x03
    2926:	28 2f       	mov	r18, r24
    2928:	30 e0       	ldi	r19, 0x00	; 0
    292a:	81 e0       	ldi	r24, 0x01	; 1
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	02 2e       	mov	r0, r18
    2930:	02 c0       	rjmp	.+4      	; 0x2936 <DIO_enuTogglePinValue+0xa8>
    2932:	88 0f       	add	r24, r24
    2934:	99 1f       	adc	r25, r25
    2936:	0a 94       	dec	r0
    2938:	e2 f7       	brpl	.-8      	; 0x2932 <DIO_enuTogglePinValue+0xa4>
    293a:	84 27       	eor	r24, r20
    293c:	8c 93       	st	X, r24
    293e:	2a c0       	rjmp	.+84     	; 0x2994 <DIO_enuTogglePinValue+0x106>
		   break;
		case DIO_u8GROUP_C:
			PORTC ^=(DIO_u8BIT_MASK<<Copy_u8PinID);
    2940:	a5 e3       	ldi	r26, 0x35	; 53
    2942:	b0 e0       	ldi	r27, 0x00	; 0
    2944:	e5 e3       	ldi	r30, 0x35	; 53
    2946:	f0 e0       	ldi	r31, 0x00	; 0
    2948:	80 81       	ld	r24, Z
    294a:	48 2f       	mov	r20, r24
    294c:	8b 81       	ldd	r24, Y+3	; 0x03
    294e:	28 2f       	mov	r18, r24
    2950:	30 e0       	ldi	r19, 0x00	; 0
    2952:	81 e0       	ldi	r24, 0x01	; 1
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	02 2e       	mov	r0, r18
    2958:	02 c0       	rjmp	.+4      	; 0x295e <DIO_enuTogglePinValue+0xd0>
    295a:	88 0f       	add	r24, r24
    295c:	99 1f       	adc	r25, r25
    295e:	0a 94       	dec	r0
    2960:	e2 f7       	brpl	.-8      	; 0x295a <DIO_enuTogglePinValue+0xcc>
    2962:	84 27       	eor	r24, r20
    2964:	8c 93       	st	X, r24
    2966:	16 c0       	rjmp	.+44     	; 0x2994 <DIO_enuTogglePinValue+0x106>
			break;
		case DIO_u8GROUP_D:
			PORTD ^=(DIO_u8BIT_MASK<<Copy_u8PinID);
    2968:	a2 e3       	ldi	r26, 0x32	; 50
    296a:	b0 e0       	ldi	r27, 0x00	; 0
    296c:	e2 e3       	ldi	r30, 0x32	; 50
    296e:	f0 e0       	ldi	r31, 0x00	; 0
    2970:	80 81       	ld	r24, Z
    2972:	48 2f       	mov	r20, r24
    2974:	8b 81       	ldd	r24, Y+3	; 0x03
    2976:	28 2f       	mov	r18, r24
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	81 e0       	ldi	r24, 0x01	; 1
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	02 2e       	mov	r0, r18
    2980:	02 c0       	rjmp	.+4      	; 0x2986 <DIO_enuTogglePinValue+0xf8>
    2982:	88 0f       	add	r24, r24
    2984:	99 1f       	adc	r25, r25
    2986:	0a 94       	dec	r0
    2988:	e2 f7       	brpl	.-8      	; 0x2982 <DIO_enuTogglePinValue+0xf4>
    298a:	84 27       	eor	r24, r20
    298c:	8c 93       	st	X, r24
    298e:	02 c0       	rjmp	.+4      	; 0x2994 <DIO_enuTogglePinValue+0x106>
			break;

		}
	}
	else
		Local_enuErrorState=ES_OUT_OF_RANGE;
    2990:	82 e0       	ldi	r24, 0x02	; 2
    2992:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState;
    2994:	89 81       	ldd	r24, Y+1	; 0x01
}
    2996:	0f 90       	pop	r0
    2998:	0f 90       	pop	r0
    299a:	0f 90       	pop	r0
    299c:	0f 90       	pop	r0
    299e:	0f 90       	pop	r0
    29a0:	cf 91       	pop	r28
    29a2:	df 91       	pop	r29
    29a4:	08 95       	ret

000029a6 <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8GroupID, u8 Copy_u8PinID, u8 * Copy_pu8Value){
    29a6:	df 93       	push	r29
    29a8:	cf 93       	push	r28
    29aa:	cd b7       	in	r28, 0x3d	; 61
    29ac:	de b7       	in	r29, 0x3e	; 62
    29ae:	27 97       	sbiw	r28, 0x07	; 7
    29b0:	0f b6       	in	r0, 0x3f	; 63
    29b2:	f8 94       	cli
    29b4:	de bf       	out	0x3e, r29	; 62
    29b6:	0f be       	out	0x3f, r0	; 63
    29b8:	cd bf       	out	0x3d, r28	; 61
    29ba:	8a 83       	std	Y+2, r24	; 0x02
    29bc:	6b 83       	std	Y+3, r22	; 0x03
    29be:	5d 83       	std	Y+5, r21	; 0x05
    29c0:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState=ES_OK;
    29c2:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8GroupID<=DIO_u8GROUP_D&&Copy_u8PinID<=DIO_u8PIN7){
    29c4:	8a 81       	ldd	r24, Y+2	; 0x02
    29c6:	84 30       	cpi	r24, 0x04	; 4
    29c8:	08 f0       	brcs	.+2      	; 0x29cc <DIO_enuGetPinValue+0x26>
    29ca:	75 c0       	rjmp	.+234    	; 0x2ab6 <DIO_enuGetPinValue+0x110>
    29cc:	8b 81       	ldd	r24, Y+3	; 0x03
    29ce:	88 30       	cpi	r24, 0x08	; 8
    29d0:	08 f0       	brcs	.+2      	; 0x29d4 <DIO_enuGetPinValue+0x2e>
    29d2:	71 c0       	rjmp	.+226    	; 0x2ab6 <DIO_enuGetPinValue+0x110>
		switch (Copy_u8GroupID){
    29d4:	8a 81       	ldd	r24, Y+2	; 0x02
    29d6:	28 2f       	mov	r18, r24
    29d8:	30 e0       	ldi	r19, 0x00	; 0
    29da:	3f 83       	std	Y+7, r19	; 0x07
    29dc:	2e 83       	std	Y+6, r18	; 0x06
    29de:	4e 81       	ldd	r20, Y+6	; 0x06
    29e0:	5f 81       	ldd	r21, Y+7	; 0x07
    29e2:	41 30       	cpi	r20, 0x01	; 1
    29e4:	51 05       	cpc	r21, r1
    29e6:	59 f1       	breq	.+86     	; 0x2a3e <DIO_enuGetPinValue+0x98>
    29e8:	8e 81       	ldd	r24, Y+6	; 0x06
    29ea:	9f 81       	ldd	r25, Y+7	; 0x07
    29ec:	82 30       	cpi	r24, 0x02	; 2
    29ee:	91 05       	cpc	r25, r1
    29f0:	34 f4       	brge	.+12     	; 0x29fe <DIO_enuGetPinValue+0x58>
    29f2:	2e 81       	ldd	r18, Y+6	; 0x06
    29f4:	3f 81       	ldd	r19, Y+7	; 0x07
    29f6:	21 15       	cp	r18, r1
    29f8:	31 05       	cpc	r19, r1
    29fa:	69 f0       	breq	.+26     	; 0x2a16 <DIO_enuGetPinValue+0x70>
    29fc:	5e c0       	rjmp	.+188    	; 0x2aba <DIO_enuGetPinValue+0x114>
    29fe:	4e 81       	ldd	r20, Y+6	; 0x06
    2a00:	5f 81       	ldd	r21, Y+7	; 0x07
    2a02:	42 30       	cpi	r20, 0x02	; 2
    2a04:	51 05       	cpc	r21, r1
    2a06:	79 f1       	breq	.+94     	; 0x2a66 <DIO_enuGetPinValue+0xc0>
    2a08:	8e 81       	ldd	r24, Y+6	; 0x06
    2a0a:	9f 81       	ldd	r25, Y+7	; 0x07
    2a0c:	83 30       	cpi	r24, 0x03	; 3
    2a0e:	91 05       	cpc	r25, r1
    2a10:	09 f4       	brne	.+2      	; 0x2a14 <DIO_enuGetPinValue+0x6e>
    2a12:	3d c0       	rjmp	.+122    	; 0x2a8e <DIO_enuGetPinValue+0xe8>
    2a14:	52 c0       	rjmp	.+164    	; 0x2aba <DIO_enuGetPinValue+0x114>
		case DIO_u8GROUP_A:
			*Copy_pu8Value=(PINA>>Copy_u8PinID)&DIO_u8BIT_MASK;
    2a16:	e9 e3       	ldi	r30, 0x39	; 57
    2a18:	f0 e0       	ldi	r31, 0x00	; 0
    2a1a:	80 81       	ld	r24, Z
    2a1c:	28 2f       	mov	r18, r24
    2a1e:	30 e0       	ldi	r19, 0x00	; 0
    2a20:	8b 81       	ldd	r24, Y+3	; 0x03
    2a22:	88 2f       	mov	r24, r24
    2a24:	90 e0       	ldi	r25, 0x00	; 0
    2a26:	a9 01       	movw	r20, r18
    2a28:	02 c0       	rjmp	.+4      	; 0x2a2e <DIO_enuGetPinValue+0x88>
    2a2a:	55 95       	asr	r21
    2a2c:	47 95       	ror	r20
    2a2e:	8a 95       	dec	r24
    2a30:	e2 f7       	brpl	.-8      	; 0x2a2a <DIO_enuGetPinValue+0x84>
    2a32:	ca 01       	movw	r24, r20
    2a34:	81 70       	andi	r24, 0x01	; 1
    2a36:	ec 81       	ldd	r30, Y+4	; 0x04
    2a38:	fd 81       	ldd	r31, Y+5	; 0x05
    2a3a:	80 83       	st	Z, r24
    2a3c:	3e c0       	rjmp	.+124    	; 0x2aba <DIO_enuGetPinValue+0x114>
			break;
		case DIO_u8GROUP_B:
			*Copy_pu8Value=(PINB>>Copy_u8PinID)&DIO_u8BIT_MASK;
    2a3e:	e6 e3       	ldi	r30, 0x36	; 54
    2a40:	f0 e0       	ldi	r31, 0x00	; 0
    2a42:	80 81       	ld	r24, Z
    2a44:	28 2f       	mov	r18, r24
    2a46:	30 e0       	ldi	r19, 0x00	; 0
    2a48:	8b 81       	ldd	r24, Y+3	; 0x03
    2a4a:	88 2f       	mov	r24, r24
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	a9 01       	movw	r20, r18
    2a50:	02 c0       	rjmp	.+4      	; 0x2a56 <DIO_enuGetPinValue+0xb0>
    2a52:	55 95       	asr	r21
    2a54:	47 95       	ror	r20
    2a56:	8a 95       	dec	r24
    2a58:	e2 f7       	brpl	.-8      	; 0x2a52 <DIO_enuGetPinValue+0xac>
    2a5a:	ca 01       	movw	r24, r20
    2a5c:	81 70       	andi	r24, 0x01	; 1
    2a5e:	ec 81       	ldd	r30, Y+4	; 0x04
    2a60:	fd 81       	ldd	r31, Y+5	; 0x05
    2a62:	80 83       	st	Z, r24
    2a64:	2a c0       	rjmp	.+84     	; 0x2aba <DIO_enuGetPinValue+0x114>
			break;
		case DIO_u8GROUP_C:
			*Copy_pu8Value=(PINC>>Copy_u8PinID)&DIO_u8BIT_MASK;
    2a66:	e3 e3       	ldi	r30, 0x33	; 51
    2a68:	f0 e0       	ldi	r31, 0x00	; 0
    2a6a:	80 81       	ld	r24, Z
    2a6c:	28 2f       	mov	r18, r24
    2a6e:	30 e0       	ldi	r19, 0x00	; 0
    2a70:	8b 81       	ldd	r24, Y+3	; 0x03
    2a72:	88 2f       	mov	r24, r24
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	a9 01       	movw	r20, r18
    2a78:	02 c0       	rjmp	.+4      	; 0x2a7e <DIO_enuGetPinValue+0xd8>
    2a7a:	55 95       	asr	r21
    2a7c:	47 95       	ror	r20
    2a7e:	8a 95       	dec	r24
    2a80:	e2 f7       	brpl	.-8      	; 0x2a7a <DIO_enuGetPinValue+0xd4>
    2a82:	ca 01       	movw	r24, r20
    2a84:	81 70       	andi	r24, 0x01	; 1
    2a86:	ec 81       	ldd	r30, Y+4	; 0x04
    2a88:	fd 81       	ldd	r31, Y+5	; 0x05
    2a8a:	80 83       	st	Z, r24
    2a8c:	16 c0       	rjmp	.+44     	; 0x2aba <DIO_enuGetPinValue+0x114>
			break;
		case DIO_u8GROUP_D:
			*Copy_pu8Value=(PIND>>Copy_u8PinID)&DIO_u8BIT_MASK;
    2a8e:	e0 e3       	ldi	r30, 0x30	; 48
    2a90:	f0 e0       	ldi	r31, 0x00	; 0
    2a92:	80 81       	ld	r24, Z
    2a94:	28 2f       	mov	r18, r24
    2a96:	30 e0       	ldi	r19, 0x00	; 0
    2a98:	8b 81       	ldd	r24, Y+3	; 0x03
    2a9a:	88 2f       	mov	r24, r24
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	a9 01       	movw	r20, r18
    2aa0:	02 c0       	rjmp	.+4      	; 0x2aa6 <DIO_enuGetPinValue+0x100>
    2aa2:	55 95       	asr	r21
    2aa4:	47 95       	ror	r20
    2aa6:	8a 95       	dec	r24
    2aa8:	e2 f7       	brpl	.-8      	; 0x2aa2 <DIO_enuGetPinValue+0xfc>
    2aaa:	ca 01       	movw	r24, r20
    2aac:	81 70       	andi	r24, 0x01	; 1
    2aae:	ec 81       	ldd	r30, Y+4	; 0x04
    2ab0:	fd 81       	ldd	r31, Y+5	; 0x05
    2ab2:	80 83       	st	Z, r24
    2ab4:	02 c0       	rjmp	.+4      	; 0x2aba <DIO_enuGetPinValue+0x114>
			break;

		}
	}
	else
		Local_enuErrorState=ES_OUT_OF_RANGE;
    2ab6:	82 e0       	ldi	r24, 0x02	; 2
    2ab8:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState;
    2aba:	89 81       	ldd	r24, Y+1	; 0x01
}
    2abc:	27 96       	adiw	r28, 0x07	; 7
    2abe:	0f b6       	in	r0, 0x3f	; 63
    2ac0:	f8 94       	cli
    2ac2:	de bf       	out	0x3e, r29	; 62
    2ac4:	0f be       	out	0x3f, r0	; 63
    2ac6:	cd bf       	out	0x3d, r28	; 61
    2ac8:	cf 91       	pop	r28
    2aca:	df 91       	pop	r29
    2acc:	08 95       	ret

00002ace <ADC_enuInit>:

static void(*ADC_pFunISRFun)(void) =NULL;


ES_t ADC_enuInit(void)
{
    2ace:	df 93       	push	r29
    2ad0:	cf 93       	push	r28
    2ad2:	0f 92       	push	r0
    2ad4:	cd b7       	in	r28, 0x3d	; 61
    2ad6:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    2ad8:	81 e0       	ldi	r24, 0x01	; 1
    2ada:	89 83       	std	Y+1, r24	; 0x01

	ADCSRA &= 0xF8;
    2adc:	a6 e2       	ldi	r26, 0x26	; 38
    2ade:	b0 e0       	ldi	r27, 0x00	; 0
    2ae0:	e6 e2       	ldi	r30, 0x26	; 38
    2ae2:	f0 e0       	ldi	r31, 0x00	; 0
    2ae4:	80 81       	ld	r24, Z
    2ae6:	88 7f       	andi	r24, 0xF8	; 248
    2ae8:	8c 93       	st	X, r24
#if ADC_PRES == PRES_64
	ADCSRA |= 6;
    2aea:	a6 e2       	ldi	r26, 0x26	; 38
    2aec:	b0 e0       	ldi	r27, 0x00	; 0
    2aee:	e6 e2       	ldi	r30, 0x26	; 38
    2af0:	f0 e0       	ldi	r31, 0x00	; 0
    2af2:	80 81       	ld	r24, Z
    2af4:	86 60       	ori	r24, 0x06	; 6
    2af6:	8c 93       	st	X, r24
#endif

	ADMUX &= 0x3F;
    2af8:	a7 e2       	ldi	r26, 0x27	; 39
    2afa:	b0 e0       	ldi	r27, 0x00	; 0
    2afc:	e7 e2       	ldi	r30, 0x27	; 39
    2afe:	f0 e0       	ldi	r31, 0x00	; 0
    2b00:	80 81       	ld	r24, Z
    2b02:	8f 73       	andi	r24, 0x3F	; 63
    2b04:	8c 93       	st	X, r24
#if ADC_VREF == AVCC_REF
	ADMUX |= (1<<6);
    2b06:	a7 e2       	ldi	r26, 0x27	; 39
    2b08:	b0 e0       	ldi	r27, 0x00	; 0
    2b0a:	e7 e2       	ldi	r30, 0x27	; 39
    2b0c:	f0 e0       	ldi	r31, 0x00	; 0
    2b0e:	80 81       	ld	r24, Z
    2b10:	80 64       	ori	r24, 0x40	; 64
    2b12:	8c 93       	st	X, r24
#endif

#if ADC_ADJUST == LEFT_ADJUST
	ADMUX |= (1<<5);
    2b14:	a7 e2       	ldi	r26, 0x27	; 39
    2b16:	b0 e0       	ldi	r27, 0x00	; 0
    2b18:	e7 e2       	ldi	r30, 0x27	; 39
    2b1a:	f0 e0       	ldi	r31, 0x00	; 0
    2b1c:	80 81       	ld	r24, Z
    2b1e:	80 62       	ori	r24, 0x20	; 32
    2b20:	8c 93       	st	X, r24
#endif

#if INIT_CHNNL >=0 && INIT_CHNNL <=31
	ADMUX &= 0xE0;
    2b22:	a7 e2       	ldi	r26, 0x27	; 39
    2b24:	b0 e0       	ldi	r27, 0x00	; 0
    2b26:	e7 e2       	ldi	r30, 0x27	; 39
    2b28:	f0 e0       	ldi	r31, 0x00	; 0
    2b2a:	80 81       	ld	r24, Z
    2b2c:	80 7e       	andi	r24, 0xE0	; 224
    2b2e:	8c 93       	st	X, r24
	ADMUX |= INIT_CHNNL;
    2b30:	a7 e2       	ldi	r26, 0x27	; 39
    2b32:	b0 e0       	ldi	r27, 0x00	; 0
    2b34:	e7 e2       	ldi	r30, 0x27	; 39
    2b36:	f0 e0       	ldi	r31, 0x00	; 0
    2b38:	80 81       	ld	r24, Z
    2b3a:	8c 93       	st	X, r24
#endif

#if ADC_INTERRUPT_MODE == INTERRUPT
	ADCSRA |= (1<<3);
#elif ADC_INTERRUPT_MODE == POLLING
	ADCSRA &=~ (1<<3);
    2b3c:	a6 e2       	ldi	r26, 0x26	; 38
    2b3e:	b0 e0       	ldi	r27, 0x00	; 0
    2b40:	e6 e2       	ldi	r30, 0x26	; 38
    2b42:	f0 e0       	ldi	r31, 0x00	; 0
    2b44:	80 81       	ld	r24, Z
    2b46:	87 7f       	andi	r24, 0xF7	; 247
    2b48:	8c 93       	st	X, r24
#endif

#if ADC_TRIGGER_SOURCE == SINGLE
	ADCSRA &= ~(1<<5);
    2b4a:	a6 e2       	ldi	r26, 0x26	; 38
    2b4c:	b0 e0       	ldi	r27, 0x00	; 0
    2b4e:	e6 e2       	ldi	r30, 0x26	; 38
    2b50:	f0 e0       	ldi	r31, 0x00	; 0
    2b52:	80 81       	ld	r24, Z
    2b54:	8f 7d       	andi	r24, 0xDF	; 223
    2b56:	8c 93       	st	X, r24
#endif

	//enable ADC peripheral
	ADCSRA |= (1<<7);
    2b58:	a6 e2       	ldi	r26, 0x26	; 38
    2b5a:	b0 e0       	ldi	r27, 0x00	; 0
    2b5c:	e6 e2       	ldi	r30, 0x26	; 38
    2b5e:	f0 e0       	ldi	r31, 0x00	; 0
    2b60:	80 81       	ld	r24, Z
    2b62:	80 68       	ori	r24, 0x80	; 128
    2b64:	8c 93       	st	X, r24

	return Local_enuErrorState;
    2b66:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b68:	0f 90       	pop	r0
    2b6a:	cf 91       	pop	r28
    2b6c:	df 91       	pop	r29
    2b6e:	08 95       	ret

00002b70 <ADC_enuSelectChannel>:
ES_t ADC_enuSelectChannel(u8 Copy_u8ChannelID)
{
    2b70:	df 93       	push	r29
    2b72:	cf 93       	push	r28
    2b74:	00 d0       	rcall	.+0      	; 0x2b76 <ADC_enuSelectChannel+0x6>
    2b76:	cd b7       	in	r28, 0x3d	; 61
    2b78:	de b7       	in	r29, 0x3e	; 62
    2b7a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    2b7c:	81 e0       	ldi	r24, 0x01	; 1
    2b7e:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8ChannelID < 32 )
    2b80:	8a 81       	ldd	r24, Y+2	; 0x02
    2b82:	80 32       	cpi	r24, 0x20	; 32
    2b84:	78 f4       	brcc	.+30     	; 0x2ba4 <ADC_enuSelectChannel+0x34>
	{
		ADMUX &= 0xE0; // ADMUX &= ~ 0x1F; //ADMUX &= ~(31<<0) ;
    2b86:	a7 e2       	ldi	r26, 0x27	; 39
    2b88:	b0 e0       	ldi	r27, 0x00	; 0
    2b8a:	e7 e2       	ldi	r30, 0x27	; 39
    2b8c:	f0 e0       	ldi	r31, 0x00	; 0
    2b8e:	80 81       	ld	r24, Z
    2b90:	80 7e       	andi	r24, 0xE0	; 224
    2b92:	8c 93       	st	X, r24
		ADMUX |= Copy_u8ChannelID;
    2b94:	a7 e2       	ldi	r26, 0x27	; 39
    2b96:	b0 e0       	ldi	r27, 0x00	; 0
    2b98:	e7 e2       	ldi	r30, 0x27	; 39
    2b9a:	f0 e0       	ldi	r31, 0x00	; 0
    2b9c:	90 81       	ld	r25, Z
    2b9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba0:	89 2b       	or	r24, r25
    2ba2:	8c 93       	st	X, r24
	}

	return Local_enuErrorState;
    2ba4:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ba6:	0f 90       	pop	r0
    2ba8:	0f 90       	pop	r0
    2baa:	cf 91       	pop	r28
    2bac:	df 91       	pop	r29
    2bae:	08 95       	ret

00002bb0 <ADC_enuStartConversion>:
ES_t ADC_enuStartConversion(void)
{
    2bb0:	df 93       	push	r29
    2bb2:	cf 93       	push	r28
    2bb4:	0f 92       	push	r0
    2bb6:	cd b7       	in	r28, 0x3d	; 61
    2bb8:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    2bba:	81 e0       	ldi	r24, 0x01	; 1
    2bbc:	89 83       	std	Y+1, r24	; 0x01

	ADCSRA |= (1<<6);
    2bbe:	a6 e2       	ldi	r26, 0x26	; 38
    2bc0:	b0 e0       	ldi	r27, 0x00	; 0
    2bc2:	e6 e2       	ldi	r30, 0x26	; 38
    2bc4:	f0 e0       	ldi	r31, 0x00	; 0
    2bc6:	80 81       	ld	r24, Z
    2bc8:	80 64       	ori	r24, 0x40	; 64
    2bca:	8c 93       	st	X, r24

	return Local_enuErrorState;
    2bcc:	89 81       	ldd	r24, Y+1	; 0x01
}
    2bce:	0f 90       	pop	r0
    2bd0:	cf 91       	pop	r28
    2bd2:	df 91       	pop	r29
    2bd4:	08 95       	ret

00002bd6 <ADC_enuEnableAutoTrigger>:
ES_t ADC_enuEnableAutoTrigger(u8 Copy_u8TiggerSource)
{
    2bd6:	df 93       	push	r29
    2bd8:	cf 93       	push	r28
    2bda:	00 d0       	rcall	.+0      	; 0x2bdc <ADC_enuEnableAutoTrigger+0x6>
    2bdc:	cd b7       	in	r28, 0x3d	; 61
    2bde:	de b7       	in	r29, 0x3e	; 62
    2be0:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    2be2:	81 e0       	ldi	r24, 0x01	; 1
    2be4:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8TiggerSource <= 7)
    2be6:	8a 81       	ldd	r24, Y+2	; 0x02
    2be8:	88 30       	cpi	r24, 0x08	; 8
    2bea:	40 f5       	brcc	.+80     	; 0x2c3c <ADC_enuEnableAutoTrigger+0x66>
	{
		ADCSRA &=~(1<<5);
    2bec:	a6 e2       	ldi	r26, 0x26	; 38
    2bee:	b0 e0       	ldi	r27, 0x00	; 0
    2bf0:	e6 e2       	ldi	r30, 0x26	; 38
    2bf2:	f0 e0       	ldi	r31, 0x00	; 0
    2bf4:	80 81       	ld	r24, Z
    2bf6:	8f 7d       	andi	r24, 0xDF	; 223
    2bf8:	8c 93       	st	X, r24

		SFIOR &= 0x1F ; // SFIOR &= ~0xE0 ; SFIOR &= ~(7<<5) ;
    2bfa:	a0 e5       	ldi	r26, 0x50	; 80
    2bfc:	b0 e0       	ldi	r27, 0x00	; 0
    2bfe:	e0 e5       	ldi	r30, 0x50	; 80
    2c00:	f0 e0       	ldi	r31, 0x00	; 0
    2c02:	80 81       	ld	r24, Z
    2c04:	8f 71       	andi	r24, 0x1F	; 31
    2c06:	8c 93       	st	X, r24
		SFIOR |= (Copy_u8TiggerSource << 5);
    2c08:	a0 e5       	ldi	r26, 0x50	; 80
    2c0a:	b0 e0       	ldi	r27, 0x00	; 0
    2c0c:	e0 e5       	ldi	r30, 0x50	; 80
    2c0e:	f0 e0       	ldi	r31, 0x00	; 0
    2c10:	80 81       	ld	r24, Z
    2c12:	28 2f       	mov	r18, r24
    2c14:	8a 81       	ldd	r24, Y+2	; 0x02
    2c16:	88 2f       	mov	r24, r24
    2c18:	90 e0       	ldi	r25, 0x00	; 0
    2c1a:	88 0f       	add	r24, r24
    2c1c:	99 1f       	adc	r25, r25
    2c1e:	82 95       	swap	r24
    2c20:	92 95       	swap	r25
    2c22:	90 7f       	andi	r25, 0xF0	; 240
    2c24:	98 27       	eor	r25, r24
    2c26:	80 7f       	andi	r24, 0xF0	; 240
    2c28:	98 27       	eor	r25, r24
    2c2a:	82 2b       	or	r24, r18
    2c2c:	8c 93       	st	X, r24

		ADCSRA |= (1<<5);
    2c2e:	a6 e2       	ldi	r26, 0x26	; 38
    2c30:	b0 e0       	ldi	r27, 0x00	; 0
    2c32:	e6 e2       	ldi	r30, 0x26	; 38
    2c34:	f0 e0       	ldi	r31, 0x00	; 0
    2c36:	80 81       	ld	r24, Z
    2c38:	80 62       	ori	r24, 0x20	; 32
    2c3a:	8c 93       	st	X, r24
	}

	return Local_enuErrorState;
    2c3c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c3e:	0f 90       	pop	r0
    2c40:	0f 90       	pop	r0
    2c42:	cf 91       	pop	r28
    2c44:	df 91       	pop	r29
    2c46:	08 95       	ret

00002c48 <ADC_enuDisableAutoTrigger>:

ES_t ADC_enuDisableAutoTrigger(void)
{
    2c48:	df 93       	push	r29
    2c4a:	cf 93       	push	r28
    2c4c:	cd b7       	in	r28, 0x3d	; 61
    2c4e:	de b7       	in	r29, 0x3e	; 62
	ADCSRA &=~(1<<5);
    2c50:	a6 e2       	ldi	r26, 0x26	; 38
    2c52:	b0 e0       	ldi	r27, 0x00	; 0
    2c54:	e6 e2       	ldi	r30, 0x26	; 38
    2c56:	f0 e0       	ldi	r31, 0x00	; 0
    2c58:	80 81       	ld	r24, Z
    2c5a:	8f 7d       	andi	r24, 0xDF	; 223
    2c5c:	8c 93       	st	X, r24
	return ES_OK;
    2c5e:	80 e0       	ldi	r24, 0x00	; 0
}
    2c60:	cf 91       	pop	r28
    2c62:	df 91       	pop	r29
    2c64:	08 95       	ret

00002c66 <ADC_enuRead>:

ES_t ADC_enuRead(u16 * Copy_u16ADCValue)
{
    2c66:	df 93       	push	r29
    2c68:	cf 93       	push	r28
    2c6a:	00 d0       	rcall	.+0      	; 0x2c6c <ADC_enuRead+0x6>
    2c6c:	0f 92       	push	r0
    2c6e:	cd b7       	in	r28, 0x3d	; 61
    2c70:	de b7       	in	r29, 0x3e	; 62
    2c72:	9b 83       	std	Y+3, r25	; 0x03
    2c74:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    2c76:	81 e0       	ldi	r24, 0x01	; 1
    2c78:	89 83       	std	Y+1, r24	; 0x01

#if ADC_ADJUST == RIGHT_ADJUST
	*Copy_u16ADCValue  = ADCL;
	*Copy_u16ADCValue |= ((u16)ADCH << 8);
#elif ADC_ADJUST == LEFT_ADJUST
	*Copy_u16ADCValue  = (ADCL>>6);
    2c7a:	e4 e2       	ldi	r30, 0x24	; 36
    2c7c:	f0 e0       	ldi	r31, 0x00	; 0
    2c7e:	80 81       	ld	r24, Z
    2c80:	82 95       	swap	r24
    2c82:	86 95       	lsr	r24
    2c84:	86 95       	lsr	r24
    2c86:	83 70       	andi	r24, 0x03	; 3
    2c88:	88 2f       	mov	r24, r24
    2c8a:	90 e0       	ldi	r25, 0x00	; 0
    2c8c:	ea 81       	ldd	r30, Y+2	; 0x02
    2c8e:	fb 81       	ldd	r31, Y+3	; 0x03
    2c90:	91 83       	std	Z+1, r25	; 0x01
    2c92:	80 83       	st	Z, r24
	*Copy_u16ADCValue |= ((u16)ADCH<<2);
    2c94:	ea 81       	ldd	r30, Y+2	; 0x02
    2c96:	fb 81       	ldd	r31, Y+3	; 0x03
    2c98:	20 81       	ld	r18, Z
    2c9a:	31 81       	ldd	r19, Z+1	; 0x01
    2c9c:	e5 e2       	ldi	r30, 0x25	; 37
    2c9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ca0:	80 81       	ld	r24, Z
    2ca2:	88 2f       	mov	r24, r24
    2ca4:	90 e0       	ldi	r25, 0x00	; 0
    2ca6:	88 0f       	add	r24, r24
    2ca8:	99 1f       	adc	r25, r25
    2caa:	88 0f       	add	r24, r24
    2cac:	99 1f       	adc	r25, r25
    2cae:	82 2b       	or	r24, r18
    2cb0:	93 2b       	or	r25, r19
    2cb2:	ea 81       	ldd	r30, Y+2	; 0x02
    2cb4:	fb 81       	ldd	r31, Y+3	; 0x03
    2cb6:	91 83       	std	Z+1, r25	; 0x01
    2cb8:	80 83       	st	Z, r24

#else
#error"ADC adjustment is wrong"
#endif

	return Local_enuErrorState;
    2cba:	89 81       	ldd	r24, Y+1	; 0x01
}
    2cbc:	0f 90       	pop	r0
    2cbe:	0f 90       	pop	r0
    2cc0:	0f 90       	pop	r0
    2cc2:	cf 91       	pop	r28
    2cc4:	df 91       	pop	r29
    2cc6:	08 95       	ret

00002cc8 <ADC_enuReadHigh>:

ES_t ADC_enuReadHigh(u8 * Copy_u8ADCValue)
{
    2cc8:	df 93       	push	r29
    2cca:	cf 93       	push	r28
    2ccc:	00 d0       	rcall	.+0      	; 0x2cce <ADC_enuReadHigh+0x6>
    2cce:	0f 92       	push	r0
    2cd0:	cd b7       	in	r28, 0x3d	; 61
    2cd2:	de b7       	in	r29, 0x3e	; 62
    2cd4:	9b 83       	std	Y+3, r25	; 0x03
    2cd6:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    2cd8:	81 e0       	ldi	r24, 0x01	; 1
    2cda:	89 83       	std	Y+1, r24	; 0x01
#if ADC_ADJUST == RIGHT_ADJUST
	*Copy_u8ADCValue  = (ADCL>>2);
	*Copy_u8ADCValue |= ((u16)ADCH << 6);
#warning "to high resolution, it should be left adjust, but now it works"
#elif ADC_ADJUST == LEFT_ADJUST
	*Copy_u8ADCValue  = ADCH;
    2cdc:	e5 e2       	ldi	r30, 0x25	; 37
    2cde:	f0 e0       	ldi	r31, 0x00	; 0
    2ce0:	80 81       	ld	r24, Z
    2ce2:	ea 81       	ldd	r30, Y+2	; 0x02
    2ce4:	fb 81       	ldd	r31, Y+3	; 0x03
    2ce6:	80 83       	st	Z, r24
#else
#error"ADC adjustment is wrong"
#endif

	return Local_enuErrorState;
    2ce8:	89 81       	ldd	r24, Y+1	; 0x01
}
    2cea:	0f 90       	pop	r0
    2cec:	0f 90       	pop	r0
    2cee:	0f 90       	pop	r0
    2cf0:	cf 91       	pop	r28
    2cf2:	df 91       	pop	r29
    2cf4:	08 95       	ret

00002cf6 <ADC_enuPollingRead>:

ES_t ADC_enuPollingRead(u16 * Copy_u16ADCValue)
{
    2cf6:	df 93       	push	r29
    2cf8:	cf 93       	push	r28
    2cfa:	00 d0       	rcall	.+0      	; 0x2cfc <ADC_enuPollingRead+0x6>
    2cfc:	0f 92       	push	r0
    2cfe:	cd b7       	in	r28, 0x3d	; 61
    2d00:	de b7       	in	r29, 0x3e	; 62
    2d02:	9b 83       	std	Y+3, r25	; 0x03
    2d04:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    2d06:	81 e0       	ldi	r24, 0x01	; 1
    2d08:	89 83       	std	Y+1, r24	; 0x01

	while (! ((ADCSRA >> 4) & 1 ));
    2d0a:	e6 e2       	ldi	r30, 0x26	; 38
    2d0c:	f0 e0       	ldi	r31, 0x00	; 0
    2d0e:	80 81       	ld	r24, Z
    2d10:	82 95       	swap	r24
    2d12:	8f 70       	andi	r24, 0x0F	; 15
    2d14:	88 2f       	mov	r24, r24
    2d16:	90 e0       	ldi	r25, 0x00	; 0
    2d18:	81 70       	andi	r24, 0x01	; 1
    2d1a:	90 70       	andi	r25, 0x00	; 0
    2d1c:	00 97       	sbiw	r24, 0x00	; 0
    2d1e:	a9 f3       	breq	.-22     	; 0x2d0a <ADC_enuPollingRead+0x14>

#if ADC_ADJUST == RIGHT_ADJUST
	*Copy_u16ADCValue  = ADCL;
	*Copy_u16ADCValue |= ((u16)ADCH << 8);
#elif ADC_ADJUST == LEFT_ADJUST
	*Copy_u16ADCValue  = (ADCL>>6);
    2d20:	e4 e2       	ldi	r30, 0x24	; 36
    2d22:	f0 e0       	ldi	r31, 0x00	; 0
    2d24:	80 81       	ld	r24, Z
    2d26:	82 95       	swap	r24
    2d28:	86 95       	lsr	r24
    2d2a:	86 95       	lsr	r24
    2d2c:	83 70       	andi	r24, 0x03	; 3
    2d2e:	88 2f       	mov	r24, r24
    2d30:	90 e0       	ldi	r25, 0x00	; 0
    2d32:	ea 81       	ldd	r30, Y+2	; 0x02
    2d34:	fb 81       	ldd	r31, Y+3	; 0x03
    2d36:	91 83       	std	Z+1, r25	; 0x01
    2d38:	80 83       	st	Z, r24
	*Copy_u16ADCValue |= ((u16)ADCH<<2);
    2d3a:	ea 81       	ldd	r30, Y+2	; 0x02
    2d3c:	fb 81       	ldd	r31, Y+3	; 0x03
    2d3e:	20 81       	ld	r18, Z
    2d40:	31 81       	ldd	r19, Z+1	; 0x01
    2d42:	e5 e2       	ldi	r30, 0x25	; 37
    2d44:	f0 e0       	ldi	r31, 0x00	; 0
    2d46:	80 81       	ld	r24, Z
    2d48:	88 2f       	mov	r24, r24
    2d4a:	90 e0       	ldi	r25, 0x00	; 0
    2d4c:	88 0f       	add	r24, r24
    2d4e:	99 1f       	adc	r25, r25
    2d50:	88 0f       	add	r24, r24
    2d52:	99 1f       	adc	r25, r25
    2d54:	82 2b       	or	r24, r18
    2d56:	93 2b       	or	r25, r19
    2d58:	ea 81       	ldd	r30, Y+2	; 0x02
    2d5a:	fb 81       	ldd	r31, Y+3	; 0x03
    2d5c:	91 83       	std	Z+1, r25	; 0x01
    2d5e:	80 83       	st	Z, r24
//#warning "to read full resolution, it should be right adjust, but now it works"
#else
#error"ADC adjustment is wrong"
#endif

	ADCSRA |= (1<<4);
    2d60:	a6 e2       	ldi	r26, 0x26	; 38
    2d62:	b0 e0       	ldi	r27, 0x00	; 0
    2d64:	e6 e2       	ldi	r30, 0x26	; 38
    2d66:	f0 e0       	ldi	r31, 0x00	; 0
    2d68:	80 81       	ld	r24, Z
    2d6a:	80 61       	ori	r24, 0x10	; 16
    2d6c:	8c 93       	st	X, r24

	return Local_enuErrorState;
    2d6e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d70:	0f 90       	pop	r0
    2d72:	0f 90       	pop	r0
    2d74:	0f 90       	pop	r0
    2d76:	cf 91       	pop	r28
    2d78:	df 91       	pop	r29
    2d7a:	08 95       	ret

00002d7c <ADC_enuCallBack>:

ES_t ADC_enuCallBack(void (* Copy_pFunAppFun)(void))
{
    2d7c:	df 93       	push	r29
    2d7e:	cf 93       	push	r28
    2d80:	00 d0       	rcall	.+0      	; 0x2d82 <ADC_enuCallBack+0x6>
    2d82:	0f 92       	push	r0
    2d84:	cd b7       	in	r28, 0x3d	; 61
    2d86:	de b7       	in	r29, 0x3e	; 62
    2d88:	9b 83       	std	Y+3, r25	; 0x03
    2d8a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    2d8c:	81 e0       	ldi	r24, 0x01	; 1
    2d8e:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_pFunAppFun != NULL)
    2d90:	8a 81       	ldd	r24, Y+2	; 0x02
    2d92:	9b 81       	ldd	r25, Y+3	; 0x03
    2d94:	00 97       	sbiw	r24, 0x00	; 0
    2d96:	31 f0       	breq	.+12     	; 0x2da4 <ADC_enuCallBack+0x28>
	{
		ADC_pFunISRFun = Copy_pFunAppFun;
    2d98:	8a 81       	ldd	r24, Y+2	; 0x02
    2d9a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d9c:	90 93 32 08 	sts	0x0832, r25
    2da0:	80 93 31 08 	sts	0x0831, r24
	}

	return Local_enuErrorState;
    2da4:	89 81       	ldd	r24, Y+1	; 0x01
}
    2da6:	0f 90       	pop	r0
    2da8:	0f 90       	pop	r0
    2daa:	0f 90       	pop	r0
    2dac:	cf 91       	pop	r28
    2dae:	df 91       	pop	r29
    2db0:	08 95       	ret

00002db2 <ADC_enuEnable>:

ES_t ADC_enuEnable(void)
{
    2db2:	df 93       	push	r29
    2db4:	cf 93       	push	r28
    2db6:	0f 92       	push	r0
    2db8:	cd b7       	in	r28, 0x3d	; 61
    2dba:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    2dbc:	81 e0       	ldi	r24, 0x01	; 1
    2dbe:	89 83       	std	Y+1, r24	; 0x01



	return Local_enuErrorState;
    2dc0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2dc2:	0f 90       	pop	r0
    2dc4:	cf 91       	pop	r28
    2dc6:	df 91       	pop	r29
    2dc8:	08 95       	ret

00002dca <ADC_enuDisable>:

ES_t ADC_enuDisable(void)

{
    2dca:	df 93       	push	r29
    2dcc:	cf 93       	push	r28
    2dce:	0f 92       	push	r0
    2dd0:	cd b7       	in	r28, 0x3d	; 61
    2dd2:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    2dd4:	81 e0       	ldi	r24, 0x01	; 1
    2dd6:	89 83       	std	Y+1, r24	; 0x01



	return Local_enuErrorState;
    2dd8:	89 81       	ldd	r24, Y+1	; 0x01
}
    2dda:	0f 90       	pop	r0
    2ddc:	cf 91       	pop	r28
    2dde:	df 91       	pop	r29
    2de0:	08 95       	ret

00002de2 <ADC_enuEnableInterrupt>:

ES_t ADC_enuEnableInterrupt(void)
{
    2de2:	df 93       	push	r29
    2de4:	cf 93       	push	r28
    2de6:	0f 92       	push	r0
    2de8:	cd b7       	in	r28, 0x3d	; 61
    2dea:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    2dec:	81 e0       	ldi	r24, 0x01	; 1
    2dee:	89 83       	std	Y+1, r24	; 0x01

	ADCSRA |= (1<<3);
    2df0:	a6 e2       	ldi	r26, 0x26	; 38
    2df2:	b0 e0       	ldi	r27, 0x00	; 0
    2df4:	e6 e2       	ldi	r30, 0x26	; 38
    2df6:	f0 e0       	ldi	r31, 0x00	; 0
    2df8:	80 81       	ld	r24, Z
    2dfa:	88 60       	ori	r24, 0x08	; 8
    2dfc:	8c 93       	st	X, r24

	return Local_enuErrorState;
    2dfe:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e00:	0f 90       	pop	r0
    2e02:	cf 91       	pop	r28
    2e04:	df 91       	pop	r29
    2e06:	08 95       	ret

00002e08 <ADC_enuDisableInterrupt>:

ES_t ADC_enuDisableInterrupt(void)
{
    2e08:	df 93       	push	r29
    2e0a:	cf 93       	push	r28
    2e0c:	0f 92       	push	r0
    2e0e:	cd b7       	in	r28, 0x3d	; 61
    2e10:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    2e12:	81 e0       	ldi	r24, 0x01	; 1
    2e14:	89 83       	std	Y+1, r24	; 0x01



	return Local_enuErrorState;
    2e16:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e18:	0f 90       	pop	r0
    2e1a:	cf 91       	pop	r28
    2e1c:	df 91       	pop	r29
    2e1e:	08 95       	ret

00002e20 <__vector_16>:



void __vector_16(void)__attribute__((signal));
void __vector_16(void)
{
    2e20:	1f 92       	push	r1
    2e22:	0f 92       	push	r0
    2e24:	0f b6       	in	r0, 0x3f	; 63
    2e26:	0f 92       	push	r0
    2e28:	11 24       	eor	r1, r1
    2e2a:	2f 93       	push	r18
    2e2c:	3f 93       	push	r19
    2e2e:	4f 93       	push	r20
    2e30:	5f 93       	push	r21
    2e32:	6f 93       	push	r22
    2e34:	7f 93       	push	r23
    2e36:	8f 93       	push	r24
    2e38:	9f 93       	push	r25
    2e3a:	af 93       	push	r26
    2e3c:	bf 93       	push	r27
    2e3e:	ef 93       	push	r30
    2e40:	ff 93       	push	r31
    2e42:	df 93       	push	r29
    2e44:	cf 93       	push	r28
    2e46:	cd b7       	in	r28, 0x3d	; 61
    2e48:	de b7       	in	r29, 0x3e	; 62
	if (ADC_pFunISRFun != NULL)
    2e4a:	80 91 31 08 	lds	r24, 0x0831
    2e4e:	90 91 32 08 	lds	r25, 0x0832
    2e52:	00 97       	sbiw	r24, 0x00	; 0
    2e54:	29 f0       	breq	.+10     	; 0x2e60 <__vector_16+0x40>
	{
		ADC_pFunISRFun (  );
    2e56:	e0 91 31 08 	lds	r30, 0x0831
    2e5a:	f0 91 32 08 	lds	r31, 0x0832
    2e5e:	09 95       	icall
	}
}
    2e60:	cf 91       	pop	r28
    2e62:	df 91       	pop	r29
    2e64:	ff 91       	pop	r31
    2e66:	ef 91       	pop	r30
    2e68:	bf 91       	pop	r27
    2e6a:	af 91       	pop	r26
    2e6c:	9f 91       	pop	r25
    2e6e:	8f 91       	pop	r24
    2e70:	7f 91       	pop	r23
    2e72:	6f 91       	pop	r22
    2e74:	5f 91       	pop	r21
    2e76:	4f 91       	pop	r20
    2e78:	3f 91       	pop	r19
    2e7a:	2f 91       	pop	r18
    2e7c:	0f 90       	pop	r0
    2e7e:	0f be       	out	0x3f, r0	; 63
    2e80:	0f 90       	pop	r0
    2e82:	1f 90       	pop	r1
    2e84:	18 95       	reti

00002e86 <TEMP_SENSOR_enuInit>:
#include"TEMP_SENSOR_priv.h"
#include"TEMP_SENSOR_conf.h"
#include"../../MCAL/ADC/ADC_int.h"
u16 read;

ES_t TEMP_SENSOR_enuInit(void){
    2e86:	df 93       	push	r29
    2e88:	cf 93       	push	r28
    2e8a:	0f 92       	push	r0
    2e8c:	cd b7       	in	r28, 0x3d	; 61
    2e8e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_OK;
    2e90:	19 82       	std	Y+1, r1	; 0x01
	ADC_enuInit();
    2e92:	0e 94 67 15 	call	0x2ace	; 0x2ace <ADC_enuInit>
	ADC_enuStartConversion();
    2e96:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <ADC_enuStartConversion>
		ADC_enuPollingRead(&read);
    2e9a:	84 e3       	ldi	r24, 0x34	; 52
    2e9c:	98 e0       	ldi	r25, 0x08	; 8
    2e9e:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <ADC_enuPollingRead>
	return Local_enuErrorState;
    2ea2:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ea4:	0f 90       	pop	r0
    2ea6:	cf 91       	pop	r28
    2ea8:	df 91       	pop	r29
    2eaa:	08 95       	ret

00002eac <TEMP_SENSOR_enuRead>:
u16 TEMP_SENSOR_enuRead(void){
    2eac:	df 93       	push	r29
    2eae:	cf 93       	push	r28
    2eb0:	cd b7       	in	r28, 0x3d	; 61
    2eb2:	de b7       	in	r29, 0x3e	; 62
//	ES_t Local_enuErrorState=ES_OK;
//u16 Local_u16Read;

	ADC_enuStartConversion();
    2eb4:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <ADC_enuStartConversion>
	ADC_enuPollingRead(&read);
    2eb8:	84 e3       	ldi	r24, 0x34	; 52
    2eba:	98 e0       	ldi	r25, 0x08	; 8
    2ebc:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <ADC_enuPollingRead>
//	LCD_enuWritInteger(Local_u16Read);
	read=(read*500ul)/1024;
    2ec0:	80 91 34 08 	lds	r24, 0x0834
    2ec4:	90 91 35 08 	lds	r25, 0x0835
    2ec8:	cc 01       	movw	r24, r24
    2eca:	a0 e0       	ldi	r26, 0x00	; 0
    2ecc:	b0 e0       	ldi	r27, 0x00	; 0
    2ece:	24 ef       	ldi	r18, 0xF4	; 244
    2ed0:	31 e0       	ldi	r19, 0x01	; 1
    2ed2:	40 e0       	ldi	r20, 0x00	; 0
    2ed4:	50 e0       	ldi	r21, 0x00	; 0
    2ed6:	bc 01       	movw	r22, r24
    2ed8:	cd 01       	movw	r24, r26
    2eda:	0e 94 2f 3a 	call	0x745e	; 0x745e <__mulsi3>
    2ede:	dc 01       	movw	r26, r24
    2ee0:	cb 01       	movw	r24, r22
    2ee2:	07 2e       	mov	r0, r23
    2ee4:	7a e0       	ldi	r23, 0x0A	; 10
    2ee6:	b6 95       	lsr	r27
    2ee8:	a7 95       	ror	r26
    2eea:	97 95       	ror	r25
    2eec:	87 95       	ror	r24
    2eee:	7a 95       	dec	r23
    2ef0:	d1 f7       	brne	.-12     	; 0x2ee6 <TEMP_SENSOR_enuRead+0x3a>
    2ef2:	70 2d       	mov	r23, r0
    2ef4:	90 93 35 08 	sts	0x0835, r25
    2ef8:	80 93 34 08 	sts	0x0834, r24
	//*Copy_u16Temp=Local_u16Read;
	//return Local_enuErrorState;
    //LCD_enuWritInteger(Local_u16Read);
return read;
    2efc:	80 91 34 08 	lds	r24, 0x0834
    2f00:	90 91 35 08 	lds	r25, 0x0835

}
    2f04:	cf 91       	pop	r28
    2f06:	df 91       	pop	r29
    2f08:	08 95       	ret

00002f0a <SERVO_MOTOR_enuInit>:
#include"../../LIBRARY/errorState.h"
#include"../../LIBRARY/stdTypes.h"
#include"../../MCAL/TIMER1/TIMER1_int.h"
#include "SERVO_MOTOR_priv.h"
#include "SERVO_MOTOR_conf.h"
ES_t SERVO_MOTOR_enuInit(void){
    2f0a:	df 93       	push	r29
    2f0c:	cf 93       	push	r28
    2f0e:	cd b7       	in	r28, 0x3d	; 61
    2f10:	de b7       	in	r29, 0x3e	; 62
	Pwm1_enuInit();
    2f12:	0e 94 0e 08 	call	0x101c	; 0x101c <Pwm1_enuInit>
	Pwm1_enuSetFrequency(50);
    2f16:	82 e3       	ldi	r24, 0x32	; 50
    2f18:	90 e0       	ldi	r25, 0x00	; 0
    2f1a:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <Pwm1_enuSetFrequency>
	return ES_OK;
    2f1e:	80 e0       	ldi	r24, 0x00	; 0
}
    2f20:	cf 91       	pop	r28
    2f22:	df 91       	pop	r29
    2f24:	08 95       	ret

00002f26 <SERVO_MOTOR_enuSetPosition>:

ES_t SERVO_MOTOR_enuSetPosition(u8 Copy_u8Position){
    2f26:	df 93       	push	r29
    2f28:	cf 93       	push	r28
    2f2a:	00 d0       	rcall	.+0      	; 0x2f2c <SERVO_MOTOR_enuSetPosition+0x6>
    2f2c:	cd b7       	in	r28, 0x3d	; 61
    2f2e:	de b7       	in	r29, 0x3e	; 62
    2f30:	8a 83       	std	Y+2, r24	; 0x02
	ES_t local_enuErrorState=ES_OK;
    2f32:	19 82       	std	Y+1, r1	; 0x01



	 	Pwm1_enuSetDutyCycleChannel_2(Copy_u8Position);
    2f34:	8a 81       	ldd	r24, Y+2	; 0x02
    2f36:	88 2f       	mov	r24, r24
    2f38:	90 e0       	ldi	r25, 0x00	; 0
    2f3a:	0e 94 c0 08 	call	0x1180	; 0x1180 <Pwm1_enuSetDutyCycleChannel_2>


	 	Pwm1_enuStart();
    2f3e:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <Pwm1_enuStart>
        return local_enuErrorState;
    2f42:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f44:	0f 90       	pop	r0
    2f46:	0f 90       	pop	r0
    2f48:	cf 91       	pop	r28
    2f4a:	df 91       	pop	r29
    2f4c:	08 95       	ret

00002f4e <SERVO_MOTOR_enuTurnOff>:

ES_t SERVO_MOTOR_enuTurnOff(void){
    2f4e:	df 93       	push	r29
    2f50:	cf 93       	push	r28
    2f52:	cd b7       	in	r28, 0x3d	; 61
    2f54:	de b7       	in	r29, 0x3e	; 62
	Pwm1_enuStop();
    2f56:	0e 94 0a 09 	call	0x1214	; 0x1214 <Pwm1_enuStop>
	return ES_OK;
    2f5a:	80 e0       	ldi	r24, 0x00	; 0
}
    2f5c:	cf 91       	pop	r28
    2f5e:	df 91       	pop	r29
    2f60:	08 95       	ret

00002f62 <RELAY_enuInit>:
#include "../../LIBRARY/errorState.h"
#include"../../LIBRARY/stdTypes.h"
#include  "RELAY_priv.h"
#include "RELAY_conf.h"
#include "../../MCAL/DIO/DIO_int.h"
ES_t RELAY_enuInit(void){
    2f62:	df 93       	push	r29
    2f64:	cf 93       	push	r28
    2f66:	0f 92       	push	r0
    2f68:	cd b7       	in	r28, 0x3d	; 61
    2f6a:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_EnuErrorState=ES_OK;
    2f6c:	19 82       	std	Y+1, r1	; 0x01
	DIO_enuSetPinDirection(RELAY1_GROUP,RELAY1_PIN,DIO_u8OUTPUT);
    2f6e:	80 e0       	ldi	r24, 0x00	; 0
    2f70:	61 e0       	ldi	r22, 0x01	; 1
    2f72:	41 e0       	ldi	r20, 0x01	; 1
    2f74:	0e 94 77 12 	call	0x24ee	; 0x24ee <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RELAY2_GROUP,RELAY2_PIN,DIO_u8OUTPUT);
    2f78:	80 e0       	ldi	r24, 0x00	; 0
    2f7a:	62 e0       	ldi	r22, 0x02	; 2
    2f7c:	41 e0       	ldi	r20, 0x01	; 1
    2f7e:	0e 94 77 12 	call	0x24ee	; 0x24ee <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RELAY3_GROUP,RELAY3_PIN,DIO_u8OUTPUT);
    2f82:	80 e0       	ldi	r24, 0x00	; 0
    2f84:	63 e0       	ldi	r22, 0x03	; 3
    2f86:	41 e0       	ldi	r20, 0x01	; 1
    2f88:	0e 94 77 12 	call	0x24ee	; 0x24ee <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RELAY4_GROUP,RELAY4_PIN,DIO_u8OUTPUT);
    2f8c:	81 e0       	ldi	r24, 0x01	; 1
    2f8e:	60 e0       	ldi	r22, 0x00	; 0
    2f90:	41 e0       	ldi	r20, 0x01	; 1
    2f92:	0e 94 77 12 	call	0x24ee	; 0x24ee <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RELAY5_GROUP,RELAY5_PIN,DIO_u8OUTPUT);
    2f96:	82 e0       	ldi	r24, 0x02	; 2
    2f98:	66 e0       	ldi	r22, 0x06	; 6
    2f9a:	41 e0       	ldi	r20, 0x01	; 1
    2f9c:	0e 94 77 12 	call	0x24ee	; 0x24ee <DIO_enuSetPinDirection>


    DIO_enuSetPinValue(RELAY1_GROUP,RELAY1_PIN,DIO_u8LOW);
    2fa0:	80 e0       	ldi	r24, 0x00	; 0
    2fa2:	61 e0       	ldi	r22, 0x01	; 1
    2fa4:	40 e0       	ldi	r20, 0x00	; 0
    2fa6:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(RELAY2_GROUP,RELAY2_PIN,DIO_u8LOW);
    2faa:	80 e0       	ldi	r24, 0x00	; 0
    2fac:	62 e0       	ldi	r22, 0x02	; 2
    2fae:	40 e0       	ldi	r20, 0x00	; 0
    2fb0:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(RELAY3_GROUP,RELAY3_PIN,DIO_u8LOW);
    2fb4:	80 e0       	ldi	r24, 0x00	; 0
    2fb6:	63 e0       	ldi	r22, 0x03	; 3
    2fb8:	40 e0       	ldi	r20, 0x00	; 0
    2fba:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(RELAY4_GROUP,RELAY4_PIN,DIO_u8LOW);
    2fbe:	81 e0       	ldi	r24, 0x01	; 1
    2fc0:	60 e0       	ldi	r22, 0x00	; 0
    2fc2:	40 e0       	ldi	r20, 0x00	; 0
    2fc4:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(RELAY5_GROUP,RELAY5_PIN,DIO_u8LOW);
    2fc8:	82 e0       	ldi	r24, 0x02	; 2
    2fca:	66 e0       	ldi	r22, 0x06	; 6
    2fcc:	40 e0       	ldi	r20, 0x00	; 0
    2fce:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>

	return Local_EnuErrorState;
    2fd2:	89 81       	ldd	r24, Y+1	; 0x01
}
    2fd4:	0f 90       	pop	r0
    2fd6:	cf 91       	pop	r28
    2fd8:	df 91       	pop	r29
    2fda:	08 95       	ret

00002fdc <RELAY_enuON>:
ES_t RELAY_enuON(u8 Copy_u8NumLed){
    2fdc:	df 93       	push	r29
    2fde:	cf 93       	push	r28
    2fe0:	00 d0       	rcall	.+0      	; 0x2fe2 <RELAY_enuON+0x6>
    2fe2:	00 d0       	rcall	.+0      	; 0x2fe4 <RELAY_enuON+0x8>
    2fe4:	cd b7       	in	r28, 0x3d	; 61
    2fe6:	de b7       	in	r29, 0x3e	; 62
    2fe8:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_OK;
    2fea:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8NumLed){
    2fec:	8a 81       	ldd	r24, Y+2	; 0x02
    2fee:	28 2f       	mov	r18, r24
    2ff0:	30 e0       	ldi	r19, 0x00	; 0
    2ff2:	3c 83       	std	Y+4, r19	; 0x04
    2ff4:	2b 83       	std	Y+3, r18	; 0x03
    2ff6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ff8:	9c 81       	ldd	r25, Y+4	; 0x04
    2ffa:	83 30       	cpi	r24, 0x03	; 3
    2ffc:	91 05       	cpc	r25, r1
    2ffe:	39 f1       	breq	.+78     	; 0x304e <RELAY_enuON+0x72>
    3000:	2b 81       	ldd	r18, Y+3	; 0x03
    3002:	3c 81       	ldd	r19, Y+4	; 0x04
    3004:	24 30       	cpi	r18, 0x04	; 4
    3006:	31 05       	cpc	r19, r1
    3008:	5c f4       	brge	.+22     	; 0x3020 <RELAY_enuON+0x44>
    300a:	8b 81       	ldd	r24, Y+3	; 0x03
    300c:	9c 81       	ldd	r25, Y+4	; 0x04
    300e:	81 30       	cpi	r24, 0x01	; 1
    3010:	91 05       	cpc	r25, r1
    3012:	89 f0       	breq	.+34     	; 0x3036 <RELAY_enuON+0x5a>
    3014:	2b 81       	ldd	r18, Y+3	; 0x03
    3016:	3c 81       	ldd	r19, Y+4	; 0x04
    3018:	22 30       	cpi	r18, 0x02	; 2
    301a:	31 05       	cpc	r19, r1
    301c:	91 f0       	breq	.+36     	; 0x3042 <RELAY_enuON+0x66>
    301e:	29 c0       	rjmp	.+82     	; 0x3072 <RELAY_enuON+0x96>
    3020:	8b 81       	ldd	r24, Y+3	; 0x03
    3022:	9c 81       	ldd	r25, Y+4	; 0x04
    3024:	84 30       	cpi	r24, 0x04	; 4
    3026:	91 05       	cpc	r25, r1
    3028:	c1 f0       	breq	.+48     	; 0x305a <RELAY_enuON+0x7e>
    302a:	2b 81       	ldd	r18, Y+3	; 0x03
    302c:	3c 81       	ldd	r19, Y+4	; 0x04
    302e:	25 30       	cpi	r18, 0x05	; 5
    3030:	31 05       	cpc	r19, r1
    3032:	c9 f0       	breq	.+50     	; 0x3066 <RELAY_enuON+0x8a>
    3034:	1e c0       	rjmp	.+60     	; 0x3072 <RELAY_enuON+0x96>
	case LED_1:
		DIO_enuSetPinValue(RELAY1_GROUP,RELAY1_PIN,DIO_u8HIGH);
    3036:	80 e0       	ldi	r24, 0x00	; 0
    3038:	61 e0       	ldi	r22, 0x01	; 1
    303a:	41 e0       	ldi	r20, 0x01	; 1
    303c:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>
    3040:	1a c0       	rjmp	.+52     	; 0x3076 <RELAY_enuON+0x9a>
		break;
	case LED_2:
		DIO_enuSetPinValue(RELAY2_GROUP,RELAY2_PIN,DIO_u8HIGH);
    3042:	80 e0       	ldi	r24, 0x00	; 0
    3044:	62 e0       	ldi	r22, 0x02	; 2
    3046:	41 e0       	ldi	r20, 0x01	; 1
    3048:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>
    304c:	14 c0       	rjmp	.+40     	; 0x3076 <RELAY_enuON+0x9a>
		break;
	case LED_3:
			DIO_enuSetPinValue(RELAY3_GROUP,RELAY3_PIN,DIO_u8HIGH);
    304e:	80 e0       	ldi	r24, 0x00	; 0
    3050:	63 e0       	ldi	r22, 0x03	; 3
    3052:	41 e0       	ldi	r20, 0x01	; 1
    3054:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>
    3058:	0e c0       	rjmp	.+28     	; 0x3076 <RELAY_enuON+0x9a>
			break;
	case LED_4:
			DIO_enuSetPinValue(RELAY4_GROUP,RELAY4_PIN,DIO_u8HIGH);
    305a:	81 e0       	ldi	r24, 0x01	; 1
    305c:	60 e0       	ldi	r22, 0x00	; 0
    305e:	41 e0       	ldi	r20, 0x01	; 1
    3060:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>
    3064:	08 c0       	rjmp	.+16     	; 0x3076 <RELAY_enuON+0x9a>
			break;
	case LED_5:
			DIO_enuSetPinValue(RELAY5_GROUP,RELAY5_PIN,DIO_u8HIGH);
    3066:	82 e0       	ldi	r24, 0x02	; 2
    3068:	66 e0       	ldi	r22, 0x06	; 6
    306a:	41 e0       	ldi	r20, 0x01	; 1
    306c:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>
    3070:	02 c0       	rjmp	.+4      	; 0x3076 <RELAY_enuON+0x9a>
			break;
	default:
		Local_enuErrorState=ES_OUT_OF_RANGE;
    3072:	82 e0       	ldi	r24, 0x02	; 2
    3074:	89 83       	std	Y+1, r24	; 0x01




	}
	return Local_enuErrorState;
    3076:	89 81       	ldd	r24, Y+1	; 0x01
}
    3078:	0f 90       	pop	r0
    307a:	0f 90       	pop	r0
    307c:	0f 90       	pop	r0
    307e:	0f 90       	pop	r0
    3080:	cf 91       	pop	r28
    3082:	df 91       	pop	r29
    3084:	08 95       	ret

00003086 <RELAY_enuOF>:
ES_t RELAY_enuOF(u8 Copy_u8NumLed){
    3086:	df 93       	push	r29
    3088:	cf 93       	push	r28
    308a:	00 d0       	rcall	.+0      	; 0x308c <RELAY_enuOF+0x6>
    308c:	00 d0       	rcall	.+0      	; 0x308e <RELAY_enuOF+0x8>
    308e:	cd b7       	in	r28, 0x3d	; 61
    3090:	de b7       	in	r29, 0x3e	; 62
    3092:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_OK;
    3094:	19 82       	std	Y+1, r1	; 0x01
		switch(Copy_u8NumLed){
    3096:	8a 81       	ldd	r24, Y+2	; 0x02
    3098:	28 2f       	mov	r18, r24
    309a:	30 e0       	ldi	r19, 0x00	; 0
    309c:	3c 83       	std	Y+4, r19	; 0x04
    309e:	2b 83       	std	Y+3, r18	; 0x03
    30a0:	8b 81       	ldd	r24, Y+3	; 0x03
    30a2:	9c 81       	ldd	r25, Y+4	; 0x04
    30a4:	83 30       	cpi	r24, 0x03	; 3
    30a6:	91 05       	cpc	r25, r1
    30a8:	39 f1       	breq	.+78     	; 0x30f8 <RELAY_enuOF+0x72>
    30aa:	2b 81       	ldd	r18, Y+3	; 0x03
    30ac:	3c 81       	ldd	r19, Y+4	; 0x04
    30ae:	24 30       	cpi	r18, 0x04	; 4
    30b0:	31 05       	cpc	r19, r1
    30b2:	5c f4       	brge	.+22     	; 0x30ca <RELAY_enuOF+0x44>
    30b4:	8b 81       	ldd	r24, Y+3	; 0x03
    30b6:	9c 81       	ldd	r25, Y+4	; 0x04
    30b8:	81 30       	cpi	r24, 0x01	; 1
    30ba:	91 05       	cpc	r25, r1
    30bc:	89 f0       	breq	.+34     	; 0x30e0 <RELAY_enuOF+0x5a>
    30be:	2b 81       	ldd	r18, Y+3	; 0x03
    30c0:	3c 81       	ldd	r19, Y+4	; 0x04
    30c2:	22 30       	cpi	r18, 0x02	; 2
    30c4:	31 05       	cpc	r19, r1
    30c6:	91 f0       	breq	.+36     	; 0x30ec <RELAY_enuOF+0x66>
    30c8:	29 c0       	rjmp	.+82     	; 0x311c <RELAY_enuOF+0x96>
    30ca:	8b 81       	ldd	r24, Y+3	; 0x03
    30cc:	9c 81       	ldd	r25, Y+4	; 0x04
    30ce:	84 30       	cpi	r24, 0x04	; 4
    30d0:	91 05       	cpc	r25, r1
    30d2:	c1 f0       	breq	.+48     	; 0x3104 <RELAY_enuOF+0x7e>
    30d4:	2b 81       	ldd	r18, Y+3	; 0x03
    30d6:	3c 81       	ldd	r19, Y+4	; 0x04
    30d8:	25 30       	cpi	r18, 0x05	; 5
    30da:	31 05       	cpc	r19, r1
    30dc:	c9 f0       	breq	.+50     	; 0x3110 <RELAY_enuOF+0x8a>
    30de:	1e c0       	rjmp	.+60     	; 0x311c <RELAY_enuOF+0x96>
		case LED_1:
			DIO_enuSetPinValue(RELAY1_GROUP,RELAY1_PIN,DIO_u8LOW);
    30e0:	80 e0       	ldi	r24, 0x00	; 0
    30e2:	61 e0       	ldi	r22, 0x01	; 1
    30e4:	40 e0       	ldi	r20, 0x00	; 0
    30e6:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>
    30ea:	1a c0       	rjmp	.+52     	; 0x3120 <RELAY_enuOF+0x9a>
			break;
		case LED_2:
			DIO_enuSetPinValue(RELAY2_GROUP,RELAY2_PIN,DIO_u8LOW);
    30ec:	80 e0       	ldi	r24, 0x00	; 0
    30ee:	62 e0       	ldi	r22, 0x02	; 2
    30f0:	40 e0       	ldi	r20, 0x00	; 0
    30f2:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>
    30f6:	14 c0       	rjmp	.+40     	; 0x3120 <RELAY_enuOF+0x9a>
			break;
		case LED_3:
				DIO_enuSetPinValue(RELAY3_GROUP,RELAY3_PIN,DIO_u8LOW);
    30f8:	80 e0       	ldi	r24, 0x00	; 0
    30fa:	63 e0       	ldi	r22, 0x03	; 3
    30fc:	40 e0       	ldi	r20, 0x00	; 0
    30fe:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>
    3102:	0e c0       	rjmp	.+28     	; 0x3120 <RELAY_enuOF+0x9a>
				break;
		case LED_4:
				DIO_enuSetPinValue(RELAY4_GROUP,RELAY4_PIN,DIO_u8LOW);
    3104:	81 e0       	ldi	r24, 0x01	; 1
    3106:	60 e0       	ldi	r22, 0x00	; 0
    3108:	40 e0       	ldi	r20, 0x00	; 0
    310a:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>
    310e:	08 c0       	rjmp	.+16     	; 0x3120 <RELAY_enuOF+0x9a>
				break;
		case LED_5:
				DIO_enuSetPinValue(RELAY5_GROUP,RELAY5_PIN,DIO_u8LOW);
    3110:	82 e0       	ldi	r24, 0x02	; 2
    3112:	66 e0       	ldi	r22, 0x06	; 6
    3114:	40 e0       	ldi	r20, 0x00	; 0
    3116:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>
    311a:	02 c0       	rjmp	.+4      	; 0x3120 <RELAY_enuOF+0x9a>
				break;
		default:
			Local_enuErrorState=ES_OUT_OF_RANGE;
    311c:	82 e0       	ldi	r24, 0x02	; 2
    311e:	89 83       	std	Y+1, r24	; 0x01




		}
		return Local_enuErrorState;
    3120:	89 81       	ldd	r24, Y+1	; 0x01
}
    3122:	0f 90       	pop	r0
    3124:	0f 90       	pop	r0
    3126:	0f 90       	pop	r0
    3128:	0f 90       	pop	r0
    312a:	cf 91       	pop	r28
    312c:	df 91       	pop	r29
    312e:	08 95       	ret

00003130 <RELAY_enuToggle>:
ES_t RELAY_enuToggle(u8 Copy_u8NumLed){
    3130:	df 93       	push	r29
    3132:	cf 93       	push	r28
    3134:	00 d0       	rcall	.+0      	; 0x3136 <RELAY_enuToggle+0x6>
    3136:	00 d0       	rcall	.+0      	; 0x3138 <RELAY_enuToggle+0x8>
    3138:	cd b7       	in	r28, 0x3d	; 61
    313a:	de b7       	in	r29, 0x3e	; 62
    313c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_OK;
    313e:	19 82       	std	Y+1, r1	; 0x01
		switch(Copy_u8NumLed){
    3140:	8a 81       	ldd	r24, Y+2	; 0x02
    3142:	28 2f       	mov	r18, r24
    3144:	30 e0       	ldi	r19, 0x00	; 0
    3146:	3c 83       	std	Y+4, r19	; 0x04
    3148:	2b 83       	std	Y+3, r18	; 0x03
    314a:	8b 81       	ldd	r24, Y+3	; 0x03
    314c:	9c 81       	ldd	r25, Y+4	; 0x04
    314e:	83 30       	cpi	r24, 0x03	; 3
    3150:	91 05       	cpc	r25, r1
    3152:	29 f1       	breq	.+74     	; 0x319e <RELAY_enuToggle+0x6e>
    3154:	2b 81       	ldd	r18, Y+3	; 0x03
    3156:	3c 81       	ldd	r19, Y+4	; 0x04
    3158:	24 30       	cpi	r18, 0x04	; 4
    315a:	31 05       	cpc	r19, r1
    315c:	5c f4       	brge	.+22     	; 0x3174 <RELAY_enuToggle+0x44>
    315e:	8b 81       	ldd	r24, Y+3	; 0x03
    3160:	9c 81       	ldd	r25, Y+4	; 0x04
    3162:	81 30       	cpi	r24, 0x01	; 1
    3164:	91 05       	cpc	r25, r1
    3166:	89 f0       	breq	.+34     	; 0x318a <RELAY_enuToggle+0x5a>
    3168:	2b 81       	ldd	r18, Y+3	; 0x03
    316a:	3c 81       	ldd	r19, Y+4	; 0x04
    316c:	22 30       	cpi	r18, 0x02	; 2
    316e:	31 05       	cpc	r19, r1
    3170:	89 f0       	breq	.+34     	; 0x3194 <RELAY_enuToggle+0x64>
    3172:	24 c0       	rjmp	.+72     	; 0x31bc <RELAY_enuToggle+0x8c>
    3174:	8b 81       	ldd	r24, Y+3	; 0x03
    3176:	9c 81       	ldd	r25, Y+4	; 0x04
    3178:	84 30       	cpi	r24, 0x04	; 4
    317a:	91 05       	cpc	r25, r1
    317c:	a9 f0       	breq	.+42     	; 0x31a8 <RELAY_enuToggle+0x78>
    317e:	2b 81       	ldd	r18, Y+3	; 0x03
    3180:	3c 81       	ldd	r19, Y+4	; 0x04
    3182:	25 30       	cpi	r18, 0x05	; 5
    3184:	31 05       	cpc	r19, r1
    3186:	a9 f0       	breq	.+42     	; 0x31b2 <RELAY_enuToggle+0x82>
    3188:	19 c0       	rjmp	.+50     	; 0x31bc <RELAY_enuToggle+0x8c>
		case LED_1:
			DIO_enuTogglePinValue(RELAY1_GROUP,RELAY1_PIN);
    318a:	80 e0       	ldi	r24, 0x00	; 0
    318c:	61 e0       	ldi	r22, 0x01	; 1
    318e:	0e 94 47 14 	call	0x288e	; 0x288e <DIO_enuTogglePinValue>
    3192:	16 c0       	rjmp	.+44     	; 0x31c0 <RELAY_enuToggle+0x90>
			break;
		case LED_2:
			DIO_enuTogglePinValue(RELAY2_GROUP,RELAY2_PIN);
    3194:	80 e0       	ldi	r24, 0x00	; 0
    3196:	62 e0       	ldi	r22, 0x02	; 2
    3198:	0e 94 47 14 	call	0x288e	; 0x288e <DIO_enuTogglePinValue>
    319c:	11 c0       	rjmp	.+34     	; 0x31c0 <RELAY_enuToggle+0x90>
			break;
		case LED_3:
				DIO_enuTogglePinValue(RELAY3_GROUP,RELAY3_PIN);
    319e:	80 e0       	ldi	r24, 0x00	; 0
    31a0:	63 e0       	ldi	r22, 0x03	; 3
    31a2:	0e 94 47 14 	call	0x288e	; 0x288e <DIO_enuTogglePinValue>
    31a6:	0c c0       	rjmp	.+24     	; 0x31c0 <RELAY_enuToggle+0x90>
				break;
		case LED_4:
				DIO_enuTogglePinValue(RELAY4_GROUP,RELAY4_PIN);
    31a8:	81 e0       	ldi	r24, 0x01	; 1
    31aa:	60 e0       	ldi	r22, 0x00	; 0
    31ac:	0e 94 47 14 	call	0x288e	; 0x288e <DIO_enuTogglePinValue>
    31b0:	07 c0       	rjmp	.+14     	; 0x31c0 <RELAY_enuToggle+0x90>
				break;
		case LED_5:
				DIO_enuTogglePinValue(RELAY5_GROUP,RELAY5_PIN);
    31b2:	82 e0       	ldi	r24, 0x02	; 2
    31b4:	66 e0       	ldi	r22, 0x06	; 6
    31b6:	0e 94 47 14 	call	0x288e	; 0x288e <DIO_enuTogglePinValue>
    31ba:	02 c0       	rjmp	.+4      	; 0x31c0 <RELAY_enuToggle+0x90>
				break;
		default:
			Local_enuErrorState=ES_OUT_OF_RANGE;
    31bc:	82 e0       	ldi	r24, 0x02	; 2
    31be:	89 83       	std	Y+1, r24	; 0x01

		}
		return Local_enuErrorState;
    31c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    31c2:	0f 90       	pop	r0
    31c4:	0f 90       	pop	r0
    31c6:	0f 90       	pop	r0
    31c8:	0f 90       	pop	r0
    31ca:	cf 91       	pop	r28
    31cc:	df 91       	pop	r29
    31ce:	08 95       	ret

000031d0 <LCD_enuWriteNLatch>:
#include"../../LIBRARY/stdTypes.h"
#include"../../MCAL/DIO/DIO_int.h"
#include"LCD_priv.h"
#include"LCD_conf.h"
#include<util/delay.h>
ES_t LCD_enuWriteNLatch(u8 Copy_u8Byte){
    31d0:	df 93       	push	r29
    31d2:	cf 93       	push	r28
    31d4:	cd b7       	in	r28, 0x3d	; 61
    31d6:	de b7       	in	r29, 0x3e	; 62
    31d8:	ea 97       	sbiw	r28, 0x3a	; 58
    31da:	0f b6       	in	r0, 0x3f	; 63
    31dc:	f8 94       	cli
    31de:	de bf       	out	0x3e, r29	; 62
    31e0:	0f be       	out	0x3f, r0	; 63
    31e2:	cd bf       	out	0x3d, r28	; 61
    31e4:	8a af       	std	Y+58, r24	; 0x3a
	ES_t Local_enuErrorState=ES_OK;
    31e6:	19 ae       	std	Y+57, r1	; 0x39
	DIO_enuSetPinValue(LCD_u8RW_GROUP,LCD_u8RW_PIN,DIO_u8LOW);
    31e8:	81 e0       	ldi	r24, 0x01	; 1
    31ea:	62 e0       	ldi	r22, 0x02	; 2
    31ec:	40 e0       	ldi	r20, 0x00	; 0
    31ee:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(LCD_u8EN_GROUP,LCD_u8EN_PIN,DIO_u8LOW);
    31f2:	81 e0       	ldi	r24, 0x01	; 1
    31f4:	63 e0       	ldi	r22, 0x03	; 3
    31f6:	40 e0       	ldi	r20, 0x00	; 0
    31f8:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(LCD_u8D7_GROUP,LCD_u8D3_PIN,(Copy_u8Byte>>3)&DIO_u8BIT_MASK);
	DIO_enuSetPinValue(LCD_u8D7_GROUP,LCD_u8D2_PIN,(Copy_u8Byte>>2)&DIO_u8BIT_MASK);
	DIO_enuSetPinValue(LCD_u8D7_GROUP,LCD_u8D1_PIN,(Copy_u8Byte>>1)&DIO_u8BIT_MASK);
	DIO_enuSetPinValue(LCD_u8D7_GROUP,LCD_u8D0_PIN,(Copy_u8Byte>>0)&DIO_u8BIT_MASK);
#elif LCD_MODE==FOUR_BIT
	DIO_enuSetPinValue(LCD_u8D7_GROUP,LCD_u8D7_PIN,(Copy_u8Byte>>7)&DIO_u8BIT_MASK);
    31fc:	8a ad       	ldd	r24, Y+58	; 0x3a
    31fe:	98 2f       	mov	r25, r24
    3200:	99 1f       	adc	r25, r25
    3202:	99 27       	eor	r25, r25
    3204:	99 1f       	adc	r25, r25
    3206:	80 e0       	ldi	r24, 0x00	; 0
    3208:	67 e0       	ldi	r22, 0x07	; 7
    320a:	49 2f       	mov	r20, r25
    320c:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(LCD_u8D7_GROUP,LCD_u8D6_PIN,(Copy_u8Byte>>6)&DIO_u8BIT_MASK);
    3210:	8a ad       	ldd	r24, Y+58	; 0x3a
    3212:	82 95       	swap	r24
    3214:	86 95       	lsr	r24
    3216:	86 95       	lsr	r24
    3218:	83 70       	andi	r24, 0x03	; 3
    321a:	98 2f       	mov	r25, r24
    321c:	91 70       	andi	r25, 0x01	; 1
    321e:	80 e0       	ldi	r24, 0x00	; 0
    3220:	66 e0       	ldi	r22, 0x06	; 6
    3222:	49 2f       	mov	r20, r25
    3224:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(LCD_u8D7_GROUP,LCD_u8D5_PIN,(Copy_u8Byte>>5)&DIO_u8BIT_MASK);
    3228:	8a ad       	ldd	r24, Y+58	; 0x3a
    322a:	82 95       	swap	r24
    322c:	86 95       	lsr	r24
    322e:	87 70       	andi	r24, 0x07	; 7
    3230:	98 2f       	mov	r25, r24
    3232:	91 70       	andi	r25, 0x01	; 1
    3234:	80 e0       	ldi	r24, 0x00	; 0
    3236:	65 e0       	ldi	r22, 0x05	; 5
    3238:	49 2f       	mov	r20, r25
    323a:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(LCD_u8D7_GROUP,LCD_u8D4_PIN,(Copy_u8Byte>>4)&DIO_u8BIT_MASK);
    323e:	8a ad       	ldd	r24, Y+58	; 0x3a
    3240:	82 95       	swap	r24
    3242:	8f 70       	andi	r24, 0x0F	; 15
    3244:	98 2f       	mov	r25, r24
    3246:	91 70       	andi	r25, 0x01	; 1
    3248:	80 e0       	ldi	r24, 0x00	; 0
    324a:	64 e0       	ldi	r22, 0x04	; 4
    324c:	49 2f       	mov	r20, r25
    324e:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(LCD_u8EN_GROUP,LCD_u8EN_PIN,DIO_u8HIGH);
    3252:	81 e0       	ldi	r24, 0x01	; 1
    3254:	63 e0       	ldi	r22, 0x03	; 3
    3256:	41 e0       	ldi	r20, 0x01	; 1
    3258:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>
    325c:	80 e0       	ldi	r24, 0x00	; 0
    325e:	90 e0       	ldi	r25, 0x00	; 0
    3260:	a0 e8       	ldi	r26, 0x80	; 128
    3262:	bf e3       	ldi	r27, 0x3F	; 63
    3264:	8d ab       	std	Y+53, r24	; 0x35
    3266:	9e ab       	std	Y+54, r25	; 0x36
    3268:	af ab       	std	Y+55, r26	; 0x37
    326a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    326c:	6d a9       	ldd	r22, Y+53	; 0x35
    326e:	7e a9       	ldd	r23, Y+54	; 0x36
    3270:	8f a9       	ldd	r24, Y+55	; 0x37
    3272:	98 ad       	ldd	r25, Y+56	; 0x38
    3274:	20 e0       	ldi	r18, 0x00	; 0
    3276:	30 e0       	ldi	r19, 0x00	; 0
    3278:	4a e7       	ldi	r20, 0x7A	; 122
    327a:	55 e4       	ldi	r21, 0x45	; 69
    327c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3280:	dc 01       	movw	r26, r24
    3282:	cb 01       	movw	r24, r22
    3284:	89 ab       	std	Y+49, r24	; 0x31
    3286:	9a ab       	std	Y+50, r25	; 0x32
    3288:	ab ab       	std	Y+51, r26	; 0x33
    328a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    328c:	69 a9       	ldd	r22, Y+49	; 0x31
    328e:	7a a9       	ldd	r23, Y+50	; 0x32
    3290:	8b a9       	ldd	r24, Y+51	; 0x33
    3292:	9c a9       	ldd	r25, Y+52	; 0x34
    3294:	20 e0       	ldi	r18, 0x00	; 0
    3296:	30 e0       	ldi	r19, 0x00	; 0
    3298:	40 e8       	ldi	r20, 0x80	; 128
    329a:	5f e3       	ldi	r21, 0x3F	; 63
    329c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32a0:	88 23       	and	r24, r24
    32a2:	2c f4       	brge	.+10     	; 0x32ae <LCD_enuWriteNLatch+0xde>
		__ticks = 1;
    32a4:	81 e0       	ldi	r24, 0x01	; 1
    32a6:	90 e0       	ldi	r25, 0x00	; 0
    32a8:	98 ab       	std	Y+48, r25	; 0x30
    32aa:	8f a7       	std	Y+47, r24	; 0x2f
    32ac:	3f c0       	rjmp	.+126    	; 0x332c <LCD_enuWriteNLatch+0x15c>
	else if (__tmp > 65535)
    32ae:	69 a9       	ldd	r22, Y+49	; 0x31
    32b0:	7a a9       	ldd	r23, Y+50	; 0x32
    32b2:	8b a9       	ldd	r24, Y+51	; 0x33
    32b4:	9c a9       	ldd	r25, Y+52	; 0x34
    32b6:	20 e0       	ldi	r18, 0x00	; 0
    32b8:	3f ef       	ldi	r19, 0xFF	; 255
    32ba:	4f e7       	ldi	r20, 0x7F	; 127
    32bc:	57 e4       	ldi	r21, 0x47	; 71
    32be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32c2:	18 16       	cp	r1, r24
    32c4:	4c f5       	brge	.+82     	; 0x3318 <LCD_enuWriteNLatch+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32c6:	6d a9       	ldd	r22, Y+53	; 0x35
    32c8:	7e a9       	ldd	r23, Y+54	; 0x36
    32ca:	8f a9       	ldd	r24, Y+55	; 0x37
    32cc:	98 ad       	ldd	r25, Y+56	; 0x38
    32ce:	20 e0       	ldi	r18, 0x00	; 0
    32d0:	30 e0       	ldi	r19, 0x00	; 0
    32d2:	40 e2       	ldi	r20, 0x20	; 32
    32d4:	51 e4       	ldi	r21, 0x41	; 65
    32d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32da:	dc 01       	movw	r26, r24
    32dc:	cb 01       	movw	r24, r22
    32de:	bc 01       	movw	r22, r24
    32e0:	cd 01       	movw	r24, r26
    32e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32e6:	dc 01       	movw	r26, r24
    32e8:	cb 01       	movw	r24, r22
    32ea:	98 ab       	std	Y+48, r25	; 0x30
    32ec:	8f a7       	std	Y+47, r24	; 0x2f
    32ee:	0f c0       	rjmp	.+30     	; 0x330e <LCD_enuWriteNLatch+0x13e>
    32f0:	80 e9       	ldi	r24, 0x90	; 144
    32f2:	91 e0       	ldi	r25, 0x01	; 1
    32f4:	9e a7       	std	Y+46, r25	; 0x2e
    32f6:	8d a7       	std	Y+45, r24	; 0x2d
    32f8:	8d a5       	ldd	r24, Y+45	; 0x2d
    32fa:	9e a5       	ldd	r25, Y+46	; 0x2e
    32fc:	01 97       	sbiw	r24, 0x01	; 1
    32fe:	f1 f7       	brne	.-4      	; 0x32fc <LCD_enuWriteNLatch+0x12c>
    3300:	9e a7       	std	Y+46, r25	; 0x2e
    3302:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3304:	8f a5       	ldd	r24, Y+47	; 0x2f
    3306:	98 a9       	ldd	r25, Y+48	; 0x30
    3308:	01 97       	sbiw	r24, 0x01	; 1
    330a:	98 ab       	std	Y+48, r25	; 0x30
    330c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    330e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3310:	98 a9       	ldd	r25, Y+48	; 0x30
    3312:	00 97       	sbiw	r24, 0x00	; 0
    3314:	69 f7       	brne	.-38     	; 0x32f0 <LCD_enuWriteNLatch+0x120>
    3316:	14 c0       	rjmp	.+40     	; 0x3340 <LCD_enuWriteNLatch+0x170>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3318:	69 a9       	ldd	r22, Y+49	; 0x31
    331a:	7a a9       	ldd	r23, Y+50	; 0x32
    331c:	8b a9       	ldd	r24, Y+51	; 0x33
    331e:	9c a9       	ldd	r25, Y+52	; 0x34
    3320:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3324:	dc 01       	movw	r26, r24
    3326:	cb 01       	movw	r24, r22
    3328:	98 ab       	std	Y+48, r25	; 0x30
    332a:	8f a7       	std	Y+47, r24	; 0x2f
    332c:	8f a5       	ldd	r24, Y+47	; 0x2f
    332e:	98 a9       	ldd	r25, Y+48	; 0x30
    3330:	9c a7       	std	Y+44, r25	; 0x2c
    3332:	8b a7       	std	Y+43, r24	; 0x2b
    3334:	8b a5       	ldd	r24, Y+43	; 0x2b
    3336:	9c a5       	ldd	r25, Y+44	; 0x2c
    3338:	01 97       	sbiw	r24, 0x01	; 1
    333a:	f1 f7       	brne	.-4      	; 0x3338 <LCD_enuWriteNLatch+0x168>
    333c:	9c a7       	std	Y+44, r25	; 0x2c
    333e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_enuSetPinValue(LCD_u8EN_GROUP,LCD_u8EN_PIN,DIO_u8LOW);
    3340:	81 e0       	ldi	r24, 0x01	; 1
    3342:	63 e0       	ldi	r22, 0x03	; 3
    3344:	40 e0       	ldi	r20, 0x00	; 0
    3346:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>
    334a:	80 e0       	ldi	r24, 0x00	; 0
    334c:	90 e0       	ldi	r25, 0x00	; 0
    334e:	a0 e0       	ldi	r26, 0x00	; 0
    3350:	b0 e4       	ldi	r27, 0x40	; 64
    3352:	8f a3       	std	Y+39, r24	; 0x27
    3354:	98 a7       	std	Y+40, r25	; 0x28
    3356:	a9 a7       	std	Y+41, r26	; 0x29
    3358:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    335a:	6f a1       	ldd	r22, Y+39	; 0x27
    335c:	78 a5       	ldd	r23, Y+40	; 0x28
    335e:	89 a5       	ldd	r24, Y+41	; 0x29
    3360:	9a a5       	ldd	r25, Y+42	; 0x2a
    3362:	20 e0       	ldi	r18, 0x00	; 0
    3364:	30 e0       	ldi	r19, 0x00	; 0
    3366:	4a e7       	ldi	r20, 0x7A	; 122
    3368:	55 e4       	ldi	r21, 0x45	; 69
    336a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    336e:	dc 01       	movw	r26, r24
    3370:	cb 01       	movw	r24, r22
    3372:	8b a3       	std	Y+35, r24	; 0x23
    3374:	9c a3       	std	Y+36, r25	; 0x24
    3376:	ad a3       	std	Y+37, r26	; 0x25
    3378:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    337a:	6b a1       	ldd	r22, Y+35	; 0x23
    337c:	7c a1       	ldd	r23, Y+36	; 0x24
    337e:	8d a1       	ldd	r24, Y+37	; 0x25
    3380:	9e a1       	ldd	r25, Y+38	; 0x26
    3382:	20 e0       	ldi	r18, 0x00	; 0
    3384:	30 e0       	ldi	r19, 0x00	; 0
    3386:	40 e8       	ldi	r20, 0x80	; 128
    3388:	5f e3       	ldi	r21, 0x3F	; 63
    338a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    338e:	88 23       	and	r24, r24
    3390:	2c f4       	brge	.+10     	; 0x339c <LCD_enuWriteNLatch+0x1cc>
		__ticks = 1;
    3392:	81 e0       	ldi	r24, 0x01	; 1
    3394:	90 e0       	ldi	r25, 0x00	; 0
    3396:	9a a3       	std	Y+34, r25	; 0x22
    3398:	89 a3       	std	Y+33, r24	; 0x21
    339a:	3f c0       	rjmp	.+126    	; 0x341a <LCD_enuWriteNLatch+0x24a>
	else if (__tmp > 65535)
    339c:	6b a1       	ldd	r22, Y+35	; 0x23
    339e:	7c a1       	ldd	r23, Y+36	; 0x24
    33a0:	8d a1       	ldd	r24, Y+37	; 0x25
    33a2:	9e a1       	ldd	r25, Y+38	; 0x26
    33a4:	20 e0       	ldi	r18, 0x00	; 0
    33a6:	3f ef       	ldi	r19, 0xFF	; 255
    33a8:	4f e7       	ldi	r20, 0x7F	; 127
    33aa:	57 e4       	ldi	r21, 0x47	; 71
    33ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33b0:	18 16       	cp	r1, r24
    33b2:	4c f5       	brge	.+82     	; 0x3406 <LCD_enuWriteNLatch+0x236>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33b4:	6f a1       	ldd	r22, Y+39	; 0x27
    33b6:	78 a5       	ldd	r23, Y+40	; 0x28
    33b8:	89 a5       	ldd	r24, Y+41	; 0x29
    33ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    33bc:	20 e0       	ldi	r18, 0x00	; 0
    33be:	30 e0       	ldi	r19, 0x00	; 0
    33c0:	40 e2       	ldi	r20, 0x20	; 32
    33c2:	51 e4       	ldi	r21, 0x41	; 65
    33c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33c8:	dc 01       	movw	r26, r24
    33ca:	cb 01       	movw	r24, r22
    33cc:	bc 01       	movw	r22, r24
    33ce:	cd 01       	movw	r24, r26
    33d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33d4:	dc 01       	movw	r26, r24
    33d6:	cb 01       	movw	r24, r22
    33d8:	9a a3       	std	Y+34, r25	; 0x22
    33da:	89 a3       	std	Y+33, r24	; 0x21
    33dc:	0f c0       	rjmp	.+30     	; 0x33fc <LCD_enuWriteNLatch+0x22c>
    33de:	80 e9       	ldi	r24, 0x90	; 144
    33e0:	91 e0       	ldi	r25, 0x01	; 1
    33e2:	98 a3       	std	Y+32, r25	; 0x20
    33e4:	8f 8f       	std	Y+31, r24	; 0x1f
    33e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    33e8:	98 a1       	ldd	r25, Y+32	; 0x20
    33ea:	01 97       	sbiw	r24, 0x01	; 1
    33ec:	f1 f7       	brne	.-4      	; 0x33ea <LCD_enuWriteNLatch+0x21a>
    33ee:	98 a3       	std	Y+32, r25	; 0x20
    33f0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33f2:	89 a1       	ldd	r24, Y+33	; 0x21
    33f4:	9a a1       	ldd	r25, Y+34	; 0x22
    33f6:	01 97       	sbiw	r24, 0x01	; 1
    33f8:	9a a3       	std	Y+34, r25	; 0x22
    33fa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33fc:	89 a1       	ldd	r24, Y+33	; 0x21
    33fe:	9a a1       	ldd	r25, Y+34	; 0x22
    3400:	00 97       	sbiw	r24, 0x00	; 0
    3402:	69 f7       	brne	.-38     	; 0x33de <LCD_enuWriteNLatch+0x20e>
    3404:	14 c0       	rjmp	.+40     	; 0x342e <LCD_enuWriteNLatch+0x25e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3406:	6b a1       	ldd	r22, Y+35	; 0x23
    3408:	7c a1       	ldd	r23, Y+36	; 0x24
    340a:	8d a1       	ldd	r24, Y+37	; 0x25
    340c:	9e a1       	ldd	r25, Y+38	; 0x26
    340e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3412:	dc 01       	movw	r26, r24
    3414:	cb 01       	movw	r24, r22
    3416:	9a a3       	std	Y+34, r25	; 0x22
    3418:	89 a3       	std	Y+33, r24	; 0x21
    341a:	89 a1       	ldd	r24, Y+33	; 0x21
    341c:	9a a1       	ldd	r25, Y+34	; 0x22
    341e:	9e 8f       	std	Y+30, r25	; 0x1e
    3420:	8d 8f       	std	Y+29, r24	; 0x1d
    3422:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3424:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3426:	01 97       	sbiw	r24, 0x01	; 1
    3428:	f1 f7       	brne	.-4      	; 0x3426 <LCD_enuWriteNLatch+0x256>
    342a:	9e 8f       	std	Y+30, r25	; 0x1e
    342c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	DIO_enuSetPinValue(LCD_u8D7_GROUP,LCD_u8D7_PIN,((Copy_u8Byte>>3)&1));
    342e:	8a ad       	ldd	r24, Y+58	; 0x3a
    3430:	86 95       	lsr	r24
    3432:	86 95       	lsr	r24
    3434:	86 95       	lsr	r24
    3436:	98 2f       	mov	r25, r24
    3438:	91 70       	andi	r25, 0x01	; 1
    343a:	80 e0       	ldi	r24, 0x00	; 0
    343c:	67 e0       	ldi	r22, 0x07	; 7
    343e:	49 2f       	mov	r20, r25
    3440:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(LCD_u8D6_GROUP,LCD_u8D6_PIN,((Copy_u8Byte>>2)&1));
    3444:	8a ad       	ldd	r24, Y+58	; 0x3a
    3446:	86 95       	lsr	r24
    3448:	86 95       	lsr	r24
    344a:	98 2f       	mov	r25, r24
    344c:	91 70       	andi	r25, 0x01	; 1
    344e:	80 e0       	ldi	r24, 0x00	; 0
    3450:	66 e0       	ldi	r22, 0x06	; 6
    3452:	49 2f       	mov	r20, r25
    3454:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(LCD_u8D5_GROUP,LCD_u8D5_PIN,((Copy_u8Byte>>1)&1));
    3458:	8a ad       	ldd	r24, Y+58	; 0x3a
    345a:	86 95       	lsr	r24
    345c:	98 2f       	mov	r25, r24
    345e:	91 70       	andi	r25, 0x01	; 1
    3460:	80 e0       	ldi	r24, 0x00	; 0
    3462:	65 e0       	ldi	r22, 0x05	; 5
    3464:	49 2f       	mov	r20, r25
    3466:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(LCD_u8D4_GROUP,LCD_u8D4_PIN,((Copy_u8Byte>>0)&1));
    346a:	8a ad       	ldd	r24, Y+58	; 0x3a
    346c:	98 2f       	mov	r25, r24
    346e:	91 70       	andi	r25, 0x01	; 1
    3470:	80 e0       	ldi	r24, 0x00	; 0
    3472:	64 e0       	ldi	r22, 0x04	; 4
    3474:	49 2f       	mov	r20, r25
    3476:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(LCD_u8EN_GROUP,LCD_u8EN_PIN,DIO_u8HIGH);
    347a:	81 e0       	ldi	r24, 0x01	; 1
    347c:	63 e0       	ldi	r22, 0x03	; 3
    347e:	41 e0       	ldi	r20, 0x01	; 1
    3480:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>
    3484:	80 e0       	ldi	r24, 0x00	; 0
    3486:	90 e0       	ldi	r25, 0x00	; 0
    3488:	a0 e8       	ldi	r26, 0x80	; 128
    348a:	bf e3       	ldi	r27, 0x3F	; 63
    348c:	89 8f       	std	Y+25, r24	; 0x19
    348e:	9a 8f       	std	Y+26, r25	; 0x1a
    3490:	ab 8f       	std	Y+27, r26	; 0x1b
    3492:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3494:	69 8d       	ldd	r22, Y+25	; 0x19
    3496:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3498:	8b 8d       	ldd	r24, Y+27	; 0x1b
    349a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    349c:	20 e0       	ldi	r18, 0x00	; 0
    349e:	30 e0       	ldi	r19, 0x00	; 0
    34a0:	4a e7       	ldi	r20, 0x7A	; 122
    34a2:	55 e4       	ldi	r21, 0x45	; 69
    34a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34a8:	dc 01       	movw	r26, r24
    34aa:	cb 01       	movw	r24, r22
    34ac:	8d 8b       	std	Y+21, r24	; 0x15
    34ae:	9e 8b       	std	Y+22, r25	; 0x16
    34b0:	af 8b       	std	Y+23, r26	; 0x17
    34b2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    34b4:	6d 89       	ldd	r22, Y+21	; 0x15
    34b6:	7e 89       	ldd	r23, Y+22	; 0x16
    34b8:	8f 89       	ldd	r24, Y+23	; 0x17
    34ba:	98 8d       	ldd	r25, Y+24	; 0x18
    34bc:	20 e0       	ldi	r18, 0x00	; 0
    34be:	30 e0       	ldi	r19, 0x00	; 0
    34c0:	40 e8       	ldi	r20, 0x80	; 128
    34c2:	5f e3       	ldi	r21, 0x3F	; 63
    34c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34c8:	88 23       	and	r24, r24
    34ca:	2c f4       	brge	.+10     	; 0x34d6 <LCD_enuWriteNLatch+0x306>
		__ticks = 1;
    34cc:	81 e0       	ldi	r24, 0x01	; 1
    34ce:	90 e0       	ldi	r25, 0x00	; 0
    34d0:	9c 8b       	std	Y+20, r25	; 0x14
    34d2:	8b 8b       	std	Y+19, r24	; 0x13
    34d4:	3f c0       	rjmp	.+126    	; 0x3554 <LCD_enuWriteNLatch+0x384>
	else if (__tmp > 65535)
    34d6:	6d 89       	ldd	r22, Y+21	; 0x15
    34d8:	7e 89       	ldd	r23, Y+22	; 0x16
    34da:	8f 89       	ldd	r24, Y+23	; 0x17
    34dc:	98 8d       	ldd	r25, Y+24	; 0x18
    34de:	20 e0       	ldi	r18, 0x00	; 0
    34e0:	3f ef       	ldi	r19, 0xFF	; 255
    34e2:	4f e7       	ldi	r20, 0x7F	; 127
    34e4:	57 e4       	ldi	r21, 0x47	; 71
    34e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34ea:	18 16       	cp	r1, r24
    34ec:	4c f5       	brge	.+82     	; 0x3540 <LCD_enuWriteNLatch+0x370>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34ee:	69 8d       	ldd	r22, Y+25	; 0x19
    34f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34f6:	20 e0       	ldi	r18, 0x00	; 0
    34f8:	30 e0       	ldi	r19, 0x00	; 0
    34fa:	40 e2       	ldi	r20, 0x20	; 32
    34fc:	51 e4       	ldi	r21, 0x41	; 65
    34fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3502:	dc 01       	movw	r26, r24
    3504:	cb 01       	movw	r24, r22
    3506:	bc 01       	movw	r22, r24
    3508:	cd 01       	movw	r24, r26
    350a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    350e:	dc 01       	movw	r26, r24
    3510:	cb 01       	movw	r24, r22
    3512:	9c 8b       	std	Y+20, r25	; 0x14
    3514:	8b 8b       	std	Y+19, r24	; 0x13
    3516:	0f c0       	rjmp	.+30     	; 0x3536 <LCD_enuWriteNLatch+0x366>
    3518:	80 e9       	ldi	r24, 0x90	; 144
    351a:	91 e0       	ldi	r25, 0x01	; 1
    351c:	9a 8b       	std	Y+18, r25	; 0x12
    351e:	89 8b       	std	Y+17, r24	; 0x11
    3520:	89 89       	ldd	r24, Y+17	; 0x11
    3522:	9a 89       	ldd	r25, Y+18	; 0x12
    3524:	01 97       	sbiw	r24, 0x01	; 1
    3526:	f1 f7       	brne	.-4      	; 0x3524 <LCD_enuWriteNLatch+0x354>
    3528:	9a 8b       	std	Y+18, r25	; 0x12
    352a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    352c:	8b 89       	ldd	r24, Y+19	; 0x13
    352e:	9c 89       	ldd	r25, Y+20	; 0x14
    3530:	01 97       	sbiw	r24, 0x01	; 1
    3532:	9c 8b       	std	Y+20, r25	; 0x14
    3534:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3536:	8b 89       	ldd	r24, Y+19	; 0x13
    3538:	9c 89       	ldd	r25, Y+20	; 0x14
    353a:	00 97       	sbiw	r24, 0x00	; 0
    353c:	69 f7       	brne	.-38     	; 0x3518 <LCD_enuWriteNLatch+0x348>
    353e:	14 c0       	rjmp	.+40     	; 0x3568 <LCD_enuWriteNLatch+0x398>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3540:	6d 89       	ldd	r22, Y+21	; 0x15
    3542:	7e 89       	ldd	r23, Y+22	; 0x16
    3544:	8f 89       	ldd	r24, Y+23	; 0x17
    3546:	98 8d       	ldd	r25, Y+24	; 0x18
    3548:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    354c:	dc 01       	movw	r26, r24
    354e:	cb 01       	movw	r24, r22
    3550:	9c 8b       	std	Y+20, r25	; 0x14
    3552:	8b 8b       	std	Y+19, r24	; 0x13
    3554:	8b 89       	ldd	r24, Y+19	; 0x13
    3556:	9c 89       	ldd	r25, Y+20	; 0x14
    3558:	98 8b       	std	Y+16, r25	; 0x10
    355a:	8f 87       	std	Y+15, r24	; 0x0f
    355c:	8f 85       	ldd	r24, Y+15	; 0x0f
    355e:	98 89       	ldd	r25, Y+16	; 0x10
    3560:	01 97       	sbiw	r24, 0x01	; 1
    3562:	f1 f7       	brne	.-4      	; 0x3560 <LCD_enuWriteNLatch+0x390>
    3564:	98 8b       	std	Y+16, r25	; 0x10
    3566:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_enuSetPinValue(LCD_u8EN_GROUP,LCD_u8EN_PIN,DIO_u8LOW);
    3568:	81 e0       	ldi	r24, 0x01	; 1
    356a:	63 e0       	ldi	r22, 0x03	; 3
    356c:	40 e0       	ldi	r20, 0x00	; 0
    356e:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>
    3572:	80 e0       	ldi	r24, 0x00	; 0
    3574:	90 e0       	ldi	r25, 0x00	; 0
    3576:	a0 e0       	ldi	r26, 0x00	; 0
    3578:	b0 e4       	ldi	r27, 0x40	; 64
    357a:	8b 87       	std	Y+11, r24	; 0x0b
    357c:	9c 87       	std	Y+12, r25	; 0x0c
    357e:	ad 87       	std	Y+13, r26	; 0x0d
    3580:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3582:	6b 85       	ldd	r22, Y+11	; 0x0b
    3584:	7c 85       	ldd	r23, Y+12	; 0x0c
    3586:	8d 85       	ldd	r24, Y+13	; 0x0d
    3588:	9e 85       	ldd	r25, Y+14	; 0x0e
    358a:	20 e0       	ldi	r18, 0x00	; 0
    358c:	30 e0       	ldi	r19, 0x00	; 0
    358e:	4a e7       	ldi	r20, 0x7A	; 122
    3590:	55 e4       	ldi	r21, 0x45	; 69
    3592:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3596:	dc 01       	movw	r26, r24
    3598:	cb 01       	movw	r24, r22
    359a:	8f 83       	std	Y+7, r24	; 0x07
    359c:	98 87       	std	Y+8, r25	; 0x08
    359e:	a9 87       	std	Y+9, r26	; 0x09
    35a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35a2:	6f 81       	ldd	r22, Y+7	; 0x07
    35a4:	78 85       	ldd	r23, Y+8	; 0x08
    35a6:	89 85       	ldd	r24, Y+9	; 0x09
    35a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    35aa:	20 e0       	ldi	r18, 0x00	; 0
    35ac:	30 e0       	ldi	r19, 0x00	; 0
    35ae:	40 e8       	ldi	r20, 0x80	; 128
    35b0:	5f e3       	ldi	r21, 0x3F	; 63
    35b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35b6:	88 23       	and	r24, r24
    35b8:	2c f4       	brge	.+10     	; 0x35c4 <LCD_enuWriteNLatch+0x3f4>
		__ticks = 1;
    35ba:	81 e0       	ldi	r24, 0x01	; 1
    35bc:	90 e0       	ldi	r25, 0x00	; 0
    35be:	9e 83       	std	Y+6, r25	; 0x06
    35c0:	8d 83       	std	Y+5, r24	; 0x05
    35c2:	3f c0       	rjmp	.+126    	; 0x3642 <LCD_enuWriteNLatch+0x472>
	else if (__tmp > 65535)
    35c4:	6f 81       	ldd	r22, Y+7	; 0x07
    35c6:	78 85       	ldd	r23, Y+8	; 0x08
    35c8:	89 85       	ldd	r24, Y+9	; 0x09
    35ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    35cc:	20 e0       	ldi	r18, 0x00	; 0
    35ce:	3f ef       	ldi	r19, 0xFF	; 255
    35d0:	4f e7       	ldi	r20, 0x7F	; 127
    35d2:	57 e4       	ldi	r21, 0x47	; 71
    35d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35d8:	18 16       	cp	r1, r24
    35da:	4c f5       	brge	.+82     	; 0x362e <LCD_enuWriteNLatch+0x45e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    35de:	7c 85       	ldd	r23, Y+12	; 0x0c
    35e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    35e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    35e4:	20 e0       	ldi	r18, 0x00	; 0
    35e6:	30 e0       	ldi	r19, 0x00	; 0
    35e8:	40 e2       	ldi	r20, 0x20	; 32
    35ea:	51 e4       	ldi	r21, 0x41	; 65
    35ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35f0:	dc 01       	movw	r26, r24
    35f2:	cb 01       	movw	r24, r22
    35f4:	bc 01       	movw	r22, r24
    35f6:	cd 01       	movw	r24, r26
    35f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35fc:	dc 01       	movw	r26, r24
    35fe:	cb 01       	movw	r24, r22
    3600:	9e 83       	std	Y+6, r25	; 0x06
    3602:	8d 83       	std	Y+5, r24	; 0x05
    3604:	0f c0       	rjmp	.+30     	; 0x3624 <LCD_enuWriteNLatch+0x454>
    3606:	80 e9       	ldi	r24, 0x90	; 144
    3608:	91 e0       	ldi	r25, 0x01	; 1
    360a:	9c 83       	std	Y+4, r25	; 0x04
    360c:	8b 83       	std	Y+3, r24	; 0x03
    360e:	8b 81       	ldd	r24, Y+3	; 0x03
    3610:	9c 81       	ldd	r25, Y+4	; 0x04
    3612:	01 97       	sbiw	r24, 0x01	; 1
    3614:	f1 f7       	brne	.-4      	; 0x3612 <LCD_enuWriteNLatch+0x442>
    3616:	9c 83       	std	Y+4, r25	; 0x04
    3618:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    361a:	8d 81       	ldd	r24, Y+5	; 0x05
    361c:	9e 81       	ldd	r25, Y+6	; 0x06
    361e:	01 97       	sbiw	r24, 0x01	; 1
    3620:	9e 83       	std	Y+6, r25	; 0x06
    3622:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3624:	8d 81       	ldd	r24, Y+5	; 0x05
    3626:	9e 81       	ldd	r25, Y+6	; 0x06
    3628:	00 97       	sbiw	r24, 0x00	; 0
    362a:	69 f7       	brne	.-38     	; 0x3606 <LCD_enuWriteNLatch+0x436>
    362c:	14 c0       	rjmp	.+40     	; 0x3656 <LCD_enuWriteNLatch+0x486>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    362e:	6f 81       	ldd	r22, Y+7	; 0x07
    3630:	78 85       	ldd	r23, Y+8	; 0x08
    3632:	89 85       	ldd	r24, Y+9	; 0x09
    3634:	9a 85       	ldd	r25, Y+10	; 0x0a
    3636:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    363a:	dc 01       	movw	r26, r24
    363c:	cb 01       	movw	r24, r22
    363e:	9e 83       	std	Y+6, r25	; 0x06
    3640:	8d 83       	std	Y+5, r24	; 0x05
    3642:	8d 81       	ldd	r24, Y+5	; 0x05
    3644:	9e 81       	ldd	r25, Y+6	; 0x06
    3646:	9a 83       	std	Y+2, r25	; 0x02
    3648:	89 83       	std	Y+1, r24	; 0x01
    364a:	89 81       	ldd	r24, Y+1	; 0x01
    364c:	9a 81       	ldd	r25, Y+2	; 0x02
    364e:	01 97       	sbiw	r24, 0x01	; 1
    3650:	f1 f7       	brne	.-4      	; 0x364e <LCD_enuWriteNLatch+0x47e>
    3652:	9a 83       	std	Y+2, r25	; 0x02
    3654:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	#else
					Local_enuErrorState=ES_OUT_OF_RANGE;
	#endif

					return Local_enuErrorState;
    3656:	89 ad       	ldd	r24, Y+57	; 0x39
}
    3658:	ea 96       	adiw	r28, 0x3a	; 58
    365a:	0f b6       	in	r0, 0x3f	; 63
    365c:	f8 94       	cli
    365e:	de bf       	out	0x3e, r29	; 62
    3660:	0f be       	out	0x3f, r0	; 63
    3662:	cd bf       	out	0x3d, r28	; 61
    3664:	cf 91       	pop	r28
    3666:	df 91       	pop	r29
    3668:	08 95       	ret

0000366a <LCD_enuInit>:
ES_t LCD_enuInit(void){
    366a:	df 93       	push	r29
    366c:	cf 93       	push	r28
    366e:	cd b7       	in	r28, 0x3d	; 61
    3670:	de b7       	in	r29, 0x3e	; 62
    3672:	6d 97       	sbiw	r28, 0x1d	; 29
    3674:	0f b6       	in	r0, 0x3f	; 63
    3676:	f8 94       	cli
    3678:	de bf       	out	0x3e, r29	; 62
    367a:	0f be       	out	0x3f, r0	; 63
    367c:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState=ES_OK;
    367e:	1d 8e       	std	Y+29, r1	; 0x1d
	DIO_enuSetPinDirection(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8OUTPUT);
    3680:	81 e0       	ldi	r24, 0x01	; 1
    3682:	61 e0       	ldi	r22, 0x01	; 1
    3684:	41 e0       	ldi	r20, 0x01	; 1
    3686:	0e 94 77 12 	call	0x24ee	; 0x24ee <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(LCD_u8RW_GROUP,LCD_u8RW_PIN,DIO_u8OUTPUT);
    368a:	81 e0       	ldi	r24, 0x01	; 1
    368c:	62 e0       	ldi	r22, 0x02	; 2
    368e:	41 e0       	ldi	r20, 0x01	; 1
    3690:	0e 94 77 12 	call	0x24ee	; 0x24ee <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(LCD_u8EN_GROUP,LCD_u8EN_PIN,DIO_u8OUTPUT);
    3694:	81 e0       	ldi	r24, 0x01	; 1
    3696:	63 e0       	ldi	r22, 0x03	; 3
    3698:	41 e0       	ldi	r20, 0x01	; 1
    369a:	0e 94 77 12 	call	0x24ee	; 0x24ee <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(LCD_u8D7_GROUP,LCD_u8D7_PIN,DIO_u8OUTPUT);
    369e:	80 e0       	ldi	r24, 0x00	; 0
    36a0:	67 e0       	ldi	r22, 0x07	; 7
    36a2:	41 e0       	ldi	r20, 0x01	; 1
    36a4:	0e 94 77 12 	call	0x24ee	; 0x24ee <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(LCD_u8D6_GROUP,LCD_u8D6_PIN,DIO_u8OUTPUT);
    36a8:	80 e0       	ldi	r24, 0x00	; 0
    36aa:	66 e0       	ldi	r22, 0x06	; 6
    36ac:	41 e0       	ldi	r20, 0x01	; 1
    36ae:	0e 94 77 12 	call	0x24ee	; 0x24ee <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(LCD_u8D5_GROUP,LCD_u8D5_PIN,DIO_u8OUTPUT);
    36b2:	80 e0       	ldi	r24, 0x00	; 0
    36b4:	65 e0       	ldi	r22, 0x05	; 5
    36b6:	41 e0       	ldi	r20, 0x01	; 1
    36b8:	0e 94 77 12 	call	0x24ee	; 0x24ee <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(LCD_u8D4_GROUP,LCD_u8D4_PIN,DIO_u8OUTPUT);
    36bc:	80 e0       	ldi	r24, 0x00	; 0
    36be:	64 e0       	ldi	r22, 0x04	; 4
    36c0:	41 e0       	ldi	r20, 0x01	; 1
    36c2:	0e 94 77 12 	call	0x24ee	; 0x24ee <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(LCD_u8D0_GROUP,LCD_u8D0_PIN,DIO_u8OUTPUT);

	DIO_enuSetPinValue(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8OW);
	LCD_enuWriteNLatch(0x38);
#elif LCD_MODE==FOUR_BIT
	DIO_enuSetPinValue(LCD_u8D7_GROUP,LCD_u8D7_PIN,0);
    36c6:	80 e0       	ldi	r24, 0x00	; 0
    36c8:	67 e0       	ldi	r22, 0x07	; 7
    36ca:	40 e0       	ldi	r20, 0x00	; 0
    36cc:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(LCD_u8D6_GROUP,LCD_u8D6_PIN,0);
    36d0:	80 e0       	ldi	r24, 0x00	; 0
    36d2:	66 e0       	ldi	r22, 0x06	; 6
    36d4:	40 e0       	ldi	r20, 0x00	; 0
    36d6:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(LCD_u8D5_GROUP,LCD_u8D5_PIN,1);
    36da:	80 e0       	ldi	r24, 0x00	; 0
    36dc:	65 e0       	ldi	r22, 0x05	; 5
    36de:	41 e0       	ldi	r20, 0x01	; 1
    36e0:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(LCD_u8D4_GROUP,LCD_u8D4_PIN,0);
    36e4:	80 e0       	ldi	r24, 0x00	; 0
    36e6:	64 e0       	ldi	r22, 0x04	; 4
    36e8:	40 e0       	ldi	r20, 0x00	; 0
    36ea:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(LCD_u8EN_GROUP,LCD_u8EN_PIN,DIO_u8HIGH);
    36ee:	81 e0       	ldi	r24, 0x01	; 1
    36f0:	63 e0       	ldi	r22, 0x03	; 3
    36f2:	41 e0       	ldi	r20, 0x01	; 1
    36f4:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>
    36f8:	80 e0       	ldi	r24, 0x00	; 0
    36fa:	90 e0       	ldi	r25, 0x00	; 0
    36fc:	a0 e8       	ldi	r26, 0x80	; 128
    36fe:	bf e3       	ldi	r27, 0x3F	; 63
    3700:	89 8f       	std	Y+25, r24	; 0x19
    3702:	9a 8f       	std	Y+26, r25	; 0x1a
    3704:	ab 8f       	std	Y+27, r26	; 0x1b
    3706:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3708:	69 8d       	ldd	r22, Y+25	; 0x19
    370a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    370c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    370e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3710:	20 e0       	ldi	r18, 0x00	; 0
    3712:	30 e0       	ldi	r19, 0x00	; 0
    3714:	4a e7       	ldi	r20, 0x7A	; 122
    3716:	55 e4       	ldi	r21, 0x45	; 69
    3718:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    371c:	dc 01       	movw	r26, r24
    371e:	cb 01       	movw	r24, r22
    3720:	8d 8b       	std	Y+21, r24	; 0x15
    3722:	9e 8b       	std	Y+22, r25	; 0x16
    3724:	af 8b       	std	Y+23, r26	; 0x17
    3726:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3728:	6d 89       	ldd	r22, Y+21	; 0x15
    372a:	7e 89       	ldd	r23, Y+22	; 0x16
    372c:	8f 89       	ldd	r24, Y+23	; 0x17
    372e:	98 8d       	ldd	r25, Y+24	; 0x18
    3730:	20 e0       	ldi	r18, 0x00	; 0
    3732:	30 e0       	ldi	r19, 0x00	; 0
    3734:	40 e8       	ldi	r20, 0x80	; 128
    3736:	5f e3       	ldi	r21, 0x3F	; 63
    3738:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    373c:	88 23       	and	r24, r24
    373e:	2c f4       	brge	.+10     	; 0x374a <LCD_enuInit+0xe0>
		__ticks = 1;
    3740:	81 e0       	ldi	r24, 0x01	; 1
    3742:	90 e0       	ldi	r25, 0x00	; 0
    3744:	9c 8b       	std	Y+20, r25	; 0x14
    3746:	8b 8b       	std	Y+19, r24	; 0x13
    3748:	3f c0       	rjmp	.+126    	; 0x37c8 <LCD_enuInit+0x15e>
	else if (__tmp > 65535)
    374a:	6d 89       	ldd	r22, Y+21	; 0x15
    374c:	7e 89       	ldd	r23, Y+22	; 0x16
    374e:	8f 89       	ldd	r24, Y+23	; 0x17
    3750:	98 8d       	ldd	r25, Y+24	; 0x18
    3752:	20 e0       	ldi	r18, 0x00	; 0
    3754:	3f ef       	ldi	r19, 0xFF	; 255
    3756:	4f e7       	ldi	r20, 0x7F	; 127
    3758:	57 e4       	ldi	r21, 0x47	; 71
    375a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    375e:	18 16       	cp	r1, r24
    3760:	4c f5       	brge	.+82     	; 0x37b4 <LCD_enuInit+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3762:	69 8d       	ldd	r22, Y+25	; 0x19
    3764:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3766:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3768:	9c 8d       	ldd	r25, Y+28	; 0x1c
    376a:	20 e0       	ldi	r18, 0x00	; 0
    376c:	30 e0       	ldi	r19, 0x00	; 0
    376e:	40 e2       	ldi	r20, 0x20	; 32
    3770:	51 e4       	ldi	r21, 0x41	; 65
    3772:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3776:	dc 01       	movw	r26, r24
    3778:	cb 01       	movw	r24, r22
    377a:	bc 01       	movw	r22, r24
    377c:	cd 01       	movw	r24, r26
    377e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3782:	dc 01       	movw	r26, r24
    3784:	cb 01       	movw	r24, r22
    3786:	9c 8b       	std	Y+20, r25	; 0x14
    3788:	8b 8b       	std	Y+19, r24	; 0x13
    378a:	0f c0       	rjmp	.+30     	; 0x37aa <LCD_enuInit+0x140>
    378c:	80 e9       	ldi	r24, 0x90	; 144
    378e:	91 e0       	ldi	r25, 0x01	; 1
    3790:	9a 8b       	std	Y+18, r25	; 0x12
    3792:	89 8b       	std	Y+17, r24	; 0x11
    3794:	89 89       	ldd	r24, Y+17	; 0x11
    3796:	9a 89       	ldd	r25, Y+18	; 0x12
    3798:	01 97       	sbiw	r24, 0x01	; 1
    379a:	f1 f7       	brne	.-4      	; 0x3798 <LCD_enuInit+0x12e>
    379c:	9a 8b       	std	Y+18, r25	; 0x12
    379e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37a0:	8b 89       	ldd	r24, Y+19	; 0x13
    37a2:	9c 89       	ldd	r25, Y+20	; 0x14
    37a4:	01 97       	sbiw	r24, 0x01	; 1
    37a6:	9c 8b       	std	Y+20, r25	; 0x14
    37a8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37aa:	8b 89       	ldd	r24, Y+19	; 0x13
    37ac:	9c 89       	ldd	r25, Y+20	; 0x14
    37ae:	00 97       	sbiw	r24, 0x00	; 0
    37b0:	69 f7       	brne	.-38     	; 0x378c <LCD_enuInit+0x122>
    37b2:	14 c0       	rjmp	.+40     	; 0x37dc <LCD_enuInit+0x172>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37b4:	6d 89       	ldd	r22, Y+21	; 0x15
    37b6:	7e 89       	ldd	r23, Y+22	; 0x16
    37b8:	8f 89       	ldd	r24, Y+23	; 0x17
    37ba:	98 8d       	ldd	r25, Y+24	; 0x18
    37bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37c0:	dc 01       	movw	r26, r24
    37c2:	cb 01       	movw	r24, r22
    37c4:	9c 8b       	std	Y+20, r25	; 0x14
    37c6:	8b 8b       	std	Y+19, r24	; 0x13
    37c8:	8b 89       	ldd	r24, Y+19	; 0x13
    37ca:	9c 89       	ldd	r25, Y+20	; 0x14
    37cc:	98 8b       	std	Y+16, r25	; 0x10
    37ce:	8f 87       	std	Y+15, r24	; 0x0f
    37d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    37d2:	98 89       	ldd	r25, Y+16	; 0x10
    37d4:	01 97       	sbiw	r24, 0x01	; 1
    37d6:	f1 f7       	brne	.-4      	; 0x37d4 <LCD_enuInit+0x16a>
    37d8:	98 8b       	std	Y+16, r25	; 0x10
    37da:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_enuSetPinValue(LCD_u8EN_GROUP,LCD_u8EN_PIN,DIO_u8LOW);
    37dc:	81 e0       	ldi	r24, 0x01	; 1
    37de:	63 e0       	ldi	r22, 0x03	; 3
    37e0:	40 e0       	ldi	r20, 0x00	; 0
    37e2:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>
    37e6:	80 e0       	ldi	r24, 0x00	; 0
    37e8:	90 e0       	ldi	r25, 0x00	; 0
    37ea:	a0 e0       	ldi	r26, 0x00	; 0
    37ec:	b0 e4       	ldi	r27, 0x40	; 64
    37ee:	8b 87       	std	Y+11, r24	; 0x0b
    37f0:	9c 87       	std	Y+12, r25	; 0x0c
    37f2:	ad 87       	std	Y+13, r26	; 0x0d
    37f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    37f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    37fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    37fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    37fe:	20 e0       	ldi	r18, 0x00	; 0
    3800:	30 e0       	ldi	r19, 0x00	; 0
    3802:	4a e7       	ldi	r20, 0x7A	; 122
    3804:	55 e4       	ldi	r21, 0x45	; 69
    3806:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    380a:	dc 01       	movw	r26, r24
    380c:	cb 01       	movw	r24, r22
    380e:	8f 83       	std	Y+7, r24	; 0x07
    3810:	98 87       	std	Y+8, r25	; 0x08
    3812:	a9 87       	std	Y+9, r26	; 0x09
    3814:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3816:	6f 81       	ldd	r22, Y+7	; 0x07
    3818:	78 85       	ldd	r23, Y+8	; 0x08
    381a:	89 85       	ldd	r24, Y+9	; 0x09
    381c:	9a 85       	ldd	r25, Y+10	; 0x0a
    381e:	20 e0       	ldi	r18, 0x00	; 0
    3820:	30 e0       	ldi	r19, 0x00	; 0
    3822:	40 e8       	ldi	r20, 0x80	; 128
    3824:	5f e3       	ldi	r21, 0x3F	; 63
    3826:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    382a:	88 23       	and	r24, r24
    382c:	2c f4       	brge	.+10     	; 0x3838 <LCD_enuInit+0x1ce>
		__ticks = 1;
    382e:	81 e0       	ldi	r24, 0x01	; 1
    3830:	90 e0       	ldi	r25, 0x00	; 0
    3832:	9e 83       	std	Y+6, r25	; 0x06
    3834:	8d 83       	std	Y+5, r24	; 0x05
    3836:	3f c0       	rjmp	.+126    	; 0x38b6 <LCD_enuInit+0x24c>
	else if (__tmp > 65535)
    3838:	6f 81       	ldd	r22, Y+7	; 0x07
    383a:	78 85       	ldd	r23, Y+8	; 0x08
    383c:	89 85       	ldd	r24, Y+9	; 0x09
    383e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3840:	20 e0       	ldi	r18, 0x00	; 0
    3842:	3f ef       	ldi	r19, 0xFF	; 255
    3844:	4f e7       	ldi	r20, 0x7F	; 127
    3846:	57 e4       	ldi	r21, 0x47	; 71
    3848:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    384c:	18 16       	cp	r1, r24
    384e:	4c f5       	brge	.+82     	; 0x38a2 <LCD_enuInit+0x238>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3850:	6b 85       	ldd	r22, Y+11	; 0x0b
    3852:	7c 85       	ldd	r23, Y+12	; 0x0c
    3854:	8d 85       	ldd	r24, Y+13	; 0x0d
    3856:	9e 85       	ldd	r25, Y+14	; 0x0e
    3858:	20 e0       	ldi	r18, 0x00	; 0
    385a:	30 e0       	ldi	r19, 0x00	; 0
    385c:	40 e2       	ldi	r20, 0x20	; 32
    385e:	51 e4       	ldi	r21, 0x41	; 65
    3860:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3864:	dc 01       	movw	r26, r24
    3866:	cb 01       	movw	r24, r22
    3868:	bc 01       	movw	r22, r24
    386a:	cd 01       	movw	r24, r26
    386c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3870:	dc 01       	movw	r26, r24
    3872:	cb 01       	movw	r24, r22
    3874:	9e 83       	std	Y+6, r25	; 0x06
    3876:	8d 83       	std	Y+5, r24	; 0x05
    3878:	0f c0       	rjmp	.+30     	; 0x3898 <LCD_enuInit+0x22e>
    387a:	80 e9       	ldi	r24, 0x90	; 144
    387c:	91 e0       	ldi	r25, 0x01	; 1
    387e:	9c 83       	std	Y+4, r25	; 0x04
    3880:	8b 83       	std	Y+3, r24	; 0x03
    3882:	8b 81       	ldd	r24, Y+3	; 0x03
    3884:	9c 81       	ldd	r25, Y+4	; 0x04
    3886:	01 97       	sbiw	r24, 0x01	; 1
    3888:	f1 f7       	brne	.-4      	; 0x3886 <LCD_enuInit+0x21c>
    388a:	9c 83       	std	Y+4, r25	; 0x04
    388c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    388e:	8d 81       	ldd	r24, Y+5	; 0x05
    3890:	9e 81       	ldd	r25, Y+6	; 0x06
    3892:	01 97       	sbiw	r24, 0x01	; 1
    3894:	9e 83       	std	Y+6, r25	; 0x06
    3896:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3898:	8d 81       	ldd	r24, Y+5	; 0x05
    389a:	9e 81       	ldd	r25, Y+6	; 0x06
    389c:	00 97       	sbiw	r24, 0x00	; 0
    389e:	69 f7       	brne	.-38     	; 0x387a <LCD_enuInit+0x210>
    38a0:	14 c0       	rjmp	.+40     	; 0x38ca <LCD_enuInit+0x260>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38a2:	6f 81       	ldd	r22, Y+7	; 0x07
    38a4:	78 85       	ldd	r23, Y+8	; 0x08
    38a6:	89 85       	ldd	r24, Y+9	; 0x09
    38a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    38aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38ae:	dc 01       	movw	r26, r24
    38b0:	cb 01       	movw	r24, r22
    38b2:	9e 83       	std	Y+6, r25	; 0x06
    38b4:	8d 83       	std	Y+5, r24	; 0x05
    38b6:	8d 81       	ldd	r24, Y+5	; 0x05
    38b8:	9e 81       	ldd	r25, Y+6	; 0x06
    38ba:	9a 83       	std	Y+2, r25	; 0x02
    38bc:	89 83       	std	Y+1, r24	; 0x01
    38be:	89 81       	ldd	r24, Y+1	; 0x01
    38c0:	9a 81       	ldd	r25, Y+2	; 0x02
    38c2:	01 97       	sbiw	r24, 0x01	; 1
    38c4:	f1 f7       	brne	.-4      	; 0x38c2 <LCD_enuInit+0x258>
    38c6:	9a 83       	std	Y+2, r25	; 0x02
    38c8:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		DIO_enuSetPinValue(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8LOW);
    38ca:	81 e0       	ldi	r24, 0x01	; 1
    38cc:	61 e0       	ldi	r22, 0x01	; 1
    38ce:	40 e0       	ldi	r20, 0x00	; 0
    38d0:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>

	      LCD_enuWriteNLatch(0x28);
    38d4:	88 e2       	ldi	r24, 0x28	; 40
    38d6:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <LCD_enuWriteNLatch>
#else
	      Local_enuErrorState=ES_outES_OUT_OF_RANGE;
#endif
	      //desplay on off

	     	      DIO_enuSetPinValue(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8LOW);
    38da:	81 e0       	ldi	r24, 0x01	; 1
    38dc:	61 e0       	ldi	r22, 0x01	; 1
    38de:	40 e0       	ldi	r20, 0x00	; 0
    38e0:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>
	     	      LCD_enuWriteNLatch(0X0F);
    38e4:	8f e0       	ldi	r24, 0x0F	; 15
    38e6:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <LCD_enuWriteNLatch>
	     	      //desplay clear
	     	     DIO_enuSetPinValue(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8LOW);
    38ea:	81 e0       	ldi	r24, 0x01	; 1
    38ec:	61 e0       	ldi	r22, 0x01	; 1
    38ee:	40 e0       	ldi	r20, 0x00	; 0
    38f0:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>
	     	    	     	      LCD_enuWriteNLatch(0X01);
    38f4:	81 e0       	ldi	r24, 0x01	; 1
    38f6:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <LCD_enuWriteNLatch>
	     	    	     	      //set mode (increasing or decreasing)and the cursor
	     	    	     	     DIO_enuSetPinValue(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8LOW);
    38fa:	81 e0       	ldi	r24, 0x01	; 1
    38fc:	61 e0       	ldi	r22, 0x01	; 1
    38fe:	40 e0       	ldi	r20, 0x00	; 0
    3900:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>
	     	    	     	    	      LCD_enuWriteNLatch(0X06);
    3904:	86 e0       	ldi	r24, 0x06	; 6
    3906:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <LCD_enuWriteNLatch>
	      return Local_enuErrorState;
    390a:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    390c:	6d 96       	adiw	r28, 0x1d	; 29
    390e:	0f b6       	in	r0, 0x3f	; 63
    3910:	f8 94       	cli
    3912:	de bf       	out	0x3e, r29	; 62
    3914:	0f be       	out	0x3f, r0	; 63
    3916:	cd bf       	out	0x3d, r28	; 61
    3918:	cf 91       	pop	r28
    391a:	df 91       	pop	r29
    391c:	08 95       	ret

0000391e <LCD_enuWriteData>:
ES_t LCD_enuWriteData(u8 Copy_u8Data){
    391e:	df 93       	push	r29
    3920:	cf 93       	push	r28
    3922:	00 d0       	rcall	.+0      	; 0x3924 <LCD_enuWriteData+0x6>
    3924:	cd b7       	in	r28, 0x3d	; 61
    3926:	de b7       	in	r29, 0x3e	; 62
    3928:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_OK;
    392a:	19 82       	std	Y+1, r1	; 0x01
	DIO_enuSetPinValue(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8HIGH);
    392c:	81 e0       	ldi	r24, 0x01	; 1
    392e:	61 e0       	ldi	r22, 0x01	; 1
    3930:	41 e0       	ldi	r20, 0x01	; 1
    3932:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch(Copy_u8Data);
    3936:	8a 81       	ldd	r24, Y+2	; 0x02
    3938:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <LCD_enuWriteNLatch>
	return Local_enuErrorState;
    393c:	89 81       	ldd	r24, Y+1	; 0x01
}
    393e:	0f 90       	pop	r0
    3940:	0f 90       	pop	r0
    3942:	cf 91       	pop	r28
    3944:	df 91       	pop	r29
    3946:	08 95       	ret

00003948 <LCD_enuWriteCommand>:
ES_t LCD_enuWriteCommand(u8 Copy_u8Command){
    3948:	df 93       	push	r29
    394a:	cf 93       	push	r28
    394c:	00 d0       	rcall	.+0      	; 0x394e <LCD_enuWriteCommand+0x6>
    394e:	cd b7       	in	r28, 0x3d	; 61
    3950:	de b7       	in	r29, 0x3e	; 62
    3952:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_OK;
    3954:	19 82       	std	Y+1, r1	; 0x01
	DIO_enuSetPinValue(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8LOW);
    3956:	81 e0       	ldi	r24, 0x01	; 1
    3958:	61 e0       	ldi	r22, 0x01	; 1
    395a:	40 e0       	ldi	r20, 0x00	; 0
    395c:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>
			      LCD_enuWriteNLatch(Copy_u8Command);
    3960:	8a 81       	ldd	r24, Y+2	; 0x02
    3962:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <LCD_enuWriteNLatch>
			      return Local_enuErrorState;
    3966:	89 81       	ldd	r24, Y+1	; 0x01
}
    3968:	0f 90       	pop	r0
    396a:	0f 90       	pop	r0
    396c:	cf 91       	pop	r28
    396e:	df 91       	pop	r29
    3970:	08 95       	ret

00003972 <LCD_enuWriteString>:

ES_t LCD_enuWriteString(const char*Copy_String){
    3972:	df 93       	push	r29
    3974:	cf 93       	push	r28
    3976:	00 d0       	rcall	.+0      	; 0x3978 <LCD_enuWriteString+0x6>
    3978:	0f 92       	push	r0
    397a:	cd b7       	in	r28, 0x3d	; 61
    397c:	de b7       	in	r29, 0x3e	; 62
    397e:	9b 83       	std	Y+3, r25	; 0x03
    3980:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_OK;
    3982:	19 82       	std	Y+1, r1	; 0x01
    3984:	10 c0       	rjmp	.+32     	; 0x39a6 <LCD_enuWriteString+0x34>
	while(*Copy_String!=0){
			DIO_enuSetPinValue(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8HIGH);
    3986:	81 e0       	ldi	r24, 0x01	; 1
    3988:	61 e0       	ldi	r22, 0x01	; 1
    398a:	41 e0       	ldi	r20, 0x01	; 1
    398c:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>
			LCD_enuWriteNLatch(*Copy_String++);
    3990:	ea 81       	ldd	r30, Y+2	; 0x02
    3992:	fb 81       	ldd	r31, Y+3	; 0x03
    3994:	20 81       	ld	r18, Z
    3996:	8a 81       	ldd	r24, Y+2	; 0x02
    3998:	9b 81       	ldd	r25, Y+3	; 0x03
    399a:	01 96       	adiw	r24, 0x01	; 1
    399c:	9b 83       	std	Y+3, r25	; 0x03
    399e:	8a 83       	std	Y+2, r24	; 0x02
    39a0:	82 2f       	mov	r24, r18
    39a2:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <LCD_enuWriteNLatch>
			      return Local_enuErrorState;
}

ES_t LCD_enuWriteString(const char*Copy_String){
	ES_t Local_enuErrorState=ES_OK;
	while(*Copy_String!=0){
    39a6:	ea 81       	ldd	r30, Y+2	; 0x02
    39a8:	fb 81       	ldd	r31, Y+3	; 0x03
    39aa:	80 81       	ld	r24, Z
    39ac:	88 23       	and	r24, r24
    39ae:	59 f7       	brne	.-42     	; 0x3986 <LCD_enuWriteString+0x14>
			DIO_enuSetPinValue(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8HIGH);
			LCD_enuWriteNLatch(*Copy_String++);
		}
	return Local_enuErrorState;
    39b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    39b2:	0f 90       	pop	r0
    39b4:	0f 90       	pop	r0
    39b6:	0f 90       	pop	r0
    39b8:	cf 91       	pop	r28
    39ba:	df 91       	pop	r29
    39bc:	08 95       	ret

000039be <LCD_enuClearScreen>:
ES_t LCD_enuClearScreen(void){
    39be:	df 93       	push	r29
    39c0:	cf 93       	push	r28
    39c2:	0f 92       	push	r0
    39c4:	cd b7       	in	r28, 0x3d	; 61
    39c6:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_OK;
    39c8:	19 82       	std	Y+1, r1	; 0x01
	DIO_enuSetPinValue(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8LOW);
    39ca:	81 e0       	ldi	r24, 0x01	; 1
    39cc:	61 e0       	ldi	r22, 0x01	; 1
    39ce:	40 e0       	ldi	r20, 0x00	; 0
    39d0:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch(0x01);
    39d4:	81 e0       	ldi	r24, 0x01	; 1
    39d6:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <LCD_enuWriteNLatch>
	LCD_enuWriteCommand(0x80);           //GO TO POSITION ZER0
    39da:	80 e8       	ldi	r24, 0x80	; 128
    39dc:	0e 94 a4 1c 	call	0x3948	; 0x3948 <LCD_enuWriteCommand>
	return Local_enuErrorState;
    39e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    39e2:	0f 90       	pop	r0
    39e4:	cf 91       	pop	r28
    39e6:	df 91       	pop	r29
    39e8:	08 95       	ret

000039ea <LCD_enuShiftDisplayRight>:
ES_t LCD_enuShiftDisplayRight(void){
    39ea:	df 93       	push	r29
    39ec:	cf 93       	push	r28
    39ee:	0f 92       	push	r0
    39f0:	cd b7       	in	r28, 0x3d	; 61
    39f2:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_OK;
    39f4:	19 82       	std	Y+1, r1	; 0x01
	LCD_enuWriteCommand(0x18);
    39f6:	88 e1       	ldi	r24, 0x18	; 24
    39f8:	0e 94 a4 1c 	call	0x3948	; 0x3948 <LCD_enuWriteCommand>
	return Local_enuErrorState;
    39fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    39fe:	0f 90       	pop	r0
    3a00:	cf 91       	pop	r28
    3a02:	df 91       	pop	r29
    3a04:	08 95       	ret

00003a06 <LCD_enuShiftDisplayLeft>:
ES_t LCD_enuShiftDisplayLeft(void){
    3a06:	df 93       	push	r29
    3a08:	cf 93       	push	r28
    3a0a:	0f 92       	push	r0
    3a0c:	cd b7       	in	r28, 0x3d	; 61
    3a0e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_OK;
    3a10:	19 82       	std	Y+1, r1	; 0x01
	LCD_enuWriteCommand(0x1c);
    3a12:	8c e1       	ldi	r24, 0x1C	; 28
    3a14:	0e 94 a4 1c 	call	0x3948	; 0x3948 <LCD_enuWriteCommand>
	return Local_enuErrorState;
    3a18:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a1a:	0f 90       	pop	r0
    3a1c:	cf 91       	pop	r28
    3a1e:	df 91       	pop	r29
    3a20:	08 95       	ret

00003a22 <LCD_enuSetCgram>:
ES_t LCD_enuSetCgram(u8 * Copy_u8Array,u8 Copy_u8Position,u8 Copy_u8Num_Char){
    3a22:	df 93       	push	r29
    3a24:	cf 93       	push	r28
    3a26:	00 d0       	rcall	.+0      	; 0x3a28 <LCD_enuSetCgram+0x6>
    3a28:	00 d0       	rcall	.+0      	; 0x3a2a <LCD_enuSetCgram+0x8>
    3a2a:	00 d0       	rcall	.+0      	; 0x3a2c <LCD_enuSetCgram+0xa>
    3a2c:	cd b7       	in	r28, 0x3d	; 61
    3a2e:	de b7       	in	r29, 0x3e	; 62
    3a30:	9c 83       	std	Y+4, r25	; 0x04
    3a32:	8b 83       	std	Y+3, r24	; 0x03
    3a34:	6d 83       	std	Y+5, r22	; 0x05
    3a36:	4e 83       	std	Y+6, r20	; 0x06
	ES_t Local_enuErrorState=ES_OK;
    3a38:	1a 82       	std	Y+2, r1	; 0x02
	LCD_enuWriteCommand(0x40+8*Copy_u8Position);
    3a3a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a3c:	88 2f       	mov	r24, r24
    3a3e:	90 e0       	ldi	r25, 0x00	; 0
    3a40:	08 96       	adiw	r24, 0x08	; 8
    3a42:	88 0f       	add	r24, r24
    3a44:	99 1f       	adc	r25, r25
    3a46:	88 0f       	add	r24, r24
    3a48:	99 1f       	adc	r25, r25
    3a4a:	88 0f       	add	r24, r24
    3a4c:	99 1f       	adc	r25, r25
    3a4e:	0e 94 a4 1c 	call	0x3948	; 0x3948 <LCD_enuWriteCommand>
		u8 i;
		for(i=0;i<8*Copy_u8Num_Char;i++){
    3a52:	19 82       	std	Y+1, r1	; 0x01
    3a54:	0e c0       	rjmp	.+28     	; 0x3a72 <LCD_enuSetCgram+0x50>
			LCD_enuWriteData(Copy_u8Array[i]);
    3a56:	89 81       	ldd	r24, Y+1	; 0x01
    3a58:	28 2f       	mov	r18, r24
    3a5a:	30 e0       	ldi	r19, 0x00	; 0
    3a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    3a5e:	9c 81       	ldd	r25, Y+4	; 0x04
    3a60:	fc 01       	movw	r30, r24
    3a62:	e2 0f       	add	r30, r18
    3a64:	f3 1f       	adc	r31, r19
    3a66:	80 81       	ld	r24, Z
    3a68:	0e 94 8f 1c 	call	0x391e	; 0x391e <LCD_enuWriteData>
}
ES_t LCD_enuSetCgram(u8 * Copy_u8Array,u8 Copy_u8Position,u8 Copy_u8Num_Char){
	ES_t Local_enuErrorState=ES_OK;
	LCD_enuWriteCommand(0x40+8*Copy_u8Position);
		u8 i;
		for(i=0;i<8*Copy_u8Num_Char;i++){
    3a6c:	89 81       	ldd	r24, Y+1	; 0x01
    3a6e:	8f 5f       	subi	r24, 0xFF	; 255
    3a70:	89 83       	std	Y+1, r24	; 0x01
    3a72:	89 81       	ldd	r24, Y+1	; 0x01
    3a74:	28 2f       	mov	r18, r24
    3a76:	30 e0       	ldi	r19, 0x00	; 0
    3a78:	8e 81       	ldd	r24, Y+6	; 0x06
    3a7a:	88 2f       	mov	r24, r24
    3a7c:	90 e0       	ldi	r25, 0x00	; 0
    3a7e:	88 0f       	add	r24, r24
    3a80:	99 1f       	adc	r25, r25
    3a82:	88 0f       	add	r24, r24
    3a84:	99 1f       	adc	r25, r25
    3a86:	88 0f       	add	r24, r24
    3a88:	99 1f       	adc	r25, r25
    3a8a:	28 17       	cp	r18, r24
    3a8c:	39 07       	cpc	r19, r25
    3a8e:	1c f3       	brlt	.-58     	; 0x3a56 <LCD_enuSetCgram+0x34>
			LCD_enuWriteData(Copy_u8Array[i]);

		}
		return Local_enuErrorState;
    3a90:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3a92:	26 96       	adiw	r28, 0x06	; 6
    3a94:	0f b6       	in	r0, 0x3f	; 63
    3a96:	f8 94       	cli
    3a98:	de bf       	out	0x3e, r29	; 62
    3a9a:	0f be       	out	0x3f, r0	; 63
    3a9c:	cd bf       	out	0x3d, r28	; 61
    3a9e:	cf 91       	pop	r28
    3aa0:	df 91       	pop	r29
    3aa2:	08 95       	ret

00003aa4 <LCD_enuSetDdram>:
ES_t LCD_enuSetDdram(u8 Copy_u8Position){
    3aa4:	df 93       	push	r29
    3aa6:	cf 93       	push	r28
    3aa8:	00 d0       	rcall	.+0      	; 0x3aaa <LCD_enuSetDdram+0x6>
    3aaa:	cd b7       	in	r28, 0x3d	; 61
    3aac:	de b7       	in	r29, 0x3e	; 62
    3aae:	8a 83       	std	Y+2, r24	; 0x02
	ES_t local_enuerrorState=ES_NOK;
    3ab0:	81 e0       	ldi	r24, 0x01	; 1
    3ab2:	89 83       	std	Y+1, r24	; 0x01
		LCD_enuWriteCommand(0X80+(8*Copy_u8Position));
    3ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ab6:	88 2f       	mov	r24, r24
    3ab8:	90 e0       	ldi	r25, 0x00	; 0
    3aba:	40 96       	adiw	r24, 0x10	; 16
    3abc:	88 0f       	add	r24, r24
    3abe:	99 1f       	adc	r25, r25
    3ac0:	88 0f       	add	r24, r24
    3ac2:	99 1f       	adc	r25, r25
    3ac4:	88 0f       	add	r24, r24
    3ac6:	99 1f       	adc	r25, r25
    3ac8:	0e 94 a4 1c 	call	0x3948	; 0x3948 <LCD_enuWriteCommand>
		return local_enuerrorState;
    3acc:	89 81       	ldd	r24, Y+1	; 0x01
}
    3ace:	0f 90       	pop	r0
    3ad0:	0f 90       	pop	r0
    3ad2:	cf 91       	pop	r28
    3ad4:	df 91       	pop	r29
    3ad6:	08 95       	ret

00003ad8 <LCD_enuWriteCharacter>:
ES_t LCD_enuWriteCharacter(u8 Copy_u8Char){
    3ad8:	df 93       	push	r29
    3ada:	cf 93       	push	r28
    3adc:	00 d0       	rcall	.+0      	; 0x3ade <LCD_enuWriteCharacter+0x6>
    3ade:	cd b7       	in	r28, 0x3d	; 61
    3ae0:	de b7       	in	r29, 0x3e	; 62
    3ae2:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_OK;
    3ae4:	19 82       	std	Y+1, r1	; 0x01
	LCD_enuWriteData(Copy_u8Char);
    3ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ae8:	0e 94 8f 1c 	call	0x391e	; 0x391e <LCD_enuWriteData>
	return Local_enuErrorState;
    3aec:	89 81       	ldd	r24, Y+1	; 0x01
}
    3aee:	0f 90       	pop	r0
    3af0:	0f 90       	pop	r0
    3af2:	cf 91       	pop	r28
    3af4:	df 91       	pop	r29
    3af6:	08 95       	ret

00003af8 <LCD_enuWritInteger>:
ES_t LCD_enuWritInteger(u16 Copy_intNumber){
    3af8:	df 93       	push	r29
    3afa:	cf 93       	push	r28
    3afc:	cd b7       	in	r28, 0x3d	; 61
    3afe:	de b7       	in	r29, 0x3e	; 62
    3b00:	61 97       	sbiw	r28, 0x11	; 17
    3b02:	0f b6       	in	r0, 0x3f	; 63
    3b04:	f8 94       	cli
    3b06:	de bf       	out	0x3e, r29	; 62
    3b08:	0f be       	out	0x3f, r0	; 63
    3b0a:	cd bf       	out	0x3d, r28	; 61
    3b0c:	9a 87       	std	Y+10, r25	; 0x0a
    3b0e:	89 87       	std	Y+9, r24	; 0x09
}
for(u8 i=0;i<local_u8Length;i++){
	LCD_enuWriteCharacter(array[i]);
}
return Local_enuErrorState;
}
    3b10:	2d b7       	in	r18, 0x3d	; 61
    3b12:	3e b7       	in	r19, 0x3e	; 62
    3b14:	39 8b       	std	Y+17, r19	; 0x11
    3b16:	28 8b       	std	Y+16, r18	; 0x10
ES_t LCD_enuWriteCharacter(u8 Copy_u8Char){
	ES_t Local_enuErrorState=ES_OK;
	LCD_enuWriteData(Copy_u8Char);
	return Local_enuErrorState;
}
ES_t LCD_enuWritInteger(u16 Copy_intNumber){
    3b18:	8d b7       	in	r24, 0x3d	; 61
    3b1a:	9e b7       	in	r25, 0x3e	; 62
    3b1c:	9c 87       	std	Y+12, r25	; 0x0c
    3b1e:	8b 87       	std	Y+11, r24	; 0x0b
	ES_t Local_enuErrorState=ES_NOK;
    3b20:	81 e0       	ldi	r24, 0x01	; 1
    3b22:	8e 83       	std	Y+6, r24	; 0x06
int local_intTempNum=Copy_intNumber;
    3b24:	89 85       	ldd	r24, Y+9	; 0x09
    3b26:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b28:	9d 83       	std	Y+5, r25	; 0x05
    3b2a:	8c 83       	std	Y+4, r24	; 0x04
u8 local_u8Length=0;
    3b2c:	1b 82       	std	Y+3, r1	; 0x03
if(Copy_intNumber==0){
    3b2e:	89 85       	ldd	r24, Y+9	; 0x09
    3b30:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b32:	00 97       	sbiw	r24, 0x00	; 0
    3b34:	99 f4       	brne	.+38     	; 0x3b5c <LCD_enuWritInteger+0x64>
	LCD_enuWriteCharacter('0');
    3b36:	80 e3       	ldi	r24, 0x30	; 48
    3b38:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <LCD_enuWriteCharacter>
	return Local_enuErrorState;
    3b3c:	3e 81       	ldd	r19, Y+6	; 0x06
    3b3e:	3f 87       	std	Y+15, r19	; 0x0f
    3b40:	6b c0       	rjmp	.+214    	; 0x3c18 <LCD_enuWritInteger+0x120>
}
while(local_intTempNum!=0){
	local_intTempNum/=10;
    3b42:	8c 81       	ldd	r24, Y+4	; 0x04
    3b44:	9d 81       	ldd	r25, Y+5	; 0x05
    3b46:	2a e0       	ldi	r18, 0x0A	; 10
    3b48:	30 e0       	ldi	r19, 0x00	; 0
    3b4a:	b9 01       	movw	r22, r18
    3b4c:	0e 94 62 3a 	call	0x74c4	; 0x74c4 <__divmodhi4>
    3b50:	cb 01       	movw	r24, r22
    3b52:	9d 83       	std	Y+5, r25	; 0x05
    3b54:	8c 83       	std	Y+4, r24	; 0x04
	local_u8Length++;
    3b56:	8b 81       	ldd	r24, Y+3	; 0x03
    3b58:	8f 5f       	subi	r24, 0xFF	; 255
    3b5a:	8b 83       	std	Y+3, r24	; 0x03
u8 local_u8Length=0;
if(Copy_intNumber==0){
	LCD_enuWriteCharacter('0');
	return Local_enuErrorState;
}
while(local_intTempNum!=0){
    3b5c:	8c 81       	ldd	r24, Y+4	; 0x04
    3b5e:	9d 81       	ldd	r25, Y+5	; 0x05
    3b60:	00 97       	sbiw	r24, 0x00	; 0
    3b62:	79 f7       	brne	.-34     	; 0x3b42 <LCD_enuWritInteger+0x4a>
	local_intTempNum/=10;
	local_u8Length++;
}
u8 array[local_u8Length];
    3b64:	8b 81       	ldd	r24, Y+3	; 0x03
    3b66:	88 2f       	mov	r24, r24
    3b68:	90 e0       	ldi	r25, 0x00	; 0
    3b6a:	2d b7       	in	r18, 0x3d	; 61
    3b6c:	3e b7       	in	r19, 0x3e	; 62
    3b6e:	28 1b       	sub	r18, r24
    3b70:	39 0b       	sbc	r19, r25
    3b72:	0f b6       	in	r0, 0x3f	; 63
    3b74:	f8 94       	cli
    3b76:	3e bf       	out	0x3e, r19	; 62
    3b78:	0f be       	out	0x3f, r0	; 63
    3b7a:	2d bf       	out	0x3d, r18	; 61
    3b7c:	8d b7       	in	r24, 0x3d	; 61
    3b7e:	9e b7       	in	r25, 0x3e	; 62
    3b80:	01 96       	adiw	r24, 0x01	; 1
    3b82:	9e 87       	std	Y+14, r25	; 0x0e
    3b84:	8d 87       	std	Y+13, r24	; 0x0d
    3b86:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b88:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b8a:	00 96       	adiw	r24, 0x00	; 0
    3b8c:	9e 87       	std	Y+14, r25	; 0x0e
    3b8e:	8d 87       	std	Y+13, r24	; 0x0d
    3b90:	2d 85       	ldd	r18, Y+13	; 0x0d
    3b92:	3e 85       	ldd	r19, Y+14	; 0x0e
    3b94:	38 87       	std	Y+8, r19	; 0x08
    3b96:	2f 83       	std	Y+7, r18	; 0x07
local_intTempNum=Copy_intNumber;
    3b98:	89 85       	ldd	r24, Y+9	; 0x09
    3b9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b9c:	9d 83       	std	Y+5, r25	; 0x05
    3b9e:	8c 83       	std	Y+4, r24	; 0x04
for(u8 i=local_u8Length;i>0;i--){
    3ba0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ba2:	8a 83       	std	Y+2, r24	; 0x02
    3ba4:	20 c0       	rjmp	.+64     	; 0x3be6 <LCD_enuWritInteger+0xee>
	array[i-1]=local_intTempNum%10+'0';
    3ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ba8:	88 2f       	mov	r24, r24
    3baa:	90 e0       	ldi	r25, 0x00	; 0
    3bac:	fc 01       	movw	r30, r24
    3bae:	31 97       	sbiw	r30, 0x01	; 1
    3bb0:	8c 81       	ldd	r24, Y+4	; 0x04
    3bb2:	9d 81       	ldd	r25, Y+5	; 0x05
    3bb4:	2a e0       	ldi	r18, 0x0A	; 10
    3bb6:	30 e0       	ldi	r19, 0x00	; 0
    3bb8:	b9 01       	movw	r22, r18
    3bba:	0e 94 62 3a 	call	0x74c4	; 0x74c4 <__divmodhi4>
    3bbe:	28 2f       	mov	r18, r24
    3bc0:	20 5d       	subi	r18, 0xD0	; 208
    3bc2:	8f 81       	ldd	r24, Y+7	; 0x07
    3bc4:	98 85       	ldd	r25, Y+8	; 0x08
    3bc6:	e8 0f       	add	r30, r24
    3bc8:	f9 1f       	adc	r31, r25
    3bca:	20 83       	st	Z, r18
	local_intTempNum/=10;
    3bcc:	8c 81       	ldd	r24, Y+4	; 0x04
    3bce:	9d 81       	ldd	r25, Y+5	; 0x05
    3bd0:	2a e0       	ldi	r18, 0x0A	; 10
    3bd2:	30 e0       	ldi	r19, 0x00	; 0
    3bd4:	b9 01       	movw	r22, r18
    3bd6:	0e 94 62 3a 	call	0x74c4	; 0x74c4 <__divmodhi4>
    3bda:	cb 01       	movw	r24, r22
    3bdc:	9d 83       	std	Y+5, r25	; 0x05
    3bde:	8c 83       	std	Y+4, r24	; 0x04
	local_intTempNum/=10;
	local_u8Length++;
}
u8 array[local_u8Length];
local_intTempNum=Copy_intNumber;
for(u8 i=local_u8Length;i>0;i--){
    3be0:	8a 81       	ldd	r24, Y+2	; 0x02
    3be2:	81 50       	subi	r24, 0x01	; 1
    3be4:	8a 83       	std	Y+2, r24	; 0x02
    3be6:	8a 81       	ldd	r24, Y+2	; 0x02
    3be8:	88 23       	and	r24, r24
    3bea:	e9 f6       	brne	.-70     	; 0x3ba6 <LCD_enuWritInteger+0xae>
	array[i-1]=local_intTempNum%10+'0';
	local_intTempNum/=10;
}
for(u8 i=0;i<local_u8Length;i++){
    3bec:	19 82       	std	Y+1, r1	; 0x01
    3bee:	0e c0       	rjmp	.+28     	; 0x3c0c <LCD_enuWritInteger+0x114>
	LCD_enuWriteCharacter(array[i]);
    3bf0:	89 81       	ldd	r24, Y+1	; 0x01
    3bf2:	28 2f       	mov	r18, r24
    3bf4:	30 e0       	ldi	r19, 0x00	; 0
    3bf6:	8f 81       	ldd	r24, Y+7	; 0x07
    3bf8:	98 85       	ldd	r25, Y+8	; 0x08
    3bfa:	fc 01       	movw	r30, r24
    3bfc:	e2 0f       	add	r30, r18
    3bfe:	f3 1f       	adc	r31, r19
    3c00:	80 81       	ld	r24, Z
    3c02:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <LCD_enuWriteCharacter>
local_intTempNum=Copy_intNumber;
for(u8 i=local_u8Length;i>0;i--){
	array[i-1]=local_intTempNum%10+'0';
	local_intTempNum/=10;
}
for(u8 i=0;i<local_u8Length;i++){
    3c06:	89 81       	ldd	r24, Y+1	; 0x01
    3c08:	8f 5f       	subi	r24, 0xFF	; 255
    3c0a:	89 83       	std	Y+1, r24	; 0x01
    3c0c:	99 81       	ldd	r25, Y+1	; 0x01
    3c0e:	8b 81       	ldd	r24, Y+3	; 0x03
    3c10:	98 17       	cp	r25, r24
    3c12:	70 f3       	brcs	.-36     	; 0x3bf0 <LCD_enuWritInteger+0xf8>
	LCD_enuWriteCharacter(array[i]);
}
return Local_enuErrorState;
    3c14:	3e 81       	ldd	r19, Y+6	; 0x06
    3c16:	3f 87       	std	Y+15, r19	; 0x0f
    3c18:	8b 85       	ldd	r24, Y+11	; 0x0b
    3c1a:	9c 85       	ldd	r25, Y+12	; 0x0c
    3c1c:	0f b6       	in	r0, 0x3f	; 63
    3c1e:	f8 94       	cli
    3c20:	9e bf       	out	0x3e, r25	; 62
    3c22:	0f be       	out	0x3f, r0	; 63
    3c24:	8d bf       	out	0x3d, r24	; 61
    3c26:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    3c28:	28 89       	ldd	r18, Y+16	; 0x10
    3c2a:	39 89       	ldd	r19, Y+17	; 0x11
    3c2c:	0f b6       	in	r0, 0x3f	; 63
    3c2e:	f8 94       	cli
    3c30:	3e bf       	out	0x3e, r19	; 62
    3c32:	0f be       	out	0x3f, r0	; 63
    3c34:	2d bf       	out	0x3d, r18	; 61
    3c36:	61 96       	adiw	r28, 0x11	; 17
    3c38:	0f b6       	in	r0, 0x3f	; 63
    3c3a:	f8 94       	cli
    3c3c:	de bf       	out	0x3e, r29	; 62
    3c3e:	0f be       	out	0x3f, r0	; 63
    3c40:	cd bf       	out	0x3d, r28	; 61
    3c42:	cf 91       	pop	r28
    3c44:	df 91       	pop	r29
    3c46:	08 95       	ret

00003c48 <LCD_enuWriteFloat>:
ES_t LCD_enuWriteFloat(f32 Copy_floatNumber){
    3c48:	df 93       	push	r29
    3c4a:	cf 93       	push	r28
    3c4c:	cd b7       	in	r28, 0x3d	; 61
    3c4e:	de b7       	in	r29, 0x3e	; 62
    3c50:	2d 97       	sbiw	r28, 0x0d	; 13
    3c52:	0f b6       	in	r0, 0x3f	; 63
    3c54:	f8 94       	cli
    3c56:	de bf       	out	0x3e, r29	; 62
    3c58:	0f be       	out	0x3f, r0	; 63
    3c5a:	cd bf       	out	0x3d, r28	; 61
    3c5c:	6a 87       	std	Y+10, r22	; 0x0a
    3c5e:	7b 87       	std	Y+11, r23	; 0x0b
    3c60:	8c 87       	std	Y+12, r24	; 0x0c
    3c62:	9d 87       	std	Y+13, r25	; 0x0d
	ES_t Local_enuErrorState=ES_OK;
    3c64:	19 86       	std	Y+9, r1	; 0x09
	u32 Local_u32int=(u32)(Copy_floatNumber);
    3c66:	6a 85       	ldd	r22, Y+10	; 0x0a
    3c68:	7b 85       	ldd	r23, Y+11	; 0x0b
    3c6a:	8c 85       	ldd	r24, Y+12	; 0x0c
    3c6c:	9d 85       	ldd	r25, Y+13	; 0x0d
    3c6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c72:	dc 01       	movw	r26, r24
    3c74:	cb 01       	movw	r24, r22
    3c76:	8d 83       	std	Y+5, r24	; 0x05
    3c78:	9e 83       	std	Y+6, r25	; 0x06
    3c7a:	af 83       	std	Y+7, r26	; 0x07
    3c7c:	b8 87       	std	Y+8, r27	; 0x08
	LCD_enuWritInteger(Local_u32int);
    3c7e:	8d 81       	ldd	r24, Y+5	; 0x05
    3c80:	9e 81       	ldd	r25, Y+6	; 0x06
    3c82:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <LCD_enuWritInteger>
	LCD_enuWriteCharacter('.');
    3c86:	8e e2       	ldi	r24, 0x2E	; 46
    3c88:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <LCD_enuWriteCharacter>
	u32 Local_u32float=(u32)(1000.0*(Copy_floatNumber-(u32)(Local_u32int)));
    3c8c:	6d 81       	ldd	r22, Y+5	; 0x05
    3c8e:	7e 81       	ldd	r23, Y+6	; 0x06
    3c90:	8f 81       	ldd	r24, Y+7	; 0x07
    3c92:	98 85       	ldd	r25, Y+8	; 0x08
    3c94:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3c98:	9b 01       	movw	r18, r22
    3c9a:	ac 01       	movw	r20, r24
    3c9c:	6a 85       	ldd	r22, Y+10	; 0x0a
    3c9e:	7b 85       	ldd	r23, Y+11	; 0x0b
    3ca0:	8c 85       	ldd	r24, Y+12	; 0x0c
    3ca2:	9d 85       	ldd	r25, Y+13	; 0x0d
    3ca4:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3ca8:	dc 01       	movw	r26, r24
    3caa:	cb 01       	movw	r24, r22
    3cac:	bc 01       	movw	r22, r24
    3cae:	cd 01       	movw	r24, r26
    3cb0:	20 e0       	ldi	r18, 0x00	; 0
    3cb2:	30 e0       	ldi	r19, 0x00	; 0
    3cb4:	4a e7       	ldi	r20, 0x7A	; 122
    3cb6:	54 e4       	ldi	r21, 0x44	; 68
    3cb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cbc:	dc 01       	movw	r26, r24
    3cbe:	cb 01       	movw	r24, r22
    3cc0:	bc 01       	movw	r22, r24
    3cc2:	cd 01       	movw	r24, r26
    3cc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cc8:	dc 01       	movw	r26, r24
    3cca:	cb 01       	movw	r24, r22
    3ccc:	89 83       	std	Y+1, r24	; 0x01
    3cce:	9a 83       	std	Y+2, r25	; 0x02
    3cd0:	ab 83       	std	Y+3, r26	; 0x03
    3cd2:	bc 83       	std	Y+4, r27	; 0x04
    LCD_enuWritInteger(Local_u32float);
    3cd4:	89 81       	ldd	r24, Y+1	; 0x01
    3cd6:	9a 81       	ldd	r25, Y+2	; 0x02
    3cd8:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <LCD_enuWritInteger>

	return Local_enuErrorState;
    3cdc:	89 85       	ldd	r24, Y+9	; 0x09
}
    3cde:	2d 96       	adiw	r28, 0x0d	; 13
    3ce0:	0f b6       	in	r0, 0x3f	; 63
    3ce2:	f8 94       	cli
    3ce4:	de bf       	out	0x3e, r29	; 62
    3ce6:	0f be       	out	0x3f, r0	; 63
    3ce8:	cd bf       	out	0x3d, r28	; 61
    3cea:	cf 91       	pop	r28
    3cec:	df 91       	pop	r29
    3cee:	08 95       	ret

00003cf0 <LCD_enuGoToPosition>:
ES_t LCD_enuGoToPosition(u8 Copy_u8Row,u8 Copy_u8Col){
    3cf0:	df 93       	push	r29
    3cf2:	cf 93       	push	r28
    3cf4:	00 d0       	rcall	.+0      	; 0x3cf6 <LCD_enuGoToPosition+0x6>
    3cf6:	0f 92       	push	r0
    3cf8:	cd b7       	in	r28, 0x3d	; 61
    3cfa:	de b7       	in	r29, 0x3e	; 62
    3cfc:	8a 83       	std	Y+2, r24	; 0x02
    3cfe:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState=ES_OK;
    3d00:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Row<=1&&Copy_u8Col<=16){
    3d02:	8a 81       	ldd	r24, Y+2	; 0x02
    3d04:	82 30       	cpi	r24, 0x02	; 2
    3d06:	98 f4       	brcc	.+38     	; 0x3d2e <LCD_enuGoToPosition+0x3e>
    3d08:	8b 81       	ldd	r24, Y+3	; 0x03
    3d0a:	81 31       	cpi	r24, 0x11	; 17
    3d0c:	80 f4       	brcc	.+32     	; 0x3d2e <LCD_enuGoToPosition+0x3e>
		if(Copy_u8Row==0){
    3d0e:	8a 81       	ldd	r24, Y+2	; 0x02
    3d10:	88 23       	and	r24, r24
    3d12:	29 f4       	brne	.+10     	; 0x3d1e <LCD_enuGoToPosition+0x2e>
			LCD_enuWriteCommand((0x80+Copy_u8Col));
    3d14:	8b 81       	ldd	r24, Y+3	; 0x03
    3d16:	80 58       	subi	r24, 0x80	; 128
    3d18:	0e 94 a4 1c 	call	0x3948	; 0x3948 <LCD_enuWriteCommand>
    3d1c:	0a c0       	rjmp	.+20     	; 0x3d32 <LCD_enuGoToPosition+0x42>
		}
		else if(Copy_u8Row==1){
    3d1e:	8a 81       	ldd	r24, Y+2	; 0x02
    3d20:	81 30       	cpi	r24, 0x01	; 1
    3d22:	39 f4       	brne	.+14     	; 0x3d32 <LCD_enuGoToPosition+0x42>
			LCD_enuWriteCommand((0xC0+Copy_u8Col));
    3d24:	8b 81       	ldd	r24, Y+3	; 0x03
    3d26:	80 54       	subi	r24, 0x40	; 64
    3d28:	0e 94 a4 1c 	call	0x3948	; 0x3948 <LCD_enuWriteCommand>
    3d2c:	02 c0       	rjmp	.+4      	; 0x3d32 <LCD_enuGoToPosition+0x42>
		}
	}
		else{
			Local_enuErrorState=ES_NOK;
    3d2e:	81 e0       	ldi	r24, 0x01	; 1
    3d30:	89 83       	std	Y+1, r24	; 0x01
		}
		return Local_enuErrorState;
    3d32:	89 81       	ldd	r24, Y+1	; 0x01

}
    3d34:	0f 90       	pop	r0
    3d36:	0f 90       	pop	r0
    3d38:	0f 90       	pop	r0
    3d3a:	cf 91       	pop	r28
    3d3c:	df 91       	pop	r29
    3d3e:	08 95       	ret

00003d40 <KEYPAD_enuInit>:
#include"../../LIBRARY/stdTypes.h"
#include"../../MCAL/DIO/DIO_int.h"
#include"KEYPAD_conf.h"
#include "KEYPAD_priv.h"
#include<util/delay.h>
ES_t KEYPAD_enuInit(void){
    3d40:	df 93       	push	r29
    3d42:	cf 93       	push	r28
    3d44:	0f 92       	push	r0
    3d46:	cd b7       	in	r28, 0x3d	; 61
    3d48:	de b7       	in	r29, 0x3e	; 62
	ES_t local_errorState=ES_NOK;
    3d4a:	81 e0       	ldi	r24, 0x01	; 1
    3d4c:	89 83       	std	Y+1, r24	; 0x01
	DIO_enuSetPinDirection(KEYPAD_u8C1_GRPOUP,KEYPAD_u8C1_PIN,DIO_u8OUTPUT);
    3d4e:	81 e0       	ldi	r24, 0x01	; 1
    3d50:	64 e0       	ldi	r22, 0x04	; 4
    3d52:	41 e0       	ldi	r20, 0x01	; 1
    3d54:	0e 94 77 12 	call	0x24ee	; 0x24ee <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(KEYPAD_u8C2_GRPOUP,KEYPAD_u8C2_PIN,DIO_u8OUTPUT);
    3d58:	81 e0       	ldi	r24, 0x01	; 1
    3d5a:	65 e0       	ldi	r22, 0x05	; 5
    3d5c:	41 e0       	ldi	r20, 0x01	; 1
    3d5e:	0e 94 77 12 	call	0x24ee	; 0x24ee <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(KEYPAD_u8C3_GRPOUP,KEYPAD_u8C3_PIN,DIO_u8OUTPUT);
    3d62:	81 e0       	ldi	r24, 0x01	; 1
    3d64:	66 e0       	ldi	r22, 0x06	; 6
    3d66:	41 e0       	ldi	r20, 0x01	; 1
    3d68:	0e 94 77 12 	call	0x24ee	; 0x24ee <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(KEYPAD_u8C4_GRPOUP,KEYPAD_u8C4_PIN,DIO_u8OUTPUT);
    3d6c:	81 e0       	ldi	r24, 0x01	; 1
    3d6e:	67 e0       	ldi	r22, 0x07	; 7
    3d70:	41 e0       	ldi	r20, 0x01	; 1
    3d72:	0e 94 77 12 	call	0x24ee	; 0x24ee <DIO_enuSetPinDirection>


	DIO_enuSetPinDirection(KEYPAD_u8R1_GRPOUP,KEYPAD_u8R1_PIN,DIO_u8INPUT);
    3d76:	82 e0       	ldi	r24, 0x02	; 2
    3d78:	62 e0       	ldi	r22, 0x02	; 2
    3d7a:	40 e0       	ldi	r20, 0x00	; 0
    3d7c:	0e 94 77 12 	call	0x24ee	; 0x24ee <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(KEYPAD_u8R2_GRPOUP,KEYPAD_u8R2_PIN,DIO_u8INPUT);
    3d80:	82 e0       	ldi	r24, 0x02	; 2
    3d82:	63 e0       	ldi	r22, 0x03	; 3
    3d84:	40 e0       	ldi	r20, 0x00	; 0
    3d86:	0e 94 77 12 	call	0x24ee	; 0x24ee <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(KEYPAD_u8R3_GRPOUP,KEYPAD_u8R3_PIN,DIO_u8INPUT);
    3d8a:	82 e0       	ldi	r24, 0x02	; 2
    3d8c:	64 e0       	ldi	r22, 0x04	; 4
    3d8e:	40 e0       	ldi	r20, 0x00	; 0
    3d90:	0e 94 77 12 	call	0x24ee	; 0x24ee <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(KEYPAD_u8R4_GRPOUP,KEYPAD_u8R4_PIN,DIO_u8INPUT);
    3d94:	82 e0       	ldi	r24, 0x02	; 2
    3d96:	65 e0       	ldi	r22, 0x05	; 5
    3d98:	40 e0       	ldi	r20, 0x00	; 0
    3d9a:	0e 94 77 12 	call	0x24ee	; 0x24ee <DIO_enuSetPinDirection>



	    DIO_enuSetPinValue(KEYPAD_u8C1_GRPOUP,KEYPAD_u8C1_PIN,DIO_u8HIGH);
    3d9e:	81 e0       	ldi	r24, 0x01	; 1
    3da0:	64 e0       	ldi	r22, 0x04	; 4
    3da2:	41 e0       	ldi	r20, 0x01	; 1
    3da4:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(KEYPAD_u8C2_GRPOUP,KEYPAD_u8C2_PIN,DIO_u8HIGH);
    3da8:	81 e0       	ldi	r24, 0x01	; 1
    3daa:	65 e0       	ldi	r22, 0x05	; 5
    3dac:	41 e0       	ldi	r20, 0x01	; 1
    3dae:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(KEYPAD_u8C3_GRPOUP,KEYPAD_u8C3_PIN,DIO_u8HIGH);
    3db2:	81 e0       	ldi	r24, 0x01	; 1
    3db4:	66 e0       	ldi	r22, 0x06	; 6
    3db6:	41 e0       	ldi	r20, 0x01	; 1
    3db8:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(KEYPAD_u8C4_GRPOUP,KEYPAD_u8C4_PIN,DIO_u8HIGH);
    3dbc:	81 e0       	ldi	r24, 0x01	; 1
    3dbe:	67 e0       	ldi	r22, 0x07	; 7
    3dc0:	41 e0       	ldi	r20, 0x01	; 1
    3dc2:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>


		DIO_enuSetPinValue(KEYPAD_u8R1_GRPOUP,KEYPAD_u8R1_PIN,DIO_u8PULL_UP);
    3dc6:	82 e0       	ldi	r24, 0x02	; 2
    3dc8:	62 e0       	ldi	r22, 0x02	; 2
    3dca:	41 e0       	ldi	r20, 0x01	; 1
    3dcc:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(KEYPAD_u8R2_GRPOUP,KEYPAD_u8R2_PIN,DIO_u8PULL_UP);
    3dd0:	82 e0       	ldi	r24, 0x02	; 2
    3dd2:	63 e0       	ldi	r22, 0x03	; 3
    3dd4:	41 e0       	ldi	r20, 0x01	; 1
    3dd6:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(KEYPAD_u8R3_GRPOUP,KEYPAD_u8R3_PIN,DIO_u8PULL_UP);
    3dda:	82 e0       	ldi	r24, 0x02	; 2
    3ddc:	64 e0       	ldi	r22, 0x04	; 4
    3dde:	41 e0       	ldi	r20, 0x01	; 1
    3de0:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(KEYPAD_u8R4_GRPOUP,KEYPAD_u8R4_PIN,DIO_u8PULL_UP);
    3de4:	82 e0       	ldi	r24, 0x02	; 2
    3de6:	65 e0       	ldi	r22, 0x05	; 5
    3de8:	41 e0       	ldi	r20, 0x01	; 1
    3dea:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>

		return local_errorState;
    3dee:	89 81       	ldd	r24, Y+1	; 0x01
}
    3df0:	0f 90       	pop	r0
    3df2:	cf 91       	pop	r28
    3df4:	df 91       	pop	r29
    3df6:	08 95       	ret

00003df8 <KEYPAD_enuGetPressedKey>:
ES_t KEYPAD_enuGetPressedKey(u8 * Copy_u8Value){
    3df8:	df 93       	push	r29
    3dfa:	cf 93       	push	r28
    3dfc:	cd b7       	in	r28, 0x3d	; 61
    3dfe:	de b7       	in	r29, 0x3e	; 62
    3e00:	ea 97       	sbiw	r28, 0x3a	; 58
    3e02:	0f b6       	in	r0, 0x3f	; 63
    3e04:	f8 94       	cli
    3e06:	de bf       	out	0x3e, r29	; 62
    3e08:	0f be       	out	0x3f, r0	; 63
    3e0a:	cd bf       	out	0x3d, r28	; 61
    3e0c:	9d ab       	std	Y+53, r25	; 0x35
    3e0e:	8c ab       	std	Y+52, r24	; 0x34
	ES_t local_enuerrorState=ES_NOK;
    3e10:	81 e0       	ldi	r24, 0x01	; 1
    3e12:	8a 8b       	std	Y+18, r24	; 0x12
	u8 Col_Group[]={KEYPAD_u8C1_GRPOUP,KEYPAD_u8C2_GRPOUP,KEYPAD_u8C3_GRPOUP,KEYPAD_u8C4_GRPOUP};
    3e14:	81 e0       	ldi	r24, 0x01	; 1
    3e16:	8b 8b       	std	Y+19, r24	; 0x13
    3e18:	81 e0       	ldi	r24, 0x01	; 1
    3e1a:	8c 8b       	std	Y+20, r24	; 0x14
    3e1c:	81 e0       	ldi	r24, 0x01	; 1
    3e1e:	8d 8b       	std	Y+21, r24	; 0x15
    3e20:	81 e0       	ldi	r24, 0x01	; 1
    3e22:	8e 8b       	std	Y+22, r24	; 0x16
	u8 Col_Pin[]={KEYPAD_u8C1_PIN,KEYPAD_u8C2_PIN,KEYPAD_u8C3_PIN,KEYPAD_u8C4_PIN};
    3e24:	84 e0       	ldi	r24, 0x04	; 4
    3e26:	8f 8b       	std	Y+23, r24	; 0x17
    3e28:	85 e0       	ldi	r24, 0x05	; 5
    3e2a:	88 8f       	std	Y+24, r24	; 0x18
    3e2c:	86 e0       	ldi	r24, 0x06	; 6
    3e2e:	89 8f       	std	Y+25, r24	; 0x19
    3e30:	87 e0       	ldi	r24, 0x07	; 7
    3e32:	8a 8f       	std	Y+26, r24	; 0x1a

	u8 Row_Group[]={KEYPAD_u8R1_GRPOUP,KEYPAD_u8R2_GRPOUP,KEYPAD_u8R3_GRPOUP,KEYPAD_u8R4_GRPOUP};
    3e34:	82 e0       	ldi	r24, 0x02	; 2
    3e36:	8b 8f       	std	Y+27, r24	; 0x1b
    3e38:	82 e0       	ldi	r24, 0x02	; 2
    3e3a:	8c 8f       	std	Y+28, r24	; 0x1c
    3e3c:	82 e0       	ldi	r24, 0x02	; 2
    3e3e:	8d 8f       	std	Y+29, r24	; 0x1d
    3e40:	82 e0       	ldi	r24, 0x02	; 2
    3e42:	8e 8f       	std	Y+30, r24	; 0x1e
	u8 Row_Pin[]={KEYPAD_u8R1_PIN,KEYPAD_u8R2_PIN,KEYPAD_u8R3_PIN,KEYPAD_u8R4_PIN};
    3e44:	82 e0       	ldi	r24, 0x02	; 2
    3e46:	8f 8f       	std	Y+31, r24	; 0x1f
    3e48:	83 e0       	ldi	r24, 0x03	; 3
    3e4a:	88 a3       	std	Y+32, r24	; 0x20
    3e4c:	84 e0       	ldi	r24, 0x04	; 4
    3e4e:	89 a3       	std	Y+33, r24	; 0x21
    3e50:	85 e0       	ldi	r24, 0x05	; 5
    3e52:	8a a3       	std	Y+34, r24	; 0x22
	// intile value to variable means neither button pressed
	*Copy_u8Value=0xff;
    3e54:	ec a9       	ldd	r30, Y+52	; 0x34
    3e56:	fd a9       	ldd	r31, Y+53	; 0x35
    3e58:	8f ef       	ldi	r24, 0xFF	; 255
    3e5a:	80 83       	st	Z, r24

	u8 local_Value=0;
    3e5c:	1b a2       	std	Y+35, r1	; 0x23
	u8 Col_Selector=0;
    3e5e:	19 8a       	std	Y+17, r1	; 0x11
	u8 Row_Selector=0;
    3e60:	18 8a       	std	Y+16, r1	; 0x10
	 		u8 flag =0;
    3e62:	1f 86       	std	Y+15, r1	; 0x0f
    3e64:	44 c1       	rjmp	.+648    	; 0x40ee <KEYPAD_enuGetPressedKey+0x2f6>
for(; Col_Selector<COL_NUM; Col_Selector++)
{
		DIO_enuSetPinValue(Col_Group[Col_Selector],Col_Pin[Col_Selector],DIO_u8LOW);
    3e66:	89 89       	ldd	r24, Y+17	; 0x11
    3e68:	28 2f       	mov	r18, r24
    3e6a:	30 e0       	ldi	r19, 0x00	; 0
    3e6c:	ce 01       	movw	r24, r28
    3e6e:	43 96       	adiw	r24, 0x13	; 19
    3e70:	fc 01       	movw	r30, r24
    3e72:	e2 0f       	add	r30, r18
    3e74:	f3 1f       	adc	r31, r19
    3e76:	40 81       	ld	r20, Z
    3e78:	89 89       	ldd	r24, Y+17	; 0x11
    3e7a:	28 2f       	mov	r18, r24
    3e7c:	30 e0       	ldi	r19, 0x00	; 0
    3e7e:	ce 01       	movw	r24, r28
    3e80:	47 96       	adiw	r24, 0x17	; 23
    3e82:	fc 01       	movw	r30, r24
    3e84:	e2 0f       	add	r30, r18
    3e86:	f3 1f       	adc	r31, r19
    3e88:	90 81       	ld	r25, Z
    3e8a:	84 2f       	mov	r24, r20
    3e8c:	69 2f       	mov	r22, r25
    3e8e:	40 e0       	ldi	r20, 0x00	; 0
    3e90:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>
		for(Row_Selector=0;Row_Selector<ROW_NUM;Row_Selector++){
    3e94:	18 8a       	std	Y+16, r1	; 0x10
    3e96:	08 c1       	rjmp	.+528    	; 0x40a8 <KEYPAD_enuGetPressedKey+0x2b0>
			DIO_enuGetPinValue(Row_Group[Row_Selector],Row_Pin[Row_Selector],&local_Value);
    3e98:	88 89       	ldd	r24, Y+16	; 0x10
    3e9a:	28 2f       	mov	r18, r24
    3e9c:	30 e0       	ldi	r19, 0x00	; 0
    3e9e:	ce 01       	movw	r24, r28
    3ea0:	4b 96       	adiw	r24, 0x1b	; 27
    3ea2:	fc 01       	movw	r30, r24
    3ea4:	e2 0f       	add	r30, r18
    3ea6:	f3 1f       	adc	r31, r19
    3ea8:	40 81       	ld	r20, Z
    3eaa:	88 89       	ldd	r24, Y+16	; 0x10
    3eac:	28 2f       	mov	r18, r24
    3eae:	30 e0       	ldi	r19, 0x00	; 0
    3eb0:	ce 01       	movw	r24, r28
    3eb2:	4f 96       	adiw	r24, 0x1f	; 31
    3eb4:	fc 01       	movw	r30, r24
    3eb6:	e2 0f       	add	r30, r18
    3eb8:	f3 1f       	adc	r31, r19
    3eba:	90 81       	ld	r25, Z
    3ebc:	9e 01       	movw	r18, r28
    3ebe:	2d 5d       	subi	r18, 0xDD	; 221
    3ec0:	3f 4f       	sbci	r19, 0xFF	; 255
    3ec2:	84 2f       	mov	r24, r20
    3ec4:	69 2f       	mov	r22, r25
    3ec6:	a9 01       	movw	r20, r18
    3ec8:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <DIO_enuGetPinValue>
			// confirm the button is pressed
			if(!local_Value){
    3ecc:	8b a1       	ldd	r24, Y+35	; 0x23
    3ece:	88 23       	and	r24, r24
    3ed0:	09 f0       	breq	.+2      	; 0x3ed4 <KEYPAD_enuGetPressedKey+0xdc>
    3ed2:	e7 c0       	rjmp	.+462    	; 0x40a2 <KEYPAD_enuGetPressedKey+0x2aa>
    3ed4:	80 e0       	ldi	r24, 0x00	; 0
    3ed6:	90 e0       	ldi	r25, 0x00	; 0
    3ed8:	a0 e2       	ldi	r26, 0x20	; 32
    3eda:	b1 e4       	ldi	r27, 0x41	; 65
    3edc:	8b 87       	std	Y+11, r24	; 0x0b
    3ede:	9c 87       	std	Y+12, r25	; 0x0c
    3ee0:	ad 87       	std	Y+13, r26	; 0x0d
    3ee2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ee4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ee6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ee8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3eea:	9e 85       	ldd	r25, Y+14	; 0x0e
    3eec:	20 e0       	ldi	r18, 0x00	; 0
    3eee:	30 e0       	ldi	r19, 0x00	; 0
    3ef0:	4a e7       	ldi	r20, 0x7A	; 122
    3ef2:	55 e4       	ldi	r21, 0x45	; 69
    3ef4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ef8:	dc 01       	movw	r26, r24
    3efa:	cb 01       	movw	r24, r22
    3efc:	8f 83       	std	Y+7, r24	; 0x07
    3efe:	98 87       	std	Y+8, r25	; 0x08
    3f00:	a9 87       	std	Y+9, r26	; 0x09
    3f02:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f04:	6f 81       	ldd	r22, Y+7	; 0x07
    3f06:	78 85       	ldd	r23, Y+8	; 0x08
    3f08:	89 85       	ldd	r24, Y+9	; 0x09
    3f0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f0c:	20 e0       	ldi	r18, 0x00	; 0
    3f0e:	30 e0       	ldi	r19, 0x00	; 0
    3f10:	40 e8       	ldi	r20, 0x80	; 128
    3f12:	5f e3       	ldi	r21, 0x3F	; 63
    3f14:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f18:	88 23       	and	r24, r24
    3f1a:	2c f4       	brge	.+10     	; 0x3f26 <KEYPAD_enuGetPressedKey+0x12e>
		__ticks = 1;
    3f1c:	81 e0       	ldi	r24, 0x01	; 1
    3f1e:	90 e0       	ldi	r25, 0x00	; 0
    3f20:	9e 83       	std	Y+6, r25	; 0x06
    3f22:	8d 83       	std	Y+5, r24	; 0x05
    3f24:	3f c0       	rjmp	.+126    	; 0x3fa4 <KEYPAD_enuGetPressedKey+0x1ac>
	else if (__tmp > 65535)
    3f26:	6f 81       	ldd	r22, Y+7	; 0x07
    3f28:	78 85       	ldd	r23, Y+8	; 0x08
    3f2a:	89 85       	ldd	r24, Y+9	; 0x09
    3f2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f2e:	20 e0       	ldi	r18, 0x00	; 0
    3f30:	3f ef       	ldi	r19, 0xFF	; 255
    3f32:	4f e7       	ldi	r20, 0x7F	; 127
    3f34:	57 e4       	ldi	r21, 0x47	; 71
    3f36:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f3a:	18 16       	cp	r1, r24
    3f3c:	4c f5       	brge	.+82     	; 0x3f90 <KEYPAD_enuGetPressedKey+0x198>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f40:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f42:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f44:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f46:	20 e0       	ldi	r18, 0x00	; 0
    3f48:	30 e0       	ldi	r19, 0x00	; 0
    3f4a:	40 e2       	ldi	r20, 0x20	; 32
    3f4c:	51 e4       	ldi	r21, 0x41	; 65
    3f4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f52:	dc 01       	movw	r26, r24
    3f54:	cb 01       	movw	r24, r22
    3f56:	bc 01       	movw	r22, r24
    3f58:	cd 01       	movw	r24, r26
    3f5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f5e:	dc 01       	movw	r26, r24
    3f60:	cb 01       	movw	r24, r22
    3f62:	9e 83       	std	Y+6, r25	; 0x06
    3f64:	8d 83       	std	Y+5, r24	; 0x05
    3f66:	0f c0       	rjmp	.+30     	; 0x3f86 <KEYPAD_enuGetPressedKey+0x18e>
    3f68:	80 e9       	ldi	r24, 0x90	; 144
    3f6a:	91 e0       	ldi	r25, 0x01	; 1
    3f6c:	9c 83       	std	Y+4, r25	; 0x04
    3f6e:	8b 83       	std	Y+3, r24	; 0x03
    3f70:	8b 81       	ldd	r24, Y+3	; 0x03
    3f72:	9c 81       	ldd	r25, Y+4	; 0x04
    3f74:	01 97       	sbiw	r24, 0x01	; 1
    3f76:	f1 f7       	brne	.-4      	; 0x3f74 <KEYPAD_enuGetPressedKey+0x17c>
    3f78:	9c 83       	std	Y+4, r25	; 0x04
    3f7a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f7c:	8d 81       	ldd	r24, Y+5	; 0x05
    3f7e:	9e 81       	ldd	r25, Y+6	; 0x06
    3f80:	01 97       	sbiw	r24, 0x01	; 1
    3f82:	9e 83       	std	Y+6, r25	; 0x06
    3f84:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f86:	8d 81       	ldd	r24, Y+5	; 0x05
    3f88:	9e 81       	ldd	r25, Y+6	; 0x06
    3f8a:	00 97       	sbiw	r24, 0x00	; 0
    3f8c:	69 f7       	brne	.-38     	; 0x3f68 <KEYPAD_enuGetPressedKey+0x170>
    3f8e:	14 c0       	rjmp	.+40     	; 0x3fb8 <KEYPAD_enuGetPressedKey+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f90:	6f 81       	ldd	r22, Y+7	; 0x07
    3f92:	78 85       	ldd	r23, Y+8	; 0x08
    3f94:	89 85       	ldd	r24, Y+9	; 0x09
    3f96:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f9c:	dc 01       	movw	r26, r24
    3f9e:	cb 01       	movw	r24, r22
    3fa0:	9e 83       	std	Y+6, r25	; 0x06
    3fa2:	8d 83       	std	Y+5, r24	; 0x05
    3fa4:	8d 81       	ldd	r24, Y+5	; 0x05
    3fa6:	9e 81       	ldd	r25, Y+6	; 0x06
    3fa8:	9a 83       	std	Y+2, r25	; 0x02
    3faa:	89 83       	std	Y+1, r24	; 0x01
    3fac:	89 81       	ldd	r24, Y+1	; 0x01
    3fae:	9a 81       	ldd	r25, Y+2	; 0x02
    3fb0:	01 97       	sbiw	r24, 0x01	; 1
    3fb2:	f1 f7       	brne	.-4      	; 0x3fb0 <KEYPAD_enuGetPressedKey+0x1b8>
    3fb4:	9a 83       	std	Y+2, r25	; 0x02
    3fb6:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(10);
				DIO_enuGetPinValue(Row_Group[Row_Selector],Row_Pin[Row_Selector],&local_Value);
    3fb8:	88 89       	ldd	r24, Y+16	; 0x10
    3fba:	28 2f       	mov	r18, r24
    3fbc:	30 e0       	ldi	r19, 0x00	; 0
    3fbe:	ce 01       	movw	r24, r28
    3fc0:	4b 96       	adiw	r24, 0x1b	; 27
    3fc2:	fc 01       	movw	r30, r24
    3fc4:	e2 0f       	add	r30, r18
    3fc6:	f3 1f       	adc	r31, r19
    3fc8:	40 81       	ld	r20, Z
    3fca:	88 89       	ldd	r24, Y+16	; 0x10
    3fcc:	28 2f       	mov	r18, r24
    3fce:	30 e0       	ldi	r19, 0x00	; 0
    3fd0:	ce 01       	movw	r24, r28
    3fd2:	4f 96       	adiw	r24, 0x1f	; 31
    3fd4:	fc 01       	movw	r30, r24
    3fd6:	e2 0f       	add	r30, r18
    3fd8:	f3 1f       	adc	r31, r19
    3fda:	90 81       	ld	r25, Z
    3fdc:	9e 01       	movw	r18, r28
    3fde:	2d 5d       	subi	r18, 0xDD	; 221
    3fe0:	3f 4f       	sbci	r19, 0xFF	; 255
    3fe2:	84 2f       	mov	r24, r20
    3fe4:	69 2f       	mov	r22, r25
    3fe6:	a9 01       	movw	r20, r18
    3fe8:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <DIO_enuGetPinValue>
				if(!local_Value){
    3fec:	8b a1       	ldd	r24, Y+35	; 0x23
    3fee:	88 23       	and	r24, r24
    3ff0:	09 f0       	breq	.+2      	; 0x3ff4 <KEYPAD_enuGetPressedKey+0x1fc>
    3ff2:	57 c0       	rjmp	.+174    	; 0x40a2 <KEYPAD_enuGetPressedKey+0x2aa>
    3ff4:	1a c0       	rjmp	.+52     	; 0x402a <KEYPAD_enuGetPressedKey+0x232>
					//prevent holding the button
					while(!local_Value){
						DIO_enuGetPinValue(Row_Group[Row_Selector],Row_Pin[Row_Selector],&local_Value);
    3ff6:	88 89       	ldd	r24, Y+16	; 0x10
    3ff8:	28 2f       	mov	r18, r24
    3ffa:	30 e0       	ldi	r19, 0x00	; 0
    3ffc:	ce 01       	movw	r24, r28
    3ffe:	4b 96       	adiw	r24, 0x1b	; 27
    4000:	fc 01       	movw	r30, r24
    4002:	e2 0f       	add	r30, r18
    4004:	f3 1f       	adc	r31, r19
    4006:	40 81       	ld	r20, Z
    4008:	88 89       	ldd	r24, Y+16	; 0x10
    400a:	28 2f       	mov	r18, r24
    400c:	30 e0       	ldi	r19, 0x00	; 0
    400e:	ce 01       	movw	r24, r28
    4010:	4f 96       	adiw	r24, 0x1f	; 31
    4012:	fc 01       	movw	r30, r24
    4014:	e2 0f       	add	r30, r18
    4016:	f3 1f       	adc	r31, r19
    4018:	90 81       	ld	r25, Z
    401a:	9e 01       	movw	r18, r28
    401c:	2d 5d       	subi	r18, 0xDD	; 221
    401e:	3f 4f       	sbci	r19, 0xFF	; 255
    4020:	84 2f       	mov	r24, r20
    4022:	69 2f       	mov	r22, r25
    4024:	a9 01       	movw	r20, r18
    4026:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <DIO_enuGetPinValue>
			if(!local_Value){
				_delay_ms(10);
				DIO_enuGetPinValue(Row_Group[Row_Selector],Row_Pin[Row_Selector],&local_Value);
				if(!local_Value){
					//prevent holding the button
					while(!local_Value){
    402a:	8b a1       	ldd	r24, Y+35	; 0x23
    402c:	88 23       	and	r24, r24
    402e:	19 f3       	breq	.-58     	; 0x3ff6 <KEYPAD_enuGetPressedKey+0x1fe>
						DIO_enuGetPinValue(Row_Group[Row_Selector],Row_Pin[Row_Selector],&local_Value);
					}
					u8 local_MatKeyPad[COL_NUM][ROW_NUM]=KEY_VALUES;
    4030:	ce 01       	movw	r24, r28
    4032:	84 96       	adiw	r24, 0x24	; 36
    4034:	9f ab       	std	Y+55, r25	; 0x37
    4036:	8e ab       	std	Y+54, r24	; 0x36
    4038:	eb e0       	ldi	r30, 0x0B	; 11
    403a:	f8 e0       	ldi	r31, 0x08	; 8
    403c:	f9 af       	std	Y+57, r31	; 0x39
    403e:	e8 af       	std	Y+56, r30	; 0x38
    4040:	f0 e1       	ldi	r31, 0x10	; 16
    4042:	fa af       	std	Y+58, r31	; 0x3a
    4044:	e8 ad       	ldd	r30, Y+56	; 0x38
    4046:	f9 ad       	ldd	r31, Y+57	; 0x39
    4048:	00 80       	ld	r0, Z
    404a:	88 ad       	ldd	r24, Y+56	; 0x38
    404c:	99 ad       	ldd	r25, Y+57	; 0x39
    404e:	01 96       	adiw	r24, 0x01	; 1
    4050:	99 af       	std	Y+57, r25	; 0x39
    4052:	88 af       	std	Y+56, r24	; 0x38
    4054:	ee a9       	ldd	r30, Y+54	; 0x36
    4056:	ff a9       	ldd	r31, Y+55	; 0x37
    4058:	00 82       	st	Z, r0
    405a:	8e a9       	ldd	r24, Y+54	; 0x36
    405c:	9f a9       	ldd	r25, Y+55	; 0x37
    405e:	01 96       	adiw	r24, 0x01	; 1
    4060:	9f ab       	std	Y+55, r25	; 0x37
    4062:	8e ab       	std	Y+54, r24	; 0x36
    4064:	9a ad       	ldd	r25, Y+58	; 0x3a
    4066:	91 50       	subi	r25, 0x01	; 1
    4068:	9a af       	std	Y+58, r25	; 0x3a
    406a:	ea ad       	ldd	r30, Y+58	; 0x3a
    406c:	ee 23       	and	r30, r30
    406e:	51 f7       	brne	.-44     	; 0x4044 <KEYPAD_enuGetPressedKey+0x24c>
					flag=1;
    4070:	81 e0       	ldi	r24, 0x01	; 1
    4072:	8f 87       	std	Y+15, r24	; 0x0f
				*Copy_u8Value=local_MatKeyPad[Row_Selector][Col_Selector];
    4074:	88 89       	ldd	r24, Y+16	; 0x10
    4076:	28 2f       	mov	r18, r24
    4078:	30 e0       	ldi	r19, 0x00	; 0
    407a:	89 89       	ldd	r24, Y+17	; 0x11
    407c:	48 2f       	mov	r20, r24
    407e:	50 e0       	ldi	r21, 0x00	; 0
    4080:	22 0f       	add	r18, r18
    4082:	33 1f       	adc	r19, r19
    4084:	22 0f       	add	r18, r18
    4086:	33 1f       	adc	r19, r19
    4088:	ce 01       	movw	r24, r28
    408a:	01 96       	adiw	r24, 0x01	; 1
    408c:	82 0f       	add	r24, r18
    408e:	93 1f       	adc	r25, r19
    4090:	84 0f       	add	r24, r20
    4092:	95 1f       	adc	r25, r21
    4094:	fc 01       	movw	r30, r24
    4096:	b3 96       	adiw	r30, 0x23	; 35
    4098:	80 81       	ld	r24, Z
    409a:	ec a9       	ldd	r30, Y+52	; 0x34
    409c:	fd a9       	ldd	r31, Y+53	; 0x35
    409e:	80 83       	st	Z, r24
    40a0:	07 c0       	rjmp	.+14     	; 0x40b0 <KEYPAD_enuGetPressedKey+0x2b8>
	u8 Row_Selector=0;
	 		u8 flag =0;
for(; Col_Selector<COL_NUM; Col_Selector++)
{
		DIO_enuSetPinValue(Col_Group[Col_Selector],Col_Pin[Col_Selector],DIO_u8LOW);
		for(Row_Selector=0;Row_Selector<ROW_NUM;Row_Selector++){
    40a2:	88 89       	ldd	r24, Y+16	; 0x10
    40a4:	8f 5f       	subi	r24, 0xFF	; 255
    40a6:	88 8b       	std	Y+16, r24	; 0x10
    40a8:	88 89       	ldd	r24, Y+16	; 0x10
    40aa:	84 30       	cpi	r24, 0x04	; 4
    40ac:	08 f4       	brcc	.+2      	; 0x40b0 <KEYPAD_enuGetPressedKey+0x2b8>
    40ae:	f4 ce       	rjmp	.-536    	; 0x3e98 <KEYPAD_enuGetPressedKey+0xa0>
				*Copy_u8Value=local_MatKeyPad[Row_Selector][Col_Selector];
				break;
				}
			}
			}
			DIO_enuSetPinValue(Col_Group[Col_Selector],Col_Pin[Col_Selector],DIO_u8HIGH);
    40b0:	89 89       	ldd	r24, Y+17	; 0x11
    40b2:	28 2f       	mov	r18, r24
    40b4:	30 e0       	ldi	r19, 0x00	; 0
    40b6:	ce 01       	movw	r24, r28
    40b8:	43 96       	adiw	r24, 0x13	; 19
    40ba:	fc 01       	movw	r30, r24
    40bc:	e2 0f       	add	r30, r18
    40be:	f3 1f       	adc	r31, r19
    40c0:	40 81       	ld	r20, Z
    40c2:	89 89       	ldd	r24, Y+17	; 0x11
    40c4:	28 2f       	mov	r18, r24
    40c6:	30 e0       	ldi	r19, 0x00	; 0
    40c8:	ce 01       	movw	r24, r28
    40ca:	47 96       	adiw	r24, 0x17	; 23
    40cc:	fc 01       	movw	r30, r24
    40ce:	e2 0f       	add	r30, r18
    40d0:	f3 1f       	adc	r31, r19
    40d2:	90 81       	ld	r25, Z
    40d4:	84 2f       	mov	r24, r20
    40d6:	69 2f       	mov	r22, r25
    40d8:	41 e0       	ldi	r20, 0x01	; 1
    40da:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>
			if(flag){
    40de:	8f 85       	ldd	r24, Y+15	; 0x0f
    40e0:	88 23       	and	r24, r24
    40e2:	11 f0       	breq	.+4      	; 0x40e8 <KEYPAD_enuGetPressedKey+0x2f0>
				local_enuerrorState=ES_OK;
    40e4:	1a 8a       	std	Y+18, r1	; 0x12
    40e6:	07 c0       	rjmp	.+14     	; 0x40f6 <KEYPAD_enuGetPressedKey+0x2fe>

	u8 local_Value=0;
	u8 Col_Selector=0;
	u8 Row_Selector=0;
	 		u8 flag =0;
for(; Col_Selector<COL_NUM; Col_Selector++)
    40e8:	89 89       	ldd	r24, Y+17	; 0x11
    40ea:	8f 5f       	subi	r24, 0xFF	; 255
    40ec:	89 8b       	std	Y+17, r24	; 0x11
    40ee:	89 89       	ldd	r24, Y+17	; 0x11
    40f0:	84 30       	cpi	r24, 0x04	; 4
    40f2:	08 f4       	brcc	.+2      	; 0x40f6 <KEYPAD_enuGetPressedKey+0x2fe>
    40f4:	b8 ce       	rjmp	.-656    	; 0x3e66 <KEYPAD_enuGetPressedKey+0x6e>
			if(flag){
				local_enuerrorState=ES_OK;
				break;
			}
		}
		return local_enuerrorState;
    40f6:	8a 89       	ldd	r24, Y+18	; 0x12
}
    40f8:	ea 96       	adiw	r28, 0x3a	; 58
    40fa:	0f b6       	in	r0, 0x3f	; 63
    40fc:	f8 94       	cli
    40fe:	de bf       	out	0x3e, r29	; 62
    4100:	0f be       	out	0x3f, r0	; 63
    4102:	cd bf       	out	0x3d, r28	; 61
    4104:	cf 91       	pop	r28
    4106:	df 91       	pop	r29
    4108:	08 95       	ret

0000410a <HC05_enuInit>:
#include "../../LIBRARY/stdTypes.h"
#include"../../MCAL/UART/UART_int.h"
#include"HC05_priv.h"
#include "HC05_conf.h"

ES_t HC05_enuInit(void){
    410a:	df 93       	push	r29
    410c:	cf 93       	push	r28
    410e:	0f 92       	push	r0
    4110:	cd b7       	in	r28, 0x3d	; 61
    4112:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_OK;
    4114:	19 82       	std	Y+1, r1	; 0x01
UART_enuInit();
    4116:	0e 94 17 07 	call	0xe2e	; 0xe2e <UART_enuInit>
return Local_enuErrorState;
    411a:	89 81       	ldd	r24, Y+1	; 0x01
}
    411c:	0f 90       	pop	r0
    411e:	cf 91       	pop	r28
    4120:	df 91       	pop	r29
    4122:	08 95       	ret

00004124 <HC05_enuSendString>:
ES_t HC05_enuSendString(const char *Copy_Data){
    4124:	df 93       	push	r29
    4126:	cf 93       	push	r28
    4128:	00 d0       	rcall	.+0      	; 0x412a <HC05_enuSendString+0x6>
    412a:	0f 92       	push	r0
    412c:	cd b7       	in	r28, 0x3d	; 61
    412e:	de b7       	in	r29, 0x3e	; 62
    4130:	9b 83       	std	Y+3, r25	; 0x03
    4132:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_OK;
    4134:	19 82       	std	Y+1, r1	; 0x01
	UART_enuSendString(Copy_Data);
    4136:	8a 81       	ldd	r24, Y+2	; 0x02
    4138:	9b 81       	ldd	r25, Y+3	; 0x03
    413a:	0e 94 a1 07 	call	0xf42	; 0xf42 <UART_enuSendString>
	return Local_enuErrorState;
    413e:	89 81       	ldd	r24, Y+1	; 0x01
}
    4140:	0f 90       	pop	r0
    4142:	0f 90       	pop	r0
    4144:	0f 90       	pop	r0
    4146:	cf 91       	pop	r28
    4148:	df 91       	pop	r29
    414a:	08 95       	ret

0000414c <HC05_enuRecieveString>:
ES_t HC05_enuRecieveString(u8* Copy_u8Data){
    414c:	df 93       	push	r29
    414e:	cf 93       	push	r28
    4150:	00 d0       	rcall	.+0      	; 0x4152 <HC05_enuRecieveString+0x6>
    4152:	0f 92       	push	r0
    4154:	cd b7       	in	r28, 0x3d	; 61
    4156:	de b7       	in	r29, 0x3e	; 62
    4158:	9b 83       	std	Y+3, r25	; 0x03
    415a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_OK;
    415c:	19 82       	std	Y+1, r1	; 0x01
	UART_enuRecieveString(Copy_u8Data);
    415e:	8a 81       	ldd	r24, Y+2	; 0x02
    4160:	9b 81       	ldd	r25, Y+3	; 0x03
    4162:	0e 94 cf 07 	call	0xf9e	; 0xf9e <UART_enuRecieveString>
	return Local_enuErrorState;
    4166:	89 81       	ldd	r24, Y+1	; 0x01
}
    4168:	0f 90       	pop	r0
    416a:	0f 90       	pop	r0
    416c:	0f 90       	pop	r0
    416e:	cf 91       	pop	r28
    4170:	df 91       	pop	r29
    4172:	08 95       	ret

00004174 <HC05_enuRecieveChar>:
ES_t HC05_enuRecieveChar(u8* Copy_u8Data){
    4174:	df 93       	push	r29
    4176:	cf 93       	push	r28
    4178:	00 d0       	rcall	.+0      	; 0x417a <HC05_enuRecieveChar+0x6>
    417a:	0f 92       	push	r0
    417c:	cd b7       	in	r28, 0x3d	; 61
    417e:	de b7       	in	r29, 0x3e	; 62
    4180:	9b 83       	std	Y+3, r25	; 0x03
    4182:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_OK;
    4184:	19 82       	std	Y+1, r1	; 0x01
	UART_enuRecieveChar(Copy_u8Data);
    4186:	8a 81       	ldd	r24, Y+2	; 0x02
    4188:	9b 81       	ldd	r25, Y+3	; 0x03
    418a:	0e 94 85 07 	call	0xf0a	; 0xf0a <UART_enuRecieveChar>
	return Local_enuErrorState;
    418e:	89 81       	ldd	r24, Y+1	; 0x01
}
    4190:	0f 90       	pop	r0
    4192:	0f 90       	pop	r0
    4194:	0f 90       	pop	r0
    4196:	cf 91       	pop	r28
    4198:	df 91       	pop	r29
    419a:	08 95       	ret

0000419c <EEPROM_enuInit>:
#include"../../MCAL/IIC/IIC_int.h"
#include"EEPROM_priv.h"
#include "EEPROM_conf.h"

ES_t EEPROM_enuInit(void)
{
    419c:	df 93       	push	r29
    419e:	cf 93       	push	r28
    41a0:	0f 92       	push	r0
    41a2:	cd b7       	in	r28, 0x3d	; 61
    41a4:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_OK;
    41a6:	19 82       	std	Y+1, r1	; 0x01
	IIC_enuInit();
    41a8:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <IIC_enuInit>
	return Local_enuErrorState;
    41ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    41ae:	0f 90       	pop	r0
    41b0:	cf 91       	pop	r28
    41b2:	df 91       	pop	r29
    41b4:	08 95       	ret

000041b6 <EEPROM_enuWrite>:
ES_t EEPROM_enuWrite(u8 Copy_u8Data,u8 Copy_u8PageAddress,u8 Copy_u8ByteAddress)
{
    41b6:	df 93       	push	r29
    41b8:	cf 93       	push	r28
    41ba:	00 d0       	rcall	.+0      	; 0x41bc <EEPROM_enuWrite+0x6>
    41bc:	00 d0       	rcall	.+0      	; 0x41be <EEPROM_enuWrite+0x8>
    41be:	cd b7       	in	r28, 0x3d	; 61
    41c0:	de b7       	in	r29, 0x3e	; 62
    41c2:	8a 83       	std	Y+2, r24	; 0x02
    41c4:	6b 83       	std	Y+3, r22	; 0x03
    41c6:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState=ES_OK;
    41c8:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PageAddress < 8)
    41ca:	8b 81       	ldd	r24, Y+3	; 0x03
    41cc:	88 30       	cpi	r24, 0x08	; 8
    41ce:	78 f4       	brcc	.+30     	; 0x41ee <EEPROM_enuWrite+0x38>
	{
		IIC_enuStartCondition();
    41d0:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <IIC_enuStartCondition>
		IIC_enuSendSlaveAddressWrite((0x50 | Copy_u8PageAddress));
    41d4:	8b 81       	ldd	r24, Y+3	; 0x03
    41d6:	80 65       	ori	r24, 0x50	; 80
    41d8:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <IIC_enuSendSlaveAddressWrite>
		IIC_enuSendData(Copy_u8ByteAddress);
    41dc:	8c 81       	ldd	r24, Y+4	; 0x04
    41de:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <IIC_enuSendData>
		IIC_enuSendData(Copy_u8Data);
    41e2:	8a 81       	ldd	r24, Y+2	; 0x02
    41e4:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <IIC_enuSendData>
		IIC_enuStopCondition();
    41e8:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <IIC_enuStopCondition>
    41ec:	02 c0       	rjmp	.+4      	; 0x41f2 <EEPROM_enuWrite+0x3c>
	}
	else{
		Local_enuErrorState=ES_OUT_OF_RANGE;
    41ee:	82 e0       	ldi	r24, 0x02	; 2
    41f0:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    41f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    41f4:	0f 90       	pop	r0
    41f6:	0f 90       	pop	r0
    41f8:	0f 90       	pop	r0
    41fa:	0f 90       	pop	r0
    41fc:	cf 91       	pop	r28
    41fe:	df 91       	pop	r29
    4200:	08 95       	ret

00004202 <EEPROM_enuRead>:
ES_t EEPROM_enuRead(u8* Copy_u8Data,u8 Copy_u8PageAddress,u8 Copy_u8ByteAddress)
{
    4202:	df 93       	push	r29
    4204:	cf 93       	push	r28
    4206:	00 d0       	rcall	.+0      	; 0x4208 <EEPROM_enuRead+0x6>
    4208:	00 d0       	rcall	.+0      	; 0x420a <EEPROM_enuRead+0x8>
    420a:	00 d0       	rcall	.+0      	; 0x420c <EEPROM_enuRead+0xa>
    420c:	cd b7       	in	r28, 0x3d	; 61
    420e:	de b7       	in	r29, 0x3e	; 62
    4210:	9c 83       	std	Y+4, r25	; 0x04
    4212:	8b 83       	std	Y+3, r24	; 0x03
    4214:	6d 83       	std	Y+5, r22	; 0x05
    4216:	4e 83       	std	Y+6, r20	; 0x06
	ES_t Local_enuErrorState=ES_OK;
    4218:	19 82       	std	Y+1, r1	; 0x01
		if(Copy_u8PageAddress < 8)
    421a:	8d 81       	ldd	r24, Y+5	; 0x05
    421c:	88 30       	cpi	r24, 0x08	; 8
    421e:	d8 f4       	brcc	.+54     	; 0x4256 <EEPROM_enuRead+0x54>
		{
	u8 Local_u8Data = 0;
    4220:	1a 82       	std	Y+2, r1	; 0x02
	IIC_enuStartCondition();
    4222:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <IIC_enuStartCondition>
	IIC_enuSendSlaveAddressWrite((0x50 | Copy_u8PageAddress));
    4226:	8d 81       	ldd	r24, Y+5	; 0x05
    4228:	80 65       	ori	r24, 0x50	; 80
    422a:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <IIC_enuSendSlaveAddressWrite>
	IIC_enuSendData(Copy_u8ByteAddress);
    422e:	8e 81       	ldd	r24, Y+6	; 0x06
    4230:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <IIC_enuSendData>
	IIC_enuRepeatedStart();
    4234:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <IIC_enuRepeatedStart>
	IIC_enuSendSlaveAddressRead((0x50 | Copy_u8PageAddress));
    4238:	8d 81       	ldd	r24, Y+5	; 0x05
    423a:	80 65       	ori	r24, 0x50	; 80
    423c:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <IIC_enuSendSlaveAddressRead>
	IIC_enuReadDataNoAck(&Local_u8Data);
    4240:	ce 01       	movw	r24, r28
    4242:	02 96       	adiw	r24, 0x02	; 2
    4244:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <IIC_enuReadDataNoAck>
	*Copy_u8Data=Local_u8Data;
    4248:	8a 81       	ldd	r24, Y+2	; 0x02
    424a:	eb 81       	ldd	r30, Y+3	; 0x03
    424c:	fc 81       	ldd	r31, Y+4	; 0x04
    424e:	80 83       	st	Z, r24
	IIC_enuStopCondition();
    4250:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <IIC_enuStopCondition>
    4254:	02 c0       	rjmp	.+4      	; 0x425a <EEPROM_enuRead+0x58>
		}
		else{
				Local_enuErrorState=ES_OUT_OF_RANGE;
    4256:	82 e0       	ldi	r24, 0x02	; 2
    4258:	89 83       	std	Y+1, r24	; 0x01
			}

	return Local_enuErrorState;
    425a:	89 81       	ldd	r24, Y+1	; 0x01
}
    425c:	26 96       	adiw	r28, 0x06	; 6
    425e:	0f b6       	in	r0, 0x3f	; 63
    4260:	f8 94       	cli
    4262:	de bf       	out	0x3e, r29	; 62
    4264:	0f be       	out	0x3f, r0	; 63
    4266:	cd bf       	out	0x3d, r28	; 61
    4268:	cf 91       	pop	r28
    426a:	df 91       	pop	r29
    426c:	08 95       	ret

0000426e <DIMMER_LAMP_enuInit>:
#include"../../LIBRARY/stdTypes.h"
#include"../../MCAL/TIMER1/TIMER1_int.h"
#include"DIMMER_LAMP_priv.h"
#include"DIMMER_LAMP_conf.h"
#include "../../MCAL/DIO/DIO_int.h"
ES_t DIMMER_LAMP_enuInit(void){
    426e:	df 93       	push	r29
    4270:	cf 93       	push	r28
    4272:	0f 92       	push	r0
    4274:	cd b7       	in	r28, 0x3d	; 61
    4276:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_OK;
    4278:	19 82       	std	Y+1, r1	; 0x01
	Pwm1_enuInit();
    427a:	0e 94 0e 08 	call	0x101c	; 0x101c <Pwm1_enuInit>
	Pwm1_enuSetFrequency(50);
    427e:	82 e3       	ldi	r24, 0x32	; 50
    4280:	90 e0       	ldi	r25, 0x00	; 0
    4282:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <Pwm1_enuSetFrequency>

	return Local_enuErrorState;
    4286:	89 81       	ldd	r24, Y+1	; 0x01
}
    4288:	0f 90       	pop	r0
    428a:	cf 91       	pop	r28
    428c:	df 91       	pop	r29
    428e:	08 95       	ret

00004290 <DIMMER_LAMP_enuSetIntensity>:
ES_t DIMMER_LAMP_enuSetIntensity(u8 Copy_u8Intensity){
    4290:	df 93       	push	r29
    4292:	cf 93       	push	r28
    4294:	00 d0       	rcall	.+0      	; 0x4296 <DIMMER_LAMP_enuSetIntensity+0x6>
    4296:	cd b7       	in	r28, 0x3d	; 61
    4298:	de b7       	in	r29, 0x3e	; 62
    429a:	8a 83       	std	Y+2, r24	; 0x02
ES_t Local_enuErrorState=ES_OK;
    429c:	19 82       	std	Y+1, r1	; 0x01
if(Copy_u8Intensity<0){
	Copy_u8Intensity=0;
}
else if(Copy_u8Intensity>100){
    429e:	8a 81       	ldd	r24, Y+2	; 0x02
    42a0:	85 36       	cpi	r24, 0x65	; 101
    42a2:	10 f0       	brcs	.+4      	; 0x42a8 <DIMMER_LAMP_enuSetIntensity+0x18>
	Copy_u8Intensity=100;
    42a4:	84 e6       	ldi	r24, 0x64	; 100
    42a6:	8a 83       	std	Y+2, r24	; 0x02
}
Pwm1_enuSetDutyCycleChannel_1(Copy_u8Intensity);
    42a8:	8a 81       	ldd	r24, Y+2	; 0x02
    42aa:	0e 94 89 08 	call	0x1112	; 0x1112 <Pwm1_enuSetDutyCycleChannel_1>
Pwm1_enuStart();
    42ae:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <Pwm1_enuStart>
return Local_enuErrorState;
    42b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    42b4:	0f 90       	pop	r0
    42b6:	0f 90       	pop	r0
    42b8:	cf 91       	pop	r28
    42ba:	df 91       	pop	r29
    42bc:	08 95       	ret

000042be <DIMMER_LAMP_enuStart>:
ES_t DIMMER_LAMP_enuStart(void){
    42be:	df 93       	push	r29
    42c0:	cf 93       	push	r28
    42c2:	cd b7       	in	r28, 0x3d	; 61
    42c4:	de b7       	in	r29, 0x3e	; 62
	Pwm1_enuStart();
    42c6:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <Pwm1_enuStart>
	DIO_enuSetPinValue(Dimmer_GROUP,Dimmer_PIN,DIO_u8HIGH);
    42ca:	83 e0       	ldi	r24, 0x03	; 3
    42cc:	65 e0       	ldi	r22, 0x05	; 5
    42ce:	41 e0       	ldi	r20, 0x01	; 1
    42d0:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>

	return ES_OK;
    42d4:	80 e0       	ldi	r24, 0x00	; 0
}
    42d6:	cf 91       	pop	r28
    42d8:	df 91       	pop	r29
    42da:	08 95       	ret

000042dc <DIMMER_LAMP_enuStop>:
ES_t DIMMER_LAMP_enuStop(void){
    42dc:	df 93       	push	r29
    42de:	cf 93       	push	r28
    42e0:	cd b7       	in	r28, 0x3d	; 61
    42e2:	de b7       	in	r29, 0x3e	; 62

    Pwm1_enuStop();
    42e4:	0e 94 0a 09 	call	0x1214	; 0x1214 <Pwm1_enuStop>
	return ES_OK;
    42e8:	80 e0       	ldi	r24, 0x00	; 0
}
    42ea:	cf 91       	pop	r28
    42ec:	df 91       	pop	r29
    42ee:	08 95       	ret

000042f0 <DC_MOTOR_enuInit>:
#include"../../MCAL/DIO/DIO_int.h"
#include"../../MCAL/TIMER0/TIMER0_int.h"
#include"DC_MOTOR_priv.h"
#include "DC_MOTOR_conf.h"

ES_t DC_MOTOR_enuInit(void){
    42f0:	df 93       	push	r29
    42f2:	cf 93       	push	r28
    42f4:	0f 92       	push	r0
    42f6:	cd b7       	in	r28, 0x3d	; 61
    42f8:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_EnuErrorState=ES_OK;
    42fa:	19 82       	std	Y+1, r1	; 0x01
	DIO_enuSetPinDirection(DC_MOTOR_PIN0_GROUP,DC_MOTOR_PIN0_PIN,DIO_u8OUTPUT);
    42fc:	83 e0       	ldi	r24, 0x03	; 3
    42fe:	66 e0       	ldi	r22, 0x06	; 6
    4300:	41 e0       	ldi	r20, 0x01	; 1
    4302:	0e 94 77 12 	call	0x24ee	; 0x24ee <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DC_MOTOR_PIN1_GROUP,DC_MOTOR_PIN1_PIN,DIO_u8OUTPUT);
    4306:	83 e0       	ldi	r24, 0x03	; 3
    4308:	67 e0       	ldi	r22, 0x07	; 7
    430a:	41 e0       	ldi	r20, 0x01	; 1
    430c:	0e 94 77 12 	call	0x24ee	; 0x24ee <DIO_enuSetPinDirection>
	//PWM0_enuInit();
	return Local_EnuErrorState;
    4310:	89 81       	ldd	r24, Y+1	; 0x01
}
    4312:	0f 90       	pop	r0
    4314:	cf 91       	pop	r28
    4316:	df 91       	pop	r29
    4318:	08 95       	ret

0000431a <DC_MOTOR_enuSetDirection>:
ES_t DC_MOTOR_enuSetDirection(u8 Copy_u8Direction){
    431a:	df 93       	push	r29
    431c:	cf 93       	push	r28
    431e:	00 d0       	rcall	.+0      	; 0x4320 <DC_MOTOR_enuSetDirection+0x6>
    4320:	cd b7       	in	r28, 0x3d	; 61
    4322:	de b7       	in	r29, 0x3e	; 62
    4324:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_EnuErrorState=ES_OK;
    4326:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8Direction==CLOCKWISE){
    4328:	8a 81       	ldd	r24, Y+2	; 0x02
    432a:	81 30       	cpi	r24, 0x01	; 1
    432c:	59 f4       	brne	.+22     	; 0x4344 <DC_MOTOR_enuSetDirection+0x2a>
		DIO_enuSetPinValue(DC_MOTOR_PIN0_GROUP,DC_MOTOR_PIN0_PIN,DIO_u8HIGH);
    432e:	83 e0       	ldi	r24, 0x03	; 3
    4330:	66 e0       	ldi	r22, 0x06	; 6
    4332:	41 e0       	ldi	r20, 0x01	; 1
    4334:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(DC_MOTOR_PIN1_GROUP,DC_MOTOR_PIN1_PIN,DIO_u8LOW);
    4338:	83 e0       	ldi	r24, 0x03	; 3
    433a:	67 e0       	ldi	r22, 0x07	; 7
    433c:	40 e0       	ldi	r20, 0x00	; 0
    433e:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>
    4342:	10 c0       	rjmp	.+32     	; 0x4364 <DC_MOTOR_enuSetDirection+0x4a>
	}
	else if (Copy_u8Direction==ANTI_CLOCKWISE){
    4344:	8a 81       	ldd	r24, Y+2	; 0x02
    4346:	82 30       	cpi	r24, 0x02	; 2
    4348:	59 f4       	brne	.+22     	; 0x4360 <DC_MOTOR_enuSetDirection+0x46>
		DIO_enuSetPinValue(DC_MOTOR_PIN0_GROUP,DC_MOTOR_PIN0_PIN,DIO_u8LOW);
    434a:	83 e0       	ldi	r24, 0x03	; 3
    434c:	66 e0       	ldi	r22, 0x06	; 6
    434e:	40 e0       	ldi	r20, 0x00	; 0
    4350:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>
				DIO_enuSetPinValue(DC_MOTOR_PIN1_GROUP,DC_MOTOR_PIN1_PIN,DIO_u8HIGH);
    4354:	83 e0       	ldi	r24, 0x03	; 3
    4356:	67 e0       	ldi	r22, 0x07	; 7
    4358:	41 e0       	ldi	r20, 0x01	; 1
    435a:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>
    435e:	02 c0       	rjmp	.+4      	; 0x4364 <DC_MOTOR_enuSetDirection+0x4a>
	}
	else
		Local_EnuErrorState=ES_NOK;
    4360:	81 e0       	ldi	r24, 0x01	; 1
    4362:	89 83       	std	Y+1, r24	; 0x01
	return Local_EnuErrorState;
    4364:	89 81       	ldd	r24, Y+1	; 0x01
}
    4366:	0f 90       	pop	r0
    4368:	0f 90       	pop	r0
    436a:	cf 91       	pop	r28
    436c:	df 91       	pop	r29
    436e:	08 95       	ret

00004370 <DC_MOTOR_enuSetSpeed>:
ES_t DC_MOTOR_enuSetSpeed(u8 Copy_u8Speed){
    4370:	df 93       	push	r29
    4372:	cf 93       	push	r28
    4374:	00 d0       	rcall	.+0      	; 0x4376 <DC_MOTOR_enuSetSpeed+0x6>
    4376:	cd b7       	in	r28, 0x3d	; 61
    4378:	de b7       	in	r29, 0x3e	; 62
    437a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_EnuErrorState=ES_OK;
    437c:	19 82       	std	Y+1, r1	; 0x01
	PWM0_enuSetDuty(Copy_u8Speed);
    437e:	8a 81       	ldd	r24, Y+2	; 0x02
    4380:	0e 94 9c 0a 	call	0x1538	; 0x1538 <PWM0_enuSetDuty>
	return Local_EnuErrorState;
    4384:	89 81       	ldd	r24, Y+1	; 0x01

}
    4386:	0f 90       	pop	r0
    4388:	0f 90       	pop	r0
    438a:	cf 91       	pop	r28
    438c:	df 91       	pop	r29
    438e:	08 95       	ret

00004390 <DC_MOTOR_enuStart>:
ES_t DC_MOTOR_enuStart(void){
    4390:	df 93       	push	r29
    4392:	cf 93       	push	r28
    4394:	0f 92       	push	r0
    4396:	cd b7       	in	r28, 0x3d	; 61
    4398:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_EnuErrorState=ES_OK;
    439a:	19 82       	std	Y+1, r1	; 0x01
	PWM0_enuStart();
    439c:	0e 94 ae 0a 	call	0x155c	; 0x155c <PWM0_enuStart>

	return Local_EnuErrorState;
    43a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    43a2:	0f 90       	pop	r0
    43a4:	cf 91       	pop	r28
    43a6:	df 91       	pop	r29
    43a8:	08 95       	ret

000043aa <DC_MOTORenuStop>:
ES_t DC_MOTORenuStop(void){
    43aa:	df 93       	push	r29
    43ac:	cf 93       	push	r28
    43ae:	0f 92       	push	r0
    43b0:	cd b7       	in	r28, 0x3d	; 61
    43b2:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_EnuErrorState=ES_OK;
    43b4:	19 82       	std	Y+1, r1	; 0x01
	PWM0_enuStop();
    43b6:	0e 94 b8 0a 	call	0x1570	; 0x1570 <PWM0_enuStop>
	DIO_enuSetPinValue(DC_MOTOR_PIN0_GROUP,DC_MOTOR_PIN0_PIN,DIO_u8LOW);
    43ba:	83 e0       	ldi	r24, 0x03	; 3
    43bc:	66 e0       	ldi	r22, 0x06	; 6
    43be:	40 e0       	ldi	r20, 0x00	; 0
    43c0:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(DC_MOTOR_PIN1_GROUP,DC_MOTOR_PIN1_PIN,DIO_u8LOW);
    43c4:	83 e0       	ldi	r24, 0x03	; 3
    43c6:	67 e0       	ldi	r22, 0x07	; 7
    43c8:	40 e0       	ldi	r20, 0x00	; 0
    43ca:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>
	return Local_EnuErrorState;
    43ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    43d0:	0f 90       	pop	r0
    43d2:	cf 91       	pop	r28
    43d4:	df 91       	pop	r29
    43d6:	08 95       	ret

000043d8 <BUZZER_enuInit>:
#include"../../LIBRARY/stdTypes.h"
#include"../../MCAL/DIO/DIO_int.h"
#include"BUZZER_priv.h"
#include"BUZZER_conf.h"

ES_t BUZZER_enuInit(void){
    43d8:	df 93       	push	r29
    43da:	cf 93       	push	r28
    43dc:	0f 92       	push	r0
    43de:	cd b7       	in	r28, 0x3d	; 61
    43e0:	de b7       	in	r29, 0x3e	; 62
ES_t Local_enuErrorState=ES_OK;
    43e2:	19 82       	std	Y+1, r1	; 0x01
DIO_enuSetPinDirection(BUZZER_GROUP,BUZZER_PIN,DIO_u8OUTPUT);
    43e4:	82 e0       	ldi	r24, 0x02	; 2
    43e6:	67 e0       	ldi	r22, 0x07	; 7
    43e8:	41 e0       	ldi	r20, 0x01	; 1
    43ea:	0e 94 77 12 	call	0x24ee	; 0x24ee <DIO_enuSetPinDirection>
return Local_enuErrorState;
    43ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    43f0:	0f 90       	pop	r0
    43f2:	cf 91       	pop	r28
    43f4:	df 91       	pop	r29
    43f6:	08 95       	ret

000043f8 <BUZZER_enuON>:
ES_t BUZZER_enuON(void){
    43f8:	df 93       	push	r29
    43fa:	cf 93       	push	r28
    43fc:	0f 92       	push	r0
    43fe:	cd b7       	in	r28, 0x3d	; 61
    4400:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_OK;
    4402:	19 82       	std	Y+1, r1	; 0x01
	DIO_enuSetPinValue(BUZZER_GROUP,BUZZER_PIN,DIO_u8HIGH);
    4404:	82 e0       	ldi	r24, 0x02	; 2
    4406:	67 e0       	ldi	r22, 0x07	; 7
    4408:	41 e0       	ldi	r20, 0x01	; 1
    440a:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>
	return Local_enuErrorState;
    440e:	89 81       	ldd	r24, Y+1	; 0x01
}
    4410:	0f 90       	pop	r0
    4412:	cf 91       	pop	r28
    4414:	df 91       	pop	r29
    4416:	08 95       	ret

00004418 <BUZZER_enuOFF>:
ES_t BUZZER_enuOFF(void){
    4418:	df 93       	push	r29
    441a:	cf 93       	push	r28
    441c:	0f 92       	push	r0
    441e:	cd b7       	in	r28, 0x3d	; 61
    4420:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_OK;
    4422:	19 82       	std	Y+1, r1	; 0x01
		DIO_enuSetPinValue(BUZZER_GROUP,BUZZER_PIN,DIO_u8LOW);
    4424:	82 e0       	ldi	r24, 0x02	; 2
    4426:	67 e0       	ldi	r22, 0x07	; 7
    4428:	40 e0       	ldi	r20, 0x00	; 0
    442a:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>
		return Local_enuErrorState;
    442e:	89 81       	ldd	r24, Y+1	; 0x01
}
    4430:	0f 90       	pop	r0
    4432:	cf 91       	pop	r28
    4434:	df 91       	pop	r29
    4436:	08 95       	ret

00004438 <BUZZER_enuFireAlarm>:
ES_t BUZZER_enuFireAlarm(void){
    4438:	df 93       	push	r29
    443a:	cf 93       	push	r28
    443c:	cd b7       	in	r28, 0x3d	; 61
    443e:	de b7       	in	r29, 0x3e	; 62
    4440:	6d 97       	sbiw	r28, 0x1d	; 29
    4442:	0f b6       	in	r0, 0x3f	; 63
    4444:	f8 94       	cli
    4446:	de bf       	out	0x3e, r29	; 62
    4448:	0f be       	out	0x3f, r0	; 63
    444a:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState=ES_OK;
    444c:	1d 8e       	std	Y+29, r1	; 0x1d
	BUZZER_enuON();
    444e:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <BUZZER_enuON>
    4452:	80 e0       	ldi	r24, 0x00	; 0
    4454:	90 e0       	ldi	r25, 0x00	; 0
    4456:	a8 e4       	ldi	r26, 0x48	; 72
    4458:	b2 e4       	ldi	r27, 0x42	; 66
    445a:	89 8f       	std	Y+25, r24	; 0x19
    445c:	9a 8f       	std	Y+26, r25	; 0x1a
    445e:	ab 8f       	std	Y+27, r26	; 0x1b
    4460:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4462:	69 8d       	ldd	r22, Y+25	; 0x19
    4464:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4466:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4468:	9c 8d       	ldd	r25, Y+28	; 0x1c
    446a:	20 e0       	ldi	r18, 0x00	; 0
    446c:	30 e0       	ldi	r19, 0x00	; 0
    446e:	4a e7       	ldi	r20, 0x7A	; 122
    4470:	55 e4       	ldi	r21, 0x45	; 69
    4472:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4476:	dc 01       	movw	r26, r24
    4478:	cb 01       	movw	r24, r22
    447a:	8d 8b       	std	Y+21, r24	; 0x15
    447c:	9e 8b       	std	Y+22, r25	; 0x16
    447e:	af 8b       	std	Y+23, r26	; 0x17
    4480:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4482:	6d 89       	ldd	r22, Y+21	; 0x15
    4484:	7e 89       	ldd	r23, Y+22	; 0x16
    4486:	8f 89       	ldd	r24, Y+23	; 0x17
    4488:	98 8d       	ldd	r25, Y+24	; 0x18
    448a:	20 e0       	ldi	r18, 0x00	; 0
    448c:	30 e0       	ldi	r19, 0x00	; 0
    448e:	40 e8       	ldi	r20, 0x80	; 128
    4490:	5f e3       	ldi	r21, 0x3F	; 63
    4492:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4496:	88 23       	and	r24, r24
    4498:	2c f4       	brge	.+10     	; 0x44a4 <BUZZER_enuFireAlarm+0x6c>
		__ticks = 1;
    449a:	81 e0       	ldi	r24, 0x01	; 1
    449c:	90 e0       	ldi	r25, 0x00	; 0
    449e:	9c 8b       	std	Y+20, r25	; 0x14
    44a0:	8b 8b       	std	Y+19, r24	; 0x13
    44a2:	3f c0       	rjmp	.+126    	; 0x4522 <BUZZER_enuFireAlarm+0xea>
	else if (__tmp > 65535)
    44a4:	6d 89       	ldd	r22, Y+21	; 0x15
    44a6:	7e 89       	ldd	r23, Y+22	; 0x16
    44a8:	8f 89       	ldd	r24, Y+23	; 0x17
    44aa:	98 8d       	ldd	r25, Y+24	; 0x18
    44ac:	20 e0       	ldi	r18, 0x00	; 0
    44ae:	3f ef       	ldi	r19, 0xFF	; 255
    44b0:	4f e7       	ldi	r20, 0x7F	; 127
    44b2:	57 e4       	ldi	r21, 0x47	; 71
    44b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    44b8:	18 16       	cp	r1, r24
    44ba:	4c f5       	brge	.+82     	; 0x450e <BUZZER_enuFireAlarm+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44bc:	69 8d       	ldd	r22, Y+25	; 0x19
    44be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    44c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    44c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    44c4:	20 e0       	ldi	r18, 0x00	; 0
    44c6:	30 e0       	ldi	r19, 0x00	; 0
    44c8:	40 e2       	ldi	r20, 0x20	; 32
    44ca:	51 e4       	ldi	r21, 0x41	; 65
    44cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44d0:	dc 01       	movw	r26, r24
    44d2:	cb 01       	movw	r24, r22
    44d4:	bc 01       	movw	r22, r24
    44d6:	cd 01       	movw	r24, r26
    44d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44dc:	dc 01       	movw	r26, r24
    44de:	cb 01       	movw	r24, r22
    44e0:	9c 8b       	std	Y+20, r25	; 0x14
    44e2:	8b 8b       	std	Y+19, r24	; 0x13
    44e4:	0f c0       	rjmp	.+30     	; 0x4504 <BUZZER_enuFireAlarm+0xcc>
    44e6:	80 e9       	ldi	r24, 0x90	; 144
    44e8:	91 e0       	ldi	r25, 0x01	; 1
    44ea:	9a 8b       	std	Y+18, r25	; 0x12
    44ec:	89 8b       	std	Y+17, r24	; 0x11
    44ee:	89 89       	ldd	r24, Y+17	; 0x11
    44f0:	9a 89       	ldd	r25, Y+18	; 0x12
    44f2:	01 97       	sbiw	r24, 0x01	; 1
    44f4:	f1 f7       	brne	.-4      	; 0x44f2 <BUZZER_enuFireAlarm+0xba>
    44f6:	9a 8b       	std	Y+18, r25	; 0x12
    44f8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44fa:	8b 89       	ldd	r24, Y+19	; 0x13
    44fc:	9c 89       	ldd	r25, Y+20	; 0x14
    44fe:	01 97       	sbiw	r24, 0x01	; 1
    4500:	9c 8b       	std	Y+20, r25	; 0x14
    4502:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4504:	8b 89       	ldd	r24, Y+19	; 0x13
    4506:	9c 89       	ldd	r25, Y+20	; 0x14
    4508:	00 97       	sbiw	r24, 0x00	; 0
    450a:	69 f7       	brne	.-38     	; 0x44e6 <BUZZER_enuFireAlarm+0xae>
    450c:	14 c0       	rjmp	.+40     	; 0x4536 <BUZZER_enuFireAlarm+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    450e:	6d 89       	ldd	r22, Y+21	; 0x15
    4510:	7e 89       	ldd	r23, Y+22	; 0x16
    4512:	8f 89       	ldd	r24, Y+23	; 0x17
    4514:	98 8d       	ldd	r25, Y+24	; 0x18
    4516:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    451a:	dc 01       	movw	r26, r24
    451c:	cb 01       	movw	r24, r22
    451e:	9c 8b       	std	Y+20, r25	; 0x14
    4520:	8b 8b       	std	Y+19, r24	; 0x13
    4522:	8b 89       	ldd	r24, Y+19	; 0x13
    4524:	9c 89       	ldd	r25, Y+20	; 0x14
    4526:	98 8b       	std	Y+16, r25	; 0x10
    4528:	8f 87       	std	Y+15, r24	; 0x0f
    452a:	8f 85       	ldd	r24, Y+15	; 0x0f
    452c:	98 89       	ldd	r25, Y+16	; 0x10
    452e:	01 97       	sbiw	r24, 0x01	; 1
    4530:	f1 f7       	brne	.-4      	; 0x452e <BUZZER_enuFireAlarm+0xf6>
    4532:	98 8b       	std	Y+16, r25	; 0x10
    4534:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(50);
	BUZZER_enuOFF();
    4536:	0e 94 0c 22 	call	0x4418	; 0x4418 <BUZZER_enuOFF>
    453a:	80 e0       	ldi	r24, 0x00	; 0
    453c:	90 e0       	ldi	r25, 0x00	; 0
    453e:	a8 e4       	ldi	r26, 0x48	; 72
    4540:	b2 e4       	ldi	r27, 0x42	; 66
    4542:	8b 87       	std	Y+11, r24	; 0x0b
    4544:	9c 87       	std	Y+12, r25	; 0x0c
    4546:	ad 87       	std	Y+13, r26	; 0x0d
    4548:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    454a:	6b 85       	ldd	r22, Y+11	; 0x0b
    454c:	7c 85       	ldd	r23, Y+12	; 0x0c
    454e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4550:	9e 85       	ldd	r25, Y+14	; 0x0e
    4552:	20 e0       	ldi	r18, 0x00	; 0
    4554:	30 e0       	ldi	r19, 0x00	; 0
    4556:	4a e7       	ldi	r20, 0x7A	; 122
    4558:	55 e4       	ldi	r21, 0x45	; 69
    455a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    455e:	dc 01       	movw	r26, r24
    4560:	cb 01       	movw	r24, r22
    4562:	8f 83       	std	Y+7, r24	; 0x07
    4564:	98 87       	std	Y+8, r25	; 0x08
    4566:	a9 87       	std	Y+9, r26	; 0x09
    4568:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    456a:	6f 81       	ldd	r22, Y+7	; 0x07
    456c:	78 85       	ldd	r23, Y+8	; 0x08
    456e:	89 85       	ldd	r24, Y+9	; 0x09
    4570:	9a 85       	ldd	r25, Y+10	; 0x0a
    4572:	20 e0       	ldi	r18, 0x00	; 0
    4574:	30 e0       	ldi	r19, 0x00	; 0
    4576:	40 e8       	ldi	r20, 0x80	; 128
    4578:	5f e3       	ldi	r21, 0x3F	; 63
    457a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    457e:	88 23       	and	r24, r24
    4580:	2c f4       	brge	.+10     	; 0x458c <BUZZER_enuFireAlarm+0x154>
		__ticks = 1;
    4582:	81 e0       	ldi	r24, 0x01	; 1
    4584:	90 e0       	ldi	r25, 0x00	; 0
    4586:	9e 83       	std	Y+6, r25	; 0x06
    4588:	8d 83       	std	Y+5, r24	; 0x05
    458a:	3f c0       	rjmp	.+126    	; 0x460a <BUZZER_enuFireAlarm+0x1d2>
	else if (__tmp > 65535)
    458c:	6f 81       	ldd	r22, Y+7	; 0x07
    458e:	78 85       	ldd	r23, Y+8	; 0x08
    4590:	89 85       	ldd	r24, Y+9	; 0x09
    4592:	9a 85       	ldd	r25, Y+10	; 0x0a
    4594:	20 e0       	ldi	r18, 0x00	; 0
    4596:	3f ef       	ldi	r19, 0xFF	; 255
    4598:	4f e7       	ldi	r20, 0x7F	; 127
    459a:	57 e4       	ldi	r21, 0x47	; 71
    459c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    45a0:	18 16       	cp	r1, r24
    45a2:	4c f5       	brge	.+82     	; 0x45f6 <BUZZER_enuFireAlarm+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    45a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    45a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    45aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    45ac:	20 e0       	ldi	r18, 0x00	; 0
    45ae:	30 e0       	ldi	r19, 0x00	; 0
    45b0:	40 e2       	ldi	r20, 0x20	; 32
    45b2:	51 e4       	ldi	r21, 0x41	; 65
    45b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45b8:	dc 01       	movw	r26, r24
    45ba:	cb 01       	movw	r24, r22
    45bc:	bc 01       	movw	r22, r24
    45be:	cd 01       	movw	r24, r26
    45c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45c4:	dc 01       	movw	r26, r24
    45c6:	cb 01       	movw	r24, r22
    45c8:	9e 83       	std	Y+6, r25	; 0x06
    45ca:	8d 83       	std	Y+5, r24	; 0x05
    45cc:	0f c0       	rjmp	.+30     	; 0x45ec <BUZZER_enuFireAlarm+0x1b4>
    45ce:	80 e9       	ldi	r24, 0x90	; 144
    45d0:	91 e0       	ldi	r25, 0x01	; 1
    45d2:	9c 83       	std	Y+4, r25	; 0x04
    45d4:	8b 83       	std	Y+3, r24	; 0x03
    45d6:	8b 81       	ldd	r24, Y+3	; 0x03
    45d8:	9c 81       	ldd	r25, Y+4	; 0x04
    45da:	01 97       	sbiw	r24, 0x01	; 1
    45dc:	f1 f7       	brne	.-4      	; 0x45da <BUZZER_enuFireAlarm+0x1a2>
    45de:	9c 83       	std	Y+4, r25	; 0x04
    45e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45e2:	8d 81       	ldd	r24, Y+5	; 0x05
    45e4:	9e 81       	ldd	r25, Y+6	; 0x06
    45e6:	01 97       	sbiw	r24, 0x01	; 1
    45e8:	9e 83       	std	Y+6, r25	; 0x06
    45ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45ec:	8d 81       	ldd	r24, Y+5	; 0x05
    45ee:	9e 81       	ldd	r25, Y+6	; 0x06
    45f0:	00 97       	sbiw	r24, 0x00	; 0
    45f2:	69 f7       	brne	.-38     	; 0x45ce <BUZZER_enuFireAlarm+0x196>
    45f4:	14 c0       	rjmp	.+40     	; 0x461e <BUZZER_enuFireAlarm+0x1e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45f6:	6f 81       	ldd	r22, Y+7	; 0x07
    45f8:	78 85       	ldd	r23, Y+8	; 0x08
    45fa:	89 85       	ldd	r24, Y+9	; 0x09
    45fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    45fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4602:	dc 01       	movw	r26, r24
    4604:	cb 01       	movw	r24, r22
    4606:	9e 83       	std	Y+6, r25	; 0x06
    4608:	8d 83       	std	Y+5, r24	; 0x05
    460a:	8d 81       	ldd	r24, Y+5	; 0x05
    460c:	9e 81       	ldd	r25, Y+6	; 0x06
    460e:	9a 83       	std	Y+2, r25	; 0x02
    4610:	89 83       	std	Y+1, r24	; 0x01
    4612:	89 81       	ldd	r24, Y+1	; 0x01
    4614:	9a 81       	ldd	r25, Y+2	; 0x02
    4616:	01 97       	sbiw	r24, 0x01	; 1
    4618:	f1 f7       	brne	.-4      	; 0x4616 <BUZZER_enuFireAlarm+0x1de>
    461a:	9a 83       	std	Y+2, r25	; 0x02
    461c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
	return Local_enuErrorState;
    461e:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    4620:	6d 96       	adiw	r28, 0x1d	; 29
    4622:	0f b6       	in	r0, 0x3f	; 63
    4624:	f8 94       	cli
    4626:	de bf       	out	0x3e, r29	; 62
    4628:	0f be       	out	0x3f, r0	; 63
    462a:	cd bf       	out	0x3d, r28	; 61
    462c:	cf 91       	pop	r28
    462e:	df 91       	pop	r29
    4630:	08 95       	ret

00004632 <BUTTON_enuInit>:
#include"../../MCAL/DIO/DIO_int.h"
#include "BUTTON_priv.h"
#include "BUTTON_conf.h"
#include <util/delay.h>

ES_t BUTTON_enuInit(void){
    4632:	df 93       	push	r29
    4634:	cf 93       	push	r28
    4636:	0f 92       	push	r0
    4638:	cd b7       	in	r28, 0x3d	; 61
    463a:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_OK;
    463c:	19 82       	std	Y+1, r1	; 0x01
	DIO_enuSetPinDirection(BUTTON_GROUP,BUTTON_PIN,DIO_u8INPUT);
    463e:	83 e0       	ldi	r24, 0x03	; 3
    4640:	62 e0       	ldi	r22, 0x02	; 2
    4642:	40 e0       	ldi	r20, 0x00	; 0
    4644:	0e 94 77 12 	call	0x24ee	; 0x24ee <DIO_enuSetPinDirection>
	DIO_enuSetPinValue(BUTTON_GROUP,BUTTON_PIN,DIO_u8FLOAT);
    4648:	83 e0       	ldi	r24, 0x03	; 3
    464a:	62 e0       	ldi	r22, 0x02	; 2
    464c:	40 e0       	ldi	r20, 0x00	; 0
    464e:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DIO_enuSetPinValue>
	return Local_enuErrorState;
    4652:	89 81       	ldd	r24, Y+1	; 0x01
}
    4654:	0f 90       	pop	r0
    4656:	cf 91       	pop	r28
    4658:	df 91       	pop	r29
    465a:	08 95       	ret

0000465c <BUTTON_enuGetValue>:
ES_t BUTTON_enuGetValue(u8 * Copy_u8Value){
    465c:	df 93       	push	r29
    465e:	cf 93       	push	r28
    4660:	cd b7       	in	r28, 0x3d	; 61
    4662:	de b7       	in	r29, 0x3e	; 62
    4664:	62 97       	sbiw	r28, 0x12	; 18
    4666:	0f b6       	in	r0, 0x3f	; 63
    4668:	f8 94       	cli
    466a:	de bf       	out	0x3e, r29	; 62
    466c:	0f be       	out	0x3f, r0	; 63
    466e:	cd bf       	out	0x3d, r28	; 61
    4670:	9a 8b       	std	Y+18, r25	; 0x12
    4672:	89 8b       	std	Y+17, r24	; 0x11
	ES_t Local_enuErrorState=ES_OK;
    4674:	1f 86       	std	Y+15, r1	; 0x0f
	u8 Local_u8Value=0;
    4676:	18 8a       	std	Y+16, r1	; 0x10
			DIO_enuGetPinValue(BUTTON_GROUP,BUTTON_PIN,&Local_u8Value);
    4678:	9e 01       	movw	r18, r28
    467a:	20 5f       	subi	r18, 0xF0	; 240
    467c:	3f 4f       	sbci	r19, 0xFF	; 255
    467e:	83 e0       	ldi	r24, 0x03	; 3
    4680:	62 e0       	ldi	r22, 0x02	; 2
    4682:	a9 01       	movw	r20, r18
    4684:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <DIO_enuGetPinValue>
			if(Local_u8Value){
    4688:	88 89       	ldd	r24, Y+16	; 0x10
    468a:	88 23       	and	r24, r24
    468c:	09 f4       	brne	.+2      	; 0x4690 <BUTTON_enuGetValue+0x34>
    468e:	7a c0       	rjmp	.+244    	; 0x4784 <BUTTON_enuGetValue+0x128>
    4690:	80 e0       	ldi	r24, 0x00	; 0
    4692:	90 e0       	ldi	r25, 0x00	; 0
    4694:	a0 e2       	ldi	r26, 0x20	; 32
    4696:	b1 e4       	ldi	r27, 0x41	; 65
    4698:	8b 87       	std	Y+11, r24	; 0x0b
    469a:	9c 87       	std	Y+12, r25	; 0x0c
    469c:	ad 87       	std	Y+13, r26	; 0x0d
    469e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    46a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    46a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    46a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    46a8:	20 e0       	ldi	r18, 0x00	; 0
    46aa:	30 e0       	ldi	r19, 0x00	; 0
    46ac:	4a e7       	ldi	r20, 0x7A	; 122
    46ae:	55 e4       	ldi	r21, 0x45	; 69
    46b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46b4:	dc 01       	movw	r26, r24
    46b6:	cb 01       	movw	r24, r22
    46b8:	8f 83       	std	Y+7, r24	; 0x07
    46ba:	98 87       	std	Y+8, r25	; 0x08
    46bc:	a9 87       	std	Y+9, r26	; 0x09
    46be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    46c0:	6f 81       	ldd	r22, Y+7	; 0x07
    46c2:	78 85       	ldd	r23, Y+8	; 0x08
    46c4:	89 85       	ldd	r24, Y+9	; 0x09
    46c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    46c8:	20 e0       	ldi	r18, 0x00	; 0
    46ca:	30 e0       	ldi	r19, 0x00	; 0
    46cc:	40 e8       	ldi	r20, 0x80	; 128
    46ce:	5f e3       	ldi	r21, 0x3F	; 63
    46d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    46d4:	88 23       	and	r24, r24
    46d6:	2c f4       	brge	.+10     	; 0x46e2 <BUTTON_enuGetValue+0x86>
		__ticks = 1;
    46d8:	81 e0       	ldi	r24, 0x01	; 1
    46da:	90 e0       	ldi	r25, 0x00	; 0
    46dc:	9e 83       	std	Y+6, r25	; 0x06
    46de:	8d 83       	std	Y+5, r24	; 0x05
    46e0:	3f c0       	rjmp	.+126    	; 0x4760 <BUTTON_enuGetValue+0x104>
	else if (__tmp > 65535)
    46e2:	6f 81       	ldd	r22, Y+7	; 0x07
    46e4:	78 85       	ldd	r23, Y+8	; 0x08
    46e6:	89 85       	ldd	r24, Y+9	; 0x09
    46e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    46ea:	20 e0       	ldi	r18, 0x00	; 0
    46ec:	3f ef       	ldi	r19, 0xFF	; 255
    46ee:	4f e7       	ldi	r20, 0x7F	; 127
    46f0:	57 e4       	ldi	r21, 0x47	; 71
    46f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    46f6:	18 16       	cp	r1, r24
    46f8:	4c f5       	brge	.+82     	; 0x474c <BUTTON_enuGetValue+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    46fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    46fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    4700:	9e 85       	ldd	r25, Y+14	; 0x0e
    4702:	20 e0       	ldi	r18, 0x00	; 0
    4704:	30 e0       	ldi	r19, 0x00	; 0
    4706:	40 e2       	ldi	r20, 0x20	; 32
    4708:	51 e4       	ldi	r21, 0x41	; 65
    470a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    470e:	dc 01       	movw	r26, r24
    4710:	cb 01       	movw	r24, r22
    4712:	bc 01       	movw	r22, r24
    4714:	cd 01       	movw	r24, r26
    4716:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    471a:	dc 01       	movw	r26, r24
    471c:	cb 01       	movw	r24, r22
    471e:	9e 83       	std	Y+6, r25	; 0x06
    4720:	8d 83       	std	Y+5, r24	; 0x05
    4722:	0f c0       	rjmp	.+30     	; 0x4742 <BUTTON_enuGetValue+0xe6>
    4724:	80 e9       	ldi	r24, 0x90	; 144
    4726:	91 e0       	ldi	r25, 0x01	; 1
    4728:	9c 83       	std	Y+4, r25	; 0x04
    472a:	8b 83       	std	Y+3, r24	; 0x03
    472c:	8b 81       	ldd	r24, Y+3	; 0x03
    472e:	9c 81       	ldd	r25, Y+4	; 0x04
    4730:	01 97       	sbiw	r24, 0x01	; 1
    4732:	f1 f7       	brne	.-4      	; 0x4730 <BUTTON_enuGetValue+0xd4>
    4734:	9c 83       	std	Y+4, r25	; 0x04
    4736:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4738:	8d 81       	ldd	r24, Y+5	; 0x05
    473a:	9e 81       	ldd	r25, Y+6	; 0x06
    473c:	01 97       	sbiw	r24, 0x01	; 1
    473e:	9e 83       	std	Y+6, r25	; 0x06
    4740:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4742:	8d 81       	ldd	r24, Y+5	; 0x05
    4744:	9e 81       	ldd	r25, Y+6	; 0x06
    4746:	00 97       	sbiw	r24, 0x00	; 0
    4748:	69 f7       	brne	.-38     	; 0x4724 <BUTTON_enuGetValue+0xc8>
    474a:	14 c0       	rjmp	.+40     	; 0x4774 <BUTTON_enuGetValue+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    474c:	6f 81       	ldd	r22, Y+7	; 0x07
    474e:	78 85       	ldd	r23, Y+8	; 0x08
    4750:	89 85       	ldd	r24, Y+9	; 0x09
    4752:	9a 85       	ldd	r25, Y+10	; 0x0a
    4754:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4758:	dc 01       	movw	r26, r24
    475a:	cb 01       	movw	r24, r22
    475c:	9e 83       	std	Y+6, r25	; 0x06
    475e:	8d 83       	std	Y+5, r24	; 0x05
    4760:	8d 81       	ldd	r24, Y+5	; 0x05
    4762:	9e 81       	ldd	r25, Y+6	; 0x06
    4764:	9a 83       	std	Y+2, r25	; 0x02
    4766:	89 83       	std	Y+1, r24	; 0x01
    4768:	89 81       	ldd	r24, Y+1	; 0x01
    476a:	9a 81       	ldd	r25, Y+2	; 0x02
    476c:	01 97       	sbiw	r24, 0x01	; 1
    476e:	f1 f7       	brne	.-4      	; 0x476c <BUTTON_enuGetValue+0x110>
    4770:	9a 83       	std	Y+2, r25	; 0x02
    4772:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(10);
				DIO_enuGetPinValue(BUTTON_GROUP,BUTTON_PIN,&Local_u8Value);
    4774:	9e 01       	movw	r18, r28
    4776:	20 5f       	subi	r18, 0xF0	; 240
    4778:	3f 4f       	sbci	r19, 0xFF	; 255
    477a:	83 e0       	ldi	r24, 0x03	; 3
    477c:	62 e0       	ldi	r22, 0x02	; 2
    477e:	a9 01       	movw	r20, r18
    4780:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <DIO_enuGetPinValue>


			}
	*Copy_u8Value=Local_u8Value;
    4784:	88 89       	ldd	r24, Y+16	; 0x10
    4786:	e9 89       	ldd	r30, Y+17	; 0x11
    4788:	fa 89       	ldd	r31, Y+18	; 0x12
    478a:	80 83       	st	Z, r24
	return Local_enuErrorState;
    478c:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    478e:	62 96       	adiw	r28, 0x12	; 18
    4790:	0f b6       	in	r0, 0x3f	; 63
    4792:	f8 94       	cli
    4794:	de bf       	out	0x3e, r29	; 62
    4796:	0f be       	out	0x3f, r0	; 63
    4798:	cd bf       	out	0x3d, r28	; 61
    479a:	cf 91       	pop	r28
    479c:	df 91       	pop	r29
    479e:	08 95       	ret

000047a0 <main>:

	// GLOBAL VARIABLE
	u8 STATE=WELCOM_PAGE;   // THIS variable to determine the state (user -admin-login -no data recived)
	u8 Max_Num_Users=5;

int main(){
    47a0:	0f 93       	push	r16
    47a2:	df 93       	push	r29
    47a4:	cf 93       	push	r28
    47a6:	cd b7       	in	r28, 0x3d	; 61
    47a8:	de b7       	in	r29, 0x3e	; 62
    47aa:	c4 55       	subi	r28, 0x54	; 84
    47ac:	d0 40       	sbci	r29, 0x00	; 0
    47ae:	0f b6       	in	r0, 0x3f	; 63
    47b0:	f8 94       	cli
    47b2:	de bf       	out	0x3e, r29	; 62
    47b4:	0f be       	out	0x3f, r0	; 63
    47b6:	cd bf       	out	0x3d, r28	; 61
  /**************** init***************/

	LCD_enuInit();
    47b8:	0e 94 35 1b 	call	0x366a	; 0x366a <LCD_enuInit>

	KEYPAD_enuInit();
    47bc:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <KEYPAD_enuInit>
	GIE_enuEnable();
    47c0:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <GIE_enuEnable>
	ADC_enuInit();
    47c4:	0e 94 67 15 	call	0x2ace	; 0x2ace <ADC_enuInit>
	DC_MOTOR_enuInit();
    47c8:	0e 94 78 21 	call	0x42f0	; 0x42f0 <DC_MOTOR_enuInit>
	SERVO_MOTOR_enuInit();
    47cc:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <SERVO_MOTOR_enuInit>
	//DIMMER_LAMP_enuInit();
	RELAY_enuInit();
    47d0:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <RELAY_enuInit>
	TEMP_SENSOR_enuInit();
    47d4:	0e 94 43 17 	call	0x2e86	; 0x2e86 <TEMP_SENSOR_enuInit>
	HC05_enuInit();
    47d8:	0e 94 85 20 	call	0x410a	; 0x410a <HC05_enuInit>
	EEPROM_enuInit();
    47dc:	0e 94 ce 20 	call	0x419c	; 0x419c <EEPROM_enuInit>
	BUTTON_enuInit();
    47e0:	0e 94 19 23 	call	0x4632	; 0x4632 <BUTTON_enuInit>
	BUZZER_enuInit();
    47e4:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <BUZZER_enuInit>
	SERVO_MOTOR_enuSetPosition(CLOSE);
    47e8:	85 e0       	ldi	r24, 0x05	; 5
    47ea:	0e 94 93 17 	call	0x2f26	; 0x2f26 <SERVO_MOTOR_enuSetPosition>
	//this function for saving the admin pass and ID + user pass and ID for first time
	AppInit();
    47ee:	0e 94 92 37 	call	0x6f24	; 0x6f24 <AppInit>
	u8 Number_Users=0;
    47f2:	1a ae       	std	Y+58, r1	; 0x3a
	//get the number of users i have save it in address 90 page 0
	EEPROM_enuRead(&Number_Users,0,90);
    47f4:	ce 01       	movw	r24, r28
    47f6:	ca 96       	adiw	r24, 0x3a	; 58
    47f8:	60 e0       	ldi	r22, 0x00	; 0
    47fa:	4a e5       	ldi	r20, 0x5A	; 90
    47fc:	0e 94 01 21 	call	0x4202	; 0x4202 <EEPROM_enuRead>
// there are two arraies to save data on it before check is found or not
u8 Copy_ID	[4]={0};
    4800:	1b ae       	std	Y+59, r1	; 0x3b
    4802:	1c ae       	std	Y+60, r1	; 0x3c
    4804:	1d ae       	std	Y+61, r1	; 0x3d
    4806:	1e ae       	std	Y+62, r1	; 0x3e
u8 Copy_Password[4]={0};
    4808:	fe 01       	movw	r30, r28
    480a:	ff 96       	adiw	r30, 0x3f	; 63
    480c:	10 82       	st	Z, r1
    480e:	11 82       	std	Z+1, r1	; 0x01
    4810:	12 82       	std	Z+2, r1	; 0x02
    4812:	13 82       	std	Z+3, r1	; 0x03
u8 Key_Data=KEY_NOT_PRESSED;        // to store keypad key
    4814:	fe 01       	movw	r30, r28
    4816:	ed 5b       	subi	r30, 0xBD	; 189
    4818:	ff 4f       	sbci	r31, 0xFF	; 255
    481a:	8f ef       	ldi	r24, 0xFF	; 255
    481c:	80 83       	st	Z, r24
u8 Num_Trails =0;
    481e:	19 ae       	std	Y+57, r1	; 0x39
u8 Leds_State[5]={0};
    4820:	ce 01       	movw	r24, r28
    4822:	8c 5b       	subi	r24, 0xBC	; 188
    4824:	9f 4f       	sbci	r25, 0xFF	; 255
    4826:	25 e0       	ldi	r18, 0x05	; 5
    4828:	fc 01       	movw	r30, r24
    482a:	df 01       	movw	r26, r30
    482c:	32 2f       	mov	r19, r18
    482e:	1d 92       	st	X+, r1
    4830:	3a 95       	dec	r19
    4832:	e9 f7       	brne	.-6      	; 0x482e <main+0x8e>
u8 SERVO_State=CLOSE;     // to store door open or close
    4834:	fe 01       	movw	r30, r28
    4836:	e7 5b       	subi	r30, 0xB7	; 183
    4838:	ff 4f       	sbci	r31, 0xFF	; 255
    483a:	85 e0       	ldi	r24, 0x05	; 5
    483c:	80 83       	st	Z, r24
u8 SENSOR_State=0;    //to store sensor state
    483e:	fe 01       	movw	r30, r28
    4840:	e6 5b       	subi	r30, 0xB6	; 182
    4842:	ff 4f       	sbci	r31, 0xFF	; 255
    4844:	10 82       	st	Z, r1
u8 Dimmer_State=0;
    4846:	fe 01       	movw	r30, r28
    4848:	e5 5b       	subi	r30, 0xB5	; 181
    484a:	ff 4f       	sbci	r31, 0xFF	; 255
    484c:	10 82       	st	Z, r1
u8 Recieve_Date=0;
    484e:	fe 01       	movw	r30, r28
    4850:	e4 5b       	subi	r30, 0xB4	; 180
    4852:	ff 4f       	sbci	r31, 0xFF	; 255
    4854:	10 82       	st	Z, r1
u8 Check=0;
    4856:	fe 01       	movw	r30, r28
    4858:	e3 5b       	subi	r30, 0xB3	; 179
    485a:	ff 4f       	sbci	r31, 0xFF	; 255
    485c:	10 82       	st	Z, r1
// to store data from bluetooth
// appaliction program
	while(1){
		switch(STATE){
    485e:	80 91 33 08 	lds	r24, 0x0833
    4862:	a8 2f       	mov	r26, r24
    4864:	b0 e0       	ldi	r27, 0x00	; 0
    4866:	65 96       	adiw	r28, 0x15	; 21
    4868:	bf af       	std	Y+63, r27	; 0x3f
    486a:	ae af       	std	Y+62, r26	; 0x3e
    486c:	65 97       	sbiw	r28, 0x15	; 21
    486e:	65 96       	adiw	r28, 0x15	; 21
    4870:	2e ad       	ldd	r18, Y+62	; 0x3e
    4872:	3f ad       	ldd	r19, Y+63	; 0x3f
    4874:	65 97       	sbiw	r28, 0x15	; 21
    4876:	23 30       	cpi	r18, 0x03	; 3
    4878:	31 05       	cpc	r19, r1
    487a:	09 f4       	brne	.+2      	; 0x487e <main+0xde>
    487c:	7f c0       	rjmp	.+254    	; 0x497c <main+0x1dc>
    487e:	65 96       	adiw	r28, 0x15	; 21
    4880:	8e ad       	ldd	r24, Y+62	; 0x3e
    4882:	9f ad       	ldd	r25, Y+63	; 0x3f
    4884:	65 97       	sbiw	r28, 0x15	; 21
    4886:	84 30       	cpi	r24, 0x04	; 4
    4888:	91 05       	cpc	r25, r1
    488a:	b4 f4       	brge	.+44     	; 0x48b8 <main+0x118>
    488c:	65 96       	adiw	r28, 0x15	; 21
    488e:	ae ad       	ldd	r26, Y+62	; 0x3e
    4890:	bf ad       	ldd	r27, Y+63	; 0x3f
    4892:	65 97       	sbiw	r28, 0x15	; 21
    4894:	a1 30       	cpi	r26, 0x01	; 1
    4896:	b1 05       	cpc	r27, r1
    4898:	b1 f1       	breq	.+108    	; 0x4906 <main+0x166>
    489a:	65 96       	adiw	r28, 0x15	; 21
    489c:	2e ad       	ldd	r18, Y+62	; 0x3e
    489e:	3f ad       	ldd	r19, Y+63	; 0x3f
    48a0:	65 97       	sbiw	r28, 0x15	; 21
    48a2:	22 30       	cpi	r18, 0x02	; 2
    48a4:	31 05       	cpc	r19, r1
    48a6:	0c f0       	brlt	.+2      	; 0x48aa <main+0x10a>
    48a8:	c7 c0       	rjmp	.+398    	; 0x4a38 <main+0x298>
    48aa:	65 96       	adiw	r28, 0x15	; 21
    48ac:	8e ad       	ldd	r24, Y+62	; 0x3e
    48ae:	9f ad       	ldd	r25, Y+63	; 0x3f
    48b0:	65 97       	sbiw	r28, 0x15	; 21
    48b2:	00 97       	sbiw	r24, 0x00	; 0
    48b4:	d1 f0       	breq	.+52     	; 0x48ea <main+0x14a>
    48b6:	d3 cf       	rjmp	.-90     	; 0x485e <main+0xbe>
    48b8:	65 96       	adiw	r28, 0x15	; 21
    48ba:	ae ad       	ldd	r26, Y+62	; 0x3e
    48bc:	bf ad       	ldd	r27, Y+63	; 0x3f
    48be:	65 97       	sbiw	r28, 0x15	; 21
    48c0:	a5 30       	cpi	r26, 0x05	; 5
    48c2:	b1 05       	cpc	r27, r1
    48c4:	09 f4       	brne	.+2      	; 0x48c8 <main+0x128>
    48c6:	c2 c3       	rjmp	.+1924   	; 0x504c <main+0x8ac>
    48c8:	65 96       	adiw	r28, 0x15	; 21
    48ca:	2e ad       	ldd	r18, Y+62	; 0x3e
    48cc:	3f ad       	ldd	r19, Y+63	; 0x3f
    48ce:	65 97       	sbiw	r28, 0x15	; 21
    48d0:	25 30       	cpi	r18, 0x05	; 5
    48d2:	31 05       	cpc	r19, r1
    48d4:	0c f4       	brge	.+2      	; 0x48d8 <main+0x138>
    48d6:	8b c1       	rjmp	.+790    	; 0x4bee <main+0x44e>
    48d8:	65 96       	adiw	r28, 0x15	; 21
    48da:	8e ad       	ldd	r24, Y+62	; 0x3e
    48dc:	9f ad       	ldd	r25, Y+63	; 0x3f
    48de:	65 97       	sbiw	r28, 0x15	; 21
    48e0:	86 30       	cpi	r24, 0x06	; 6
    48e2:	91 05       	cpc	r25, r1
    48e4:	09 f4       	brne	.+2      	; 0x48e8 <main+0x148>
    48e6:	5b c4       	rjmp	.+2230   	; 0x519e <main+0x9fe>
    48e8:	ba cf       	rjmp	.-140    	; 0x485e <main+0xbe>
		case WELCOM_PAGE:
			LCD_enuClearScreen();
    48ea:	0e 94 df 1c 	call	0x39be	; 0x39be <LCD_enuClearScreen>
			LCD_enuWriteString("Welcome to Smart Home");
    48ee:	80 e6       	ldi	r24, 0x60	; 96
    48f0:	90 e0       	ldi	r25, 0x00	; 0
    48f2:	0e 94 b9 1c 	call	0x3972	; 0x3972 <LCD_enuWriteString>
			HC05_enuSendString("Welcome to Smart Home\r\n");
    48f6:	86 e7       	ldi	r24, 0x76	; 118
    48f8:	90 e0       	ldi	r25, 0x00	; 0
    48fa:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
		//_delay_ms(1500);
			STATE=CHOICE_MODE;
    48fe:	81 e0       	ldi	r24, 0x01	; 1
    4900:	80 93 33 08 	sts	0x0833, r24
    4904:	ac cf       	rjmp	.-168    	; 0x485e <main+0xbe>
			break;
		case CHOICE_MODE:
			Key_Data=KEY_NOT_PRESSED;
    4906:	fe 01       	movw	r30, r28
    4908:	ed 5b       	subi	r30, 0xBD	; 189
    490a:	ff 4f       	sbci	r31, 0xFF	; 255
    490c:	8f ef       	ldi	r24, 0xFF	; 255
    490e:	80 83       	st	Z, r24
			LCD_enuClearScreen();
    4910:	0e 94 df 1c 	call	0x39be	; 0x39be <LCD_enuClearScreen>
			LCD_enuWriteString("1- Admin Mode");
    4914:	8e e8       	ldi	r24, 0x8E	; 142
    4916:	90 e0       	ldi	r25, 0x00	; 0
    4918:	0e 94 b9 1c 	call	0x3972	; 0x3972 <LCD_enuWriteString>
			HC05_enuSendString("1- Admin Mode\r\n");
    491c:	8c e9       	ldi	r24, 0x9C	; 156
    491e:	90 e0       	ldi	r25, 0x00	; 0
    4920:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
			LCD_enuGoToPosition(1,0);
    4924:	81 e0       	ldi	r24, 0x01	; 1
    4926:	60 e0       	ldi	r22, 0x00	; 0
    4928:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <LCD_enuGoToPosition>
			LCD_enuWriteString("2- User Mode");
    492c:	8c ea       	ldi	r24, 0xAC	; 172
    492e:	90 e0       	ldi	r25, 0x00	; 0
    4930:	0e 94 b9 1c 	call	0x3972	; 0x3972 <LCD_enuWriteString>
			HC05_enuSendString("2- User Mode\r\n");
    4934:	89 eb       	ldi	r24, 0xB9	; 185
    4936:	90 e0       	ldi	r25, 0x00	; 0
    4938:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
    493c:	18 c0       	rjmp	.+48     	; 0x496e <main+0x1ce>

			while(Key_Data==KEY_NOT_PRESSED){
				KEYPAD_enuGetPressedKey(&Key_Data);
    493e:	ce 01       	movw	r24, r28
    4940:	8d 5b       	subi	r24, 0xBD	; 189
    4942:	9f 4f       	sbci	r25, 0xFF	; 255
    4944:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <KEYPAD_enuGetPressedKey>
				if(Key_Data=='1'){
    4948:	fe 01       	movw	r30, r28
    494a:	ed 5b       	subi	r30, 0xBD	; 189
    494c:	ff 4f       	sbci	r31, 0xFF	; 255
    494e:	80 81       	ld	r24, Z
    4950:	81 33       	cpi	r24, 0x31	; 49
    4952:	21 f4       	brne	.+8      	; 0x495c <main+0x1bc>
					STATE=ADMIN_LOGIN;
    4954:	82 e0       	ldi	r24, 0x02	; 2
    4956:	80 93 33 08 	sts	0x0833, r24
    495a:	09 c0       	rjmp	.+18     	; 0x496e <main+0x1ce>
				}
				else if(Key_Data=='2'){
    495c:	fe 01       	movw	r30, r28
    495e:	ed 5b       	subi	r30, 0xBD	; 189
    4960:	ff 4f       	sbci	r31, 0xFF	; 255
    4962:	80 81       	ld	r24, Z
    4964:	82 33       	cpi	r24, 0x32	; 50
    4966:	19 f4       	brne	.+6      	; 0x496e <main+0x1ce>
					STATE=USER_LOGIN;
    4968:	83 e0       	ldi	r24, 0x03	; 3
    496a:	80 93 33 08 	sts	0x0833, r24
			HC05_enuSendString("1- Admin Mode\r\n");
			LCD_enuGoToPosition(1,0);
			LCD_enuWriteString("2- User Mode");
			HC05_enuSendString("2- User Mode\r\n");

			while(Key_Data==KEY_NOT_PRESSED){
    496e:	fe 01       	movw	r30, r28
    4970:	ed 5b       	subi	r30, 0xBD	; 189
    4972:	ff 4f       	sbci	r31, 0xFF	; 255
    4974:	80 81       	ld	r24, Z
    4976:	8f 3f       	cpi	r24, 0xFF	; 255
    4978:	11 f3       	breq	.-60     	; 0x493e <main+0x19e>
    497a:	71 cf       	rjmp	.-286    	; 0x485e <main+0xbe>
				}

			}
			break;
		case USER_LOGIN:
			Num_Trails=0;
    497c:	19 ae       	std	Y+57, r1	; 0x39
    497e:	56 c0       	rjmp	.+172    	; 0x4a2c <main+0x28c>
			while(Num_Trails<3){
				LCD_enuClearScreen();
    4980:	0e 94 df 1c 	call	0x39be	; 0x39be <LCD_enuClearScreen>
				LCD_enuWriteString("Enter User Name:");
    4984:	88 ec       	ldi	r24, 0xC8	; 200
    4986:	90 e0       	ldi	r25, 0x00	; 0
    4988:	0e 94 b9 1c 	call	0x3972	; 0x3972 <LCD_enuWriteString>
				GetId(Copy_ID,User_Mode);
    498c:	ce 01       	movw	r24, r28
    498e:	cb 96       	adiw	r24, 0x3b	; 59
    4990:	62 e0       	ldi	r22, 0x02	; 2
    4992:	0e 94 4a 29 	call	0x5294	; 0x5294 <GetId>
				LCD_enuClearScreen();
    4996:	0e 94 df 1c 	call	0x39be	; 0x39be <LCD_enuClearScreen>
				LCD_enuWriteString("Enter User Password:");
    499a:	89 ed       	ldi	r24, 0xD9	; 217
    499c:	90 e0       	ldi	r25, 0x00	; 0
    499e:	0e 94 b9 1c 	call	0x3972	; 0x3972 <LCD_enuWriteString>
				GetPassword(Copy_Password,User_Mode);
    49a2:	ce 01       	movw	r24, r28
    49a4:	cf 96       	adiw	r24, 0x3f	; 63
    49a6:	62 e0       	ldi	r22, 0x02	; 2
    49a8:	0e 94 ab 2a 	call	0x5556	; 0x5556 <GetPassword>

				CheckUser(Copy_ID,Copy_Password,&Check);
    49ac:	ce 01       	movw	r24, r28
    49ae:	cb 96       	adiw	r24, 0x3b	; 59
    49b0:	9e 01       	movw	r18, r28
    49b2:	21 5c       	subi	r18, 0xC1	; 193
    49b4:	3f 4f       	sbci	r19, 0xFF	; 255
    49b6:	ae 01       	movw	r20, r28
    49b8:	43 5b       	subi	r20, 0xB3	; 179
    49ba:	5f 4f       	sbci	r21, 0xFF	; 255
    49bc:	b9 01       	movw	r22, r18
    49be:	0e 94 1c 31 	call	0x6238	; 0x6238 <CheckUser>
				if(Check==1){
    49c2:	fe 01       	movw	r30, r28
    49c4:	e3 5b       	subi	r30, 0xB3	; 179
    49c6:	ff 4f       	sbci	r31, 0xFF	; 255
    49c8:	80 81       	ld	r24, Z
    49ca:	81 30       	cpi	r24, 0x01	; 1
    49cc:	21 f4       	brne	.+8      	; 0x49d6 <main+0x236>
					STATE=USER_CONTROL;
    49ce:	85 e0       	ldi	r24, 0x05	; 5
    49d0:	80 93 33 08 	sts	0x0833, r24
    49d4:	2f c0       	rjmp	.+94     	; 0x4a34 <main+0x294>
					break;
				}
				else if(Check==0){
    49d6:	fe 01       	movw	r30, r28
    49d8:	e3 5b       	subi	r30, 0xB3	; 179
    49da:	ff 4f       	sbci	r31, 0xFF	; 255
    49dc:	80 81       	ld	r24, Z
    49de:	88 23       	and	r24, r24
    49e0:	29 f5       	brne	.+74     	; 0x4a2c <main+0x28c>
					Num_Trails++;
    49e2:	89 ad       	ldd	r24, Y+57	; 0x39
    49e4:	8f 5f       	subi	r24, 0xFF	; 255
    49e6:	89 af       	std	Y+57, r24	; 0x39
					if(Num_Trails==3){
    49e8:	89 ad       	ldd	r24, Y+57	; 0x39
    49ea:	83 30       	cpi	r24, 0x03	; 3
    49ec:	f9 f4       	brne	.+62     	; 0x4a2c <main+0x28c>

						SERVO_MOTOR_enuSetPosition(CLOSE);
    49ee:	85 e0       	ldi	r24, 0x05	; 5
    49f0:	0e 94 93 17 	call	0x2f26	; 0x2f26 <SERVO_MOTOR_enuSetPosition>
						SERVO_State=CLOSE;
    49f4:	fe 01       	movw	r30, r28
    49f6:	e7 5b       	subi	r30, 0xB7	; 183
    49f8:	ff 4f       	sbci	r31, 0xFF	; 255
    49fa:	85 e0       	ldi	r24, 0x05	; 5
    49fc:	80 83       	st	Z, r24
						BUZZER_enuON();
    49fe:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <BUZZER_enuON>
						LCD_enuClearScreen();
    4a02:	0e 94 df 1c 	call	0x39be	; 0x39be <LCD_enuClearScreen>
						Key_Data=0;
    4a06:	fe 01       	movw	r30, r28
    4a08:	ed 5b       	subi	r30, 0xBD	; 189
    4a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a0c:	10 82       	st	Z, r1
					    for(;;){
					    	BUTTON_enuGetValue(&Key_Data);
    4a0e:	ce 01       	movw	r24, r28
    4a10:	8d 5b       	subi	r24, 0xBD	; 189
    4a12:	9f 4f       	sbci	r25, 0xFF	; 255
    4a14:	0e 94 2e 23 	call	0x465c	; 0x465c <BUTTON_enuGetValue>
					    	if(Key_Data==1){
    4a18:	fe 01       	movw	r30, r28
    4a1a:	ed 5b       	subi	r30, 0xBD	; 189
    4a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a1e:	80 81       	ld	r24, Z
    4a20:	81 30       	cpi	r24, 0x01	; 1
    4a22:	a9 f7       	brne	.-22     	; 0x4a0e <main+0x26e>
					    		BUZZER_enuOFF();
    4a24:	0e 94 0c 22 	call	0x4418	; 0x4418 <BUZZER_enuOFF>
					    		STATE=WELCOM_PAGE;
    4a28:	10 92 33 08 	sts	0x0833, r1

			}
			break;
		case USER_LOGIN:
			Num_Trails=0;
			while(Num_Trails<3){
    4a2c:	89 ad       	ldd	r24, Y+57	; 0x39
    4a2e:	83 30       	cpi	r24, 0x03	; 3
    4a30:	08 f4       	brcc	.+2      	; 0x4a34 <main+0x294>
    4a32:	a6 cf       	rjmp	.-180    	; 0x4980 <main+0x1e0>
				}
			}



		Num_Trails=0;
    4a34:	19 ae       	std	Y+57, r1	; 0x39
    4a36:	13 cf       	rjmp	.-474    	; 0x485e <main+0xbe>
		break;
		case ADMIN_LOGIN:
			LCD_enuClearScreen();
    4a38:	0e 94 df 1c 	call	0x39be	; 0x39be <LCD_enuClearScreen>
			LCD_enuWriteString("Admin Mode");
    4a3c:	8e ee       	ldi	r24, 0xEE	; 238
    4a3e:	90 e0       	ldi	r25, 0x00	; 0
    4a40:	0e 94 b9 1c 	call	0x3972	; 0x3972 <LCD_enuWriteString>
			LCD_enuGoToPosition(1,0);
    4a44:	81 e0       	ldi	r24, 0x01	; 1
    4a46:	60 e0       	ldi	r22, 0x00	; 0
    4a48:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <LCD_enuGoToPosition>
			LCD_enuWriteString("Use Bluetooth");
    4a4c:	89 ef       	ldi	r24, 0xF9	; 249
    4a4e:	90 e0       	ldi	r25, 0x00	; 0
    4a50:	0e 94 b9 1c 	call	0x3972	; 0x3972 <LCD_enuWriteString>
    4a54:	80 e0       	ldi	r24, 0x00	; 0
    4a56:	90 e8       	ldi	r25, 0x80	; 128
    4a58:	ab eb       	ldi	r26, 0xBB	; 187
    4a5a:	b4 e4       	ldi	r27, 0x44	; 68
    4a5c:	8d ab       	std	Y+53, r24	; 0x35
    4a5e:	9e ab       	std	Y+54, r25	; 0x36
    4a60:	af ab       	std	Y+55, r26	; 0x37
    4a62:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a64:	6d a9       	ldd	r22, Y+53	; 0x35
    4a66:	7e a9       	ldd	r23, Y+54	; 0x36
    4a68:	8f a9       	ldd	r24, Y+55	; 0x37
    4a6a:	98 ad       	ldd	r25, Y+56	; 0x38
    4a6c:	20 e0       	ldi	r18, 0x00	; 0
    4a6e:	30 e0       	ldi	r19, 0x00	; 0
    4a70:	4a e7       	ldi	r20, 0x7A	; 122
    4a72:	55 e4       	ldi	r21, 0x45	; 69
    4a74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a78:	dc 01       	movw	r26, r24
    4a7a:	cb 01       	movw	r24, r22
    4a7c:	89 ab       	std	Y+49, r24	; 0x31
    4a7e:	9a ab       	std	Y+50, r25	; 0x32
    4a80:	ab ab       	std	Y+51, r26	; 0x33
    4a82:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4a84:	69 a9       	ldd	r22, Y+49	; 0x31
    4a86:	7a a9       	ldd	r23, Y+50	; 0x32
    4a88:	8b a9       	ldd	r24, Y+51	; 0x33
    4a8a:	9c a9       	ldd	r25, Y+52	; 0x34
    4a8c:	20 e0       	ldi	r18, 0x00	; 0
    4a8e:	30 e0       	ldi	r19, 0x00	; 0
    4a90:	40 e8       	ldi	r20, 0x80	; 128
    4a92:	5f e3       	ldi	r21, 0x3F	; 63
    4a94:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a98:	88 23       	and	r24, r24
    4a9a:	2c f4       	brge	.+10     	; 0x4aa6 <main+0x306>
		__ticks = 1;
    4a9c:	81 e0       	ldi	r24, 0x01	; 1
    4a9e:	90 e0       	ldi	r25, 0x00	; 0
    4aa0:	98 ab       	std	Y+48, r25	; 0x30
    4aa2:	8f a7       	std	Y+47, r24	; 0x2f
    4aa4:	3f c0       	rjmp	.+126    	; 0x4b24 <main+0x384>
	else if (__tmp > 65535)
    4aa6:	69 a9       	ldd	r22, Y+49	; 0x31
    4aa8:	7a a9       	ldd	r23, Y+50	; 0x32
    4aaa:	8b a9       	ldd	r24, Y+51	; 0x33
    4aac:	9c a9       	ldd	r25, Y+52	; 0x34
    4aae:	20 e0       	ldi	r18, 0x00	; 0
    4ab0:	3f ef       	ldi	r19, 0xFF	; 255
    4ab2:	4f e7       	ldi	r20, 0x7F	; 127
    4ab4:	57 e4       	ldi	r21, 0x47	; 71
    4ab6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4aba:	18 16       	cp	r1, r24
    4abc:	4c f5       	brge	.+82     	; 0x4b10 <main+0x370>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4abe:	6d a9       	ldd	r22, Y+53	; 0x35
    4ac0:	7e a9       	ldd	r23, Y+54	; 0x36
    4ac2:	8f a9       	ldd	r24, Y+55	; 0x37
    4ac4:	98 ad       	ldd	r25, Y+56	; 0x38
    4ac6:	20 e0       	ldi	r18, 0x00	; 0
    4ac8:	30 e0       	ldi	r19, 0x00	; 0
    4aca:	40 e2       	ldi	r20, 0x20	; 32
    4acc:	51 e4       	ldi	r21, 0x41	; 65
    4ace:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ad2:	dc 01       	movw	r26, r24
    4ad4:	cb 01       	movw	r24, r22
    4ad6:	bc 01       	movw	r22, r24
    4ad8:	cd 01       	movw	r24, r26
    4ada:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ade:	dc 01       	movw	r26, r24
    4ae0:	cb 01       	movw	r24, r22
    4ae2:	98 ab       	std	Y+48, r25	; 0x30
    4ae4:	8f a7       	std	Y+47, r24	; 0x2f
    4ae6:	0f c0       	rjmp	.+30     	; 0x4b06 <main+0x366>
    4ae8:	80 e9       	ldi	r24, 0x90	; 144
    4aea:	91 e0       	ldi	r25, 0x01	; 1
    4aec:	9e a7       	std	Y+46, r25	; 0x2e
    4aee:	8d a7       	std	Y+45, r24	; 0x2d
    4af0:	8d a5       	ldd	r24, Y+45	; 0x2d
    4af2:	9e a5       	ldd	r25, Y+46	; 0x2e
    4af4:	01 97       	sbiw	r24, 0x01	; 1
    4af6:	f1 f7       	brne	.-4      	; 0x4af4 <main+0x354>
    4af8:	9e a7       	std	Y+46, r25	; 0x2e
    4afa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4afc:	8f a5       	ldd	r24, Y+47	; 0x2f
    4afe:	98 a9       	ldd	r25, Y+48	; 0x30
    4b00:	01 97       	sbiw	r24, 0x01	; 1
    4b02:	98 ab       	std	Y+48, r25	; 0x30
    4b04:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b06:	8f a5       	ldd	r24, Y+47	; 0x2f
    4b08:	98 a9       	ldd	r25, Y+48	; 0x30
    4b0a:	00 97       	sbiw	r24, 0x00	; 0
    4b0c:	69 f7       	brne	.-38     	; 0x4ae8 <main+0x348>
    4b0e:	69 c0       	rjmp	.+210    	; 0x4be2 <main+0x442>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b10:	69 a9       	ldd	r22, Y+49	; 0x31
    4b12:	7a a9       	ldd	r23, Y+50	; 0x32
    4b14:	8b a9       	ldd	r24, Y+51	; 0x33
    4b16:	9c a9       	ldd	r25, Y+52	; 0x34
    4b18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b1c:	dc 01       	movw	r26, r24
    4b1e:	cb 01       	movw	r24, r22
    4b20:	98 ab       	std	Y+48, r25	; 0x30
    4b22:	8f a7       	std	Y+47, r24	; 0x2f
    4b24:	8f a5       	ldd	r24, Y+47	; 0x2f
    4b26:	98 a9       	ldd	r25, Y+48	; 0x30
    4b28:	9c a7       	std	Y+44, r25	; 0x2c
    4b2a:	8b a7       	std	Y+43, r24	; 0x2b
    4b2c:	8b a5       	ldd	r24, Y+43	; 0x2b
    4b2e:	9c a5       	ldd	r25, Y+44	; 0x2c
    4b30:	01 97       	sbiw	r24, 0x01	; 1
    4b32:	f1 f7       	brne	.-4      	; 0x4b30 <main+0x390>
    4b34:	9c a7       	std	Y+44, r25	; 0x2c
    4b36:	8b a7       	std	Y+43, r24	; 0x2b
    4b38:	54 c0       	rjmp	.+168    	; 0x4be2 <main+0x442>
			//HC05_enuSendString("use the Bluetooth\r\n");
			_delay_ms(1500);
			while(Num_Trails<3){
				HC05_enuSendString("Enter Admin Name\r\n");
    4b3a:	87 e0       	ldi	r24, 0x07	; 7
    4b3c:	91 e0       	ldi	r25, 0x01	; 1
    4b3e:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
				GetId(Copy_ID,Admin_Mode);
    4b42:	ce 01       	movw	r24, r28
    4b44:	cb 96       	adiw	r24, 0x3b	; 59
    4b46:	61 e0       	ldi	r22, 0x01	; 1
    4b48:	0e 94 4a 29 	call	0x5294	; 0x5294 <GetId>
				HC05_enuSendString("Enter Admin Password\r\n");
    4b4c:	8a e1       	ldi	r24, 0x1A	; 26
    4b4e:	91 e0       	ldi	r25, 0x01	; 1
    4b50:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
				GetPassword(Copy_Password,Admin_Mode);
    4b54:	ce 01       	movw	r24, r28
    4b56:	cf 96       	adiw	r24, 0x3f	; 63
    4b58:	61 e0       	ldi	r22, 0x01	; 1
    4b5a:	0e 94 ab 2a 	call	0x5556	; 0x5556 <GetPassword>
				Check=0;
    4b5e:	fe 01       	movw	r30, r28
    4b60:	e3 5b       	subi	r30, 0xB3	; 179
    4b62:	ff 4f       	sbci	r31, 0xFF	; 255
    4b64:	10 82       	st	Z, r1
				CheckAdmin(Copy_ID,Copy_Password,&Check);
    4b66:	ce 01       	movw	r24, r28
    4b68:	cb 96       	adiw	r24, 0x3b	; 59
    4b6a:	9e 01       	movw	r18, r28
    4b6c:	21 5c       	subi	r18, 0xC1	; 193
    4b6e:	3f 4f       	sbci	r19, 0xFF	; 255
    4b70:	ae 01       	movw	r20, r28
    4b72:	43 5b       	subi	r20, 0xB3	; 179
    4b74:	5f 4f       	sbci	r21, 0xFF	; 255
    4b76:	b9 01       	movw	r22, r18
    4b78:	0e 94 f6 2b 	call	0x57ec	; 0x57ec <CheckAdmin>
				if(Check==1){
    4b7c:	fe 01       	movw	r30, r28
    4b7e:	e3 5b       	subi	r30, 0xB3	; 179
    4b80:	ff 4f       	sbci	r31, 0xFF	; 255
    4b82:	80 81       	ld	r24, Z
    4b84:	81 30       	cpi	r24, 0x01	; 1
    4b86:	21 f4       	brne	.+8      	; 0x4b90 <main+0x3f0>
					STATE=ADMIN_CONTROL;
    4b88:	84 e0       	ldi	r24, 0x04	; 4
    4b8a:	80 93 33 08 	sts	0x0833, r24
    4b8e:	2d c0       	rjmp	.+90     	; 0x4bea <main+0x44a>
					break;
				}
				else if(Check==0){
    4b90:	fe 01       	movw	r30, r28
    4b92:	e3 5b       	subi	r30, 0xB3	; 179
    4b94:	ff 4f       	sbci	r31, 0xFF	; 255
    4b96:	80 81       	ld	r24, Z
    4b98:	88 23       	and	r24, r24
    4b9a:	19 f5       	brne	.+70     	; 0x4be2 <main+0x442>
					Num_Trails++;
    4b9c:	89 ad       	ldd	r24, Y+57	; 0x39
    4b9e:	8f 5f       	subi	r24, 0xFF	; 255
    4ba0:	89 af       	std	Y+57, r24	; 0x39
					if(Num_Trails==3){
    4ba2:	89 ad       	ldd	r24, Y+57	; 0x39
    4ba4:	83 30       	cpi	r24, 0x03	; 3
    4ba6:	e9 f4       	brne	.+58     	; 0x4be2 <main+0x442>
						SERVO_MOTOR_enuSetPosition(CLOSE);
    4ba8:	85 e0       	ldi	r24, 0x05	; 5
    4baa:	0e 94 93 17 	call	0x2f26	; 0x2f26 <SERVO_MOTOR_enuSetPosition>
						SERVO_State=CLOSE;
    4bae:	fe 01       	movw	r30, r28
    4bb0:	e7 5b       	subi	r30, 0xB7	; 183
    4bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    4bb4:	85 e0       	ldi	r24, 0x05	; 5
    4bb6:	80 83       	st	Z, r24
						BUZZER_enuON();
    4bb8:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <BUZZER_enuON>
						u8 Button_read=0;
    4bbc:	fe 01       	movw	r30, r28
    4bbe:	e2 5b       	subi	r30, 0xB2	; 178
    4bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    4bc2:	10 82       	st	Z, r1
				        for(;;){

							BUTTON_enuGetValue(&Button_read);
    4bc4:	ce 01       	movw	r24, r28
    4bc6:	82 5b       	subi	r24, 0xB2	; 178
    4bc8:	9f 4f       	sbci	r25, 0xFF	; 255
    4bca:	0e 94 2e 23 	call	0x465c	; 0x465c <BUTTON_enuGetValue>
					    	if(Button_read==1){
    4bce:	fe 01       	movw	r30, r28
    4bd0:	e2 5b       	subi	r30, 0xB2	; 178
    4bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    4bd4:	80 81       	ld	r24, Z
    4bd6:	81 30       	cpi	r24, 0x01	; 1
    4bd8:	a9 f7       	brne	.-22     	; 0x4bc4 <main+0x424>
							   BUZZER_enuOFF();
    4bda:	0e 94 0c 22 	call	0x4418	; 0x4418 <BUZZER_enuOFF>
							   STATE=WELCOM_PAGE;
    4bde:	10 92 33 08 	sts	0x0833, r1
			LCD_enuWriteString("Admin Mode");
			LCD_enuGoToPosition(1,0);
			LCD_enuWriteString("Use Bluetooth");
			//HC05_enuSendString("use the Bluetooth\r\n");
			_delay_ms(1500);
			while(Num_Trails<3){
    4be2:	89 ad       	ldd	r24, Y+57	; 0x39
    4be4:	83 30       	cpi	r24, 0x03	; 3
    4be6:	08 f4       	brcc	.+2      	; 0x4bea <main+0x44a>
    4be8:	a8 cf       	rjmp	.-176    	; 0x4b3a <main+0x39a>

					}
				}
			}

			Num_Trails=0;
    4bea:	19 ae       	std	Y+57, r1	; 0x39
    4bec:	38 ce       	rjmp	.-912    	; 0x485e <main+0xbe>
			break;
		case ADMIN_CONTROL:
			Recieve_Date=0;
    4bee:	fe 01       	movw	r30, r28
    4bf0:	e4 5b       	subi	r30, 0xB4	; 180
    4bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    4bf4:	10 82       	st	Z, r1
			LCD_enuClearScreen();
    4bf6:	0e 94 df 1c 	call	0x39be	; 0x39be <LCD_enuClearScreen>
			HC05_enuSendString("*******************************\r\n");
    4bfa:	81 e3       	ldi	r24, 0x31	; 49
    4bfc:	91 e0       	ldi	r25, 0x01	; 1
    4bfe:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
			HC05_enuSendString("1- Switch the door\r\n");
    4c02:	83 e5       	ldi	r24, 0x53	; 83
    4c04:	91 e0       	ldi	r25, 0x01	; 1
    4c06:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
			HC05_enuSendString("2- Add New User\r\n");
    4c0a:	88 e6       	ldi	r24, 0x68	; 104
    4c0c:	91 e0       	ldi	r25, 0x01	; 1
    4c0e:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
			HC05_enuSendString("3- Remove User \r\n");
    4c12:	8a e7       	ldi	r24, 0x7A	; 122
    4c14:	91 e0       	ldi	r25, 0x01	; 1
    4c16:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
			HC05_enuSendString("4- switch LEDS \r\n");
    4c1a:	8c e8       	ldi	r24, 0x8C	; 140
    4c1c:	91 e0       	ldi	r25, 0x01	; 1
    4c1e:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
			HC05_enuSendString("5- Switch DC Motor\r\n");
    4c22:	8e e9       	ldi	r24, 0x9E	; 158
    4c24:	91 e0       	ldi	r25, 0x01	; 1
    4c26:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
			HC05_enuSendString("6- control Dimmer Lamp\r\n");
    4c2a:	83 eb       	ldi	r24, 0xB3	; 179
    4c2c:	91 e0       	ldi	r25, 0x01	; 1
    4c2e:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
			HC05_enuSendString("7- Go to User Mode \r\n");
    4c32:	8c ec       	ldi	r24, 0xCC	; 204
    4c34:	91 e0       	ldi	r25, 0x01	; 1
    4c36:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
			HC05_enuSendString("8- Reset The System\r\n");
    4c3a:	82 ee       	ldi	r24, 0xE2	; 226
    4c3c:	91 e0       	ldi	r25, 0x01	; 1
    4c3e:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
			HC05_enuSendString("9- OK\r\n");
    4c42:	88 ef       	ldi	r24, 0xF8	; 248
    4c44:	91 e0       	ldi	r25, 0x01	; 1
    4c46:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
			HC05_enuRecieveChar(&Recieve_Date);
    4c4a:	ce 01       	movw	r24, r28
    4c4c:	84 5b       	subi	r24, 0xB4	; 180
    4c4e:	9f 4f       	sbci	r25, 0xFF	; 255
    4c50:	0e 94 ba 20 	call	0x4174	; 0x4174 <HC05_enuRecieveChar>
			HC05_enuSendString("\r\n");
    4c54:	80 e0       	ldi	r24, 0x00	; 0
    4c56:	92 e0       	ldi	r25, 0x02	; 2
    4c58:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
			switch(Recieve_Date){
    4c5c:	fe 01       	movw	r30, r28
    4c5e:	e4 5b       	subi	r30, 0xB4	; 180
    4c60:	ff 4f       	sbci	r31, 0xFF	; 255
    4c62:	80 81       	ld	r24, Z
    4c64:	a8 2f       	mov	r26, r24
    4c66:	b0 e0       	ldi	r27, 0x00	; 0
    4c68:	63 96       	adiw	r28, 0x13	; 19
    4c6a:	bf af       	std	Y+63, r27	; 0x3f
    4c6c:	ae af       	std	Y+62, r26	; 0x3e
    4c6e:	63 97       	sbiw	r28, 0x13	; 19
    4c70:	63 96       	adiw	r28, 0x13	; 19
    4c72:	2e ad       	ldd	r18, Y+62	; 0x3e
    4c74:	3f ad       	ldd	r19, Y+63	; 0x3f
    4c76:	63 97       	sbiw	r28, 0x13	; 19
    4c78:	25 33       	cpi	r18, 0x35	; 53
    4c7a:	31 05       	cpc	r19, r1
    4c7c:	09 f4       	brne	.+2      	; 0x4c80 <main+0x4e0>
    4c7e:	9c c1       	rjmp	.+824    	; 0x4fb8 <main+0x818>
    4c80:	63 96       	adiw	r28, 0x13	; 19
    4c82:	8e ad       	ldd	r24, Y+62	; 0x3e
    4c84:	9f ad       	ldd	r25, Y+63	; 0x3f
    4c86:	63 97       	sbiw	r28, 0x13	; 19
    4c88:	86 33       	cpi	r24, 0x36	; 54
    4c8a:	91 05       	cpc	r25, r1
    4c8c:	44 f5       	brge	.+80     	; 0x4cde <main+0x53e>
    4c8e:	63 96       	adiw	r28, 0x13	; 19
    4c90:	ae ad       	ldd	r26, Y+62	; 0x3e
    4c92:	bf ad       	ldd	r27, Y+63	; 0x3f
    4c94:	63 97       	sbiw	r28, 0x13	; 19
    4c96:	a2 33       	cpi	r26, 0x32	; 50
    4c98:	b1 05       	cpc	r27, r1
    4c9a:	09 f4       	brne	.+2      	; 0x4c9e <main+0x4fe>
    4c9c:	47 c0       	rjmp	.+142    	; 0x4d2c <main+0x58c>
    4c9e:	63 96       	adiw	r28, 0x13	; 19
    4ca0:	2e ad       	ldd	r18, Y+62	; 0x3e
    4ca2:	3f ad       	ldd	r19, Y+63	; 0x3f
    4ca4:	63 97       	sbiw	r28, 0x13	; 19
    4ca6:	23 33       	cpi	r18, 0x33	; 51
    4ca8:	31 05       	cpc	r19, r1
    4caa:	44 f4       	brge	.+16     	; 0x4cbc <main+0x51c>
    4cac:	63 96       	adiw	r28, 0x13	; 19
    4cae:	8e ad       	ldd	r24, Y+62	; 0x3e
    4cb0:	9f ad       	ldd	r25, Y+63	; 0x3f
    4cb2:	63 97       	sbiw	r28, 0x13	; 19
    4cb4:	81 33       	cpi	r24, 0x31	; 49
    4cb6:	91 05       	cpc	r25, r1
    4cb8:	99 f1       	breq	.+102    	; 0x4d20 <main+0x580>
    4cba:	d1 cd       	rjmp	.-1118   	; 0x485e <main+0xbe>
    4cbc:	63 96       	adiw	r28, 0x13	; 19
    4cbe:	ae ad       	ldd	r26, Y+62	; 0x3e
    4cc0:	bf ad       	ldd	r27, Y+63	; 0x3f
    4cc2:	63 97       	sbiw	r28, 0x13	; 19
    4cc4:	a3 33       	cpi	r26, 0x33	; 51
    4cc6:	b1 05       	cpc	r27, r1
    4cc8:	09 f4       	brne	.+2      	; 0x4ccc <main+0x52c>
    4cca:	cf c0       	rjmp	.+414    	; 0x4e6a <main+0x6ca>
    4ccc:	63 96       	adiw	r28, 0x13	; 19
    4cce:	2e ad       	ldd	r18, Y+62	; 0x3e
    4cd0:	3f ad       	ldd	r19, Y+63	; 0x3f
    4cd2:	63 97       	sbiw	r28, 0x13	; 19
    4cd4:	24 33       	cpi	r18, 0x34	; 52
    4cd6:	31 05       	cpc	r19, r1
    4cd8:	09 f4       	brne	.+2      	; 0x4cdc <main+0x53c>
    4cda:	56 c1       	rjmp	.+684    	; 0x4f88 <main+0x7e8>
    4cdc:	c0 cd       	rjmp	.-1152   	; 0x485e <main+0xbe>
    4cde:	63 96       	adiw	r28, 0x13	; 19
    4ce0:	8e ad       	ldd	r24, Y+62	; 0x3e
    4ce2:	9f ad       	ldd	r25, Y+63	; 0x3f
    4ce4:	63 97       	sbiw	r28, 0x13	; 19
    4ce6:	87 33       	cpi	r24, 0x37	; 55
    4ce8:	91 05       	cpc	r25, r1
    4cea:	09 f4       	brne	.+2      	; 0x4cee <main+0x54e>
    4cec:	7f c1       	rjmp	.+766    	; 0x4fec <main+0x84c>
    4cee:	63 96       	adiw	r28, 0x13	; 19
    4cf0:	ae ad       	ldd	r26, Y+62	; 0x3e
    4cf2:	bf ad       	ldd	r27, Y+63	; 0x3f
    4cf4:	63 97       	sbiw	r28, 0x13	; 19
    4cf6:	a7 33       	cpi	r26, 0x37	; 55
    4cf8:	b1 05       	cpc	r27, r1
    4cfa:	0c f4       	brge	.+2      	; 0x4cfe <main+0x55e>
    4cfc:	63 c1       	rjmp	.+710    	; 0x4fc4 <main+0x824>
    4cfe:	63 96       	adiw	r28, 0x13	; 19
    4d00:	2e ad       	ldd	r18, Y+62	; 0x3e
    4d02:	3f ad       	ldd	r19, Y+63	; 0x3f
    4d04:	63 97       	sbiw	r28, 0x13	; 19
    4d06:	28 33       	cpi	r18, 0x38	; 56
    4d08:	31 05       	cpc	r19, r1
    4d0a:	09 f4       	brne	.+2      	; 0x4d0e <main+0x56e>
    4d0c:	77 c1       	rjmp	.+750    	; 0x4ffc <main+0x85c>
    4d0e:	63 96       	adiw	r28, 0x13	; 19
    4d10:	8e ad       	ldd	r24, Y+62	; 0x3e
    4d12:	9f ad       	ldd	r25, Y+63	; 0x3f
    4d14:	63 97       	sbiw	r28, 0x13	; 19
    4d16:	89 33       	cpi	r24, 0x39	; 57
    4d18:	91 05       	cpc	r25, r1
    4d1a:	09 f4       	brne	.+2      	; 0x4d1e <main+0x57e>
    4d1c:	80 c1       	rjmp	.+768    	; 0x501e <main+0x87e>
    4d1e:	9f cd       	rjmp	.-1218   	; 0x485e <main+0xbe>
			case '1':
				DoorControl(&SERVO_State);
    4d20:	ce 01       	movw	r24, r28
    4d22:	87 5b       	subi	r24, 0xB7	; 183
    4d24:	9f 4f       	sbci	r25, 0xFF	; 255
    4d26:	0e 94 37 34 	call	0x686e	; 0x686e <DoorControl>
    4d2a:	99 cd       	rjmp	.-1230   	; 0x485e <main+0xbe>
				break;
			case'2':

				LCD_enuClearScreen();
    4d2c:	0e 94 df 1c 	call	0x39be	; 0x39be <LCD_enuClearScreen>
				LCD_enuWriteString("Use Bluetooth");
    4d30:	89 ef       	ldi	r24, 0xF9	; 249
    4d32:	90 e0       	ldi	r25, 0x00	; 0
    4d34:	0e 94 b9 1c 	call	0x3972	; 0x3972 <LCD_enuWriteString>
    4d38:	80 e0       	ldi	r24, 0x00	; 0
    4d3a:	90 e0       	ldi	r25, 0x00	; 0
    4d3c:	aa e7       	ldi	r26, 0x7A	; 122
    4d3e:	b4 e4       	ldi	r27, 0x44	; 68
    4d40:	8f a3       	std	Y+39, r24	; 0x27
    4d42:	98 a7       	std	Y+40, r25	; 0x28
    4d44:	a9 a7       	std	Y+41, r26	; 0x29
    4d46:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d48:	6f a1       	ldd	r22, Y+39	; 0x27
    4d4a:	78 a5       	ldd	r23, Y+40	; 0x28
    4d4c:	89 a5       	ldd	r24, Y+41	; 0x29
    4d4e:	9a a5       	ldd	r25, Y+42	; 0x2a
    4d50:	20 e0       	ldi	r18, 0x00	; 0
    4d52:	30 e0       	ldi	r19, 0x00	; 0
    4d54:	4a e7       	ldi	r20, 0x7A	; 122
    4d56:	55 e4       	ldi	r21, 0x45	; 69
    4d58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d5c:	dc 01       	movw	r26, r24
    4d5e:	cb 01       	movw	r24, r22
    4d60:	8b a3       	std	Y+35, r24	; 0x23
    4d62:	9c a3       	std	Y+36, r25	; 0x24
    4d64:	ad a3       	std	Y+37, r26	; 0x25
    4d66:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4d68:	6b a1       	ldd	r22, Y+35	; 0x23
    4d6a:	7c a1       	ldd	r23, Y+36	; 0x24
    4d6c:	8d a1       	ldd	r24, Y+37	; 0x25
    4d6e:	9e a1       	ldd	r25, Y+38	; 0x26
    4d70:	20 e0       	ldi	r18, 0x00	; 0
    4d72:	30 e0       	ldi	r19, 0x00	; 0
    4d74:	40 e8       	ldi	r20, 0x80	; 128
    4d76:	5f e3       	ldi	r21, 0x3F	; 63
    4d78:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4d7c:	88 23       	and	r24, r24
    4d7e:	2c f4       	brge	.+10     	; 0x4d8a <main+0x5ea>
		__ticks = 1;
    4d80:	81 e0       	ldi	r24, 0x01	; 1
    4d82:	90 e0       	ldi	r25, 0x00	; 0
    4d84:	9a a3       	std	Y+34, r25	; 0x22
    4d86:	89 a3       	std	Y+33, r24	; 0x21
    4d88:	3f c0       	rjmp	.+126    	; 0x4e08 <main+0x668>
	else if (__tmp > 65535)
    4d8a:	6b a1       	ldd	r22, Y+35	; 0x23
    4d8c:	7c a1       	ldd	r23, Y+36	; 0x24
    4d8e:	8d a1       	ldd	r24, Y+37	; 0x25
    4d90:	9e a1       	ldd	r25, Y+38	; 0x26
    4d92:	20 e0       	ldi	r18, 0x00	; 0
    4d94:	3f ef       	ldi	r19, 0xFF	; 255
    4d96:	4f e7       	ldi	r20, 0x7F	; 127
    4d98:	57 e4       	ldi	r21, 0x47	; 71
    4d9a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4d9e:	18 16       	cp	r1, r24
    4da0:	4c f5       	brge	.+82     	; 0x4df4 <main+0x654>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4da2:	6f a1       	ldd	r22, Y+39	; 0x27
    4da4:	78 a5       	ldd	r23, Y+40	; 0x28
    4da6:	89 a5       	ldd	r24, Y+41	; 0x29
    4da8:	9a a5       	ldd	r25, Y+42	; 0x2a
    4daa:	20 e0       	ldi	r18, 0x00	; 0
    4dac:	30 e0       	ldi	r19, 0x00	; 0
    4dae:	40 e2       	ldi	r20, 0x20	; 32
    4db0:	51 e4       	ldi	r21, 0x41	; 65
    4db2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4db6:	dc 01       	movw	r26, r24
    4db8:	cb 01       	movw	r24, r22
    4dba:	bc 01       	movw	r22, r24
    4dbc:	cd 01       	movw	r24, r26
    4dbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dc2:	dc 01       	movw	r26, r24
    4dc4:	cb 01       	movw	r24, r22
    4dc6:	9a a3       	std	Y+34, r25	; 0x22
    4dc8:	89 a3       	std	Y+33, r24	; 0x21
    4dca:	0f c0       	rjmp	.+30     	; 0x4dea <main+0x64a>
    4dcc:	80 e9       	ldi	r24, 0x90	; 144
    4dce:	91 e0       	ldi	r25, 0x01	; 1
    4dd0:	98 a3       	std	Y+32, r25	; 0x20
    4dd2:	8f 8f       	std	Y+31, r24	; 0x1f
    4dd4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4dd6:	98 a1       	ldd	r25, Y+32	; 0x20
    4dd8:	01 97       	sbiw	r24, 0x01	; 1
    4dda:	f1 f7       	brne	.-4      	; 0x4dd8 <main+0x638>
    4ddc:	98 a3       	std	Y+32, r25	; 0x20
    4dde:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4de0:	89 a1       	ldd	r24, Y+33	; 0x21
    4de2:	9a a1       	ldd	r25, Y+34	; 0x22
    4de4:	01 97       	sbiw	r24, 0x01	; 1
    4de6:	9a a3       	std	Y+34, r25	; 0x22
    4de8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4dea:	89 a1       	ldd	r24, Y+33	; 0x21
    4dec:	9a a1       	ldd	r25, Y+34	; 0x22
    4dee:	00 97       	sbiw	r24, 0x00	; 0
    4df0:	69 f7       	brne	.-38     	; 0x4dcc <main+0x62c>
    4df2:	14 c0       	rjmp	.+40     	; 0x4e1c <main+0x67c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4df4:	6b a1       	ldd	r22, Y+35	; 0x23
    4df6:	7c a1       	ldd	r23, Y+36	; 0x24
    4df8:	8d a1       	ldd	r24, Y+37	; 0x25
    4dfa:	9e a1       	ldd	r25, Y+38	; 0x26
    4dfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e00:	dc 01       	movw	r26, r24
    4e02:	cb 01       	movw	r24, r22
    4e04:	9a a3       	std	Y+34, r25	; 0x22
    4e06:	89 a3       	std	Y+33, r24	; 0x21
    4e08:	89 a1       	ldd	r24, Y+33	; 0x21
    4e0a:	9a a1       	ldd	r25, Y+34	; 0x22
    4e0c:	9e 8f       	std	Y+30, r25	; 0x1e
    4e0e:	8d 8f       	std	Y+29, r24	; 0x1d
    4e10:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4e12:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4e14:	01 97       	sbiw	r24, 0x01	; 1
    4e16:	f1 f7       	brne	.-4      	; 0x4e14 <main+0x674>
    4e18:	9e 8f       	std	Y+30, r25	; 0x1e
    4e1a:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(1000);
				LCD_enuClearScreen();
    4e1c:	0e 94 df 1c 	call	0x39be	; 0x39be <LCD_enuClearScreen>
				LCD_enuWriteString("Enter User Name");
    4e20:	83 e0       	ldi	r24, 0x03	; 3
    4e22:	92 e0       	ldi	r25, 0x02	; 2
    4e24:	0e 94 b9 1c 	call	0x3972	; 0x3972 <LCD_enuWriteString>
			    HC05_enuSendString("Enter New User Name\r\n");
    4e28:	83 e1       	ldi	r24, 0x13	; 19
    4e2a:	92 e0       	ldi	r25, 0x02	; 2
    4e2c:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
				GetId(Copy_ID,Admin_Mode);
    4e30:	ce 01       	movw	r24, r28
    4e32:	cb 96       	adiw	r24, 0x3b	; 59
    4e34:	61 e0       	ldi	r22, 0x01	; 1
    4e36:	0e 94 4a 29 	call	0x5294	; 0x5294 <GetId>
				LCD_enuClearScreen();
    4e3a:	0e 94 df 1c 	call	0x39be	; 0x39be <LCD_enuClearScreen>
				//LCD_enuWriteString("Enter Password");
				HC05_enuSendString("Enter Password\r\n");
    4e3e:	89 e2       	ldi	r24, 0x29	; 41
    4e40:	92 e0       	ldi	r25, 0x02	; 2
    4e42:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
				GetPassword(Copy_Password,Admin_Mode);
    4e46:	ce 01       	movw	r24, r28
    4e48:	cf 96       	adiw	r24, 0x3f	; 63
    4e4a:	61 e0       	ldi	r22, 0x01	; 1
    4e4c:	0e 94 ab 2a 	call	0x5556	; 0x5556 <GetPassword>
				HC05_enuSendString("\r\n");
    4e50:	80 e0       	ldi	r24, 0x00	; 0
    4e52:	92 e0       	ldi	r25, 0x02	; 2
    4e54:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
				AddUser(Copy_ID,Copy_Password);
    4e58:	ce 01       	movw	r24, r28
    4e5a:	cb 96       	adiw	r24, 0x3b	; 59
    4e5c:	9e 01       	movw	r18, r28
    4e5e:	21 5c       	subi	r18, 0xC1	; 193
    4e60:	3f 4f       	sbci	r19, 0xFF	; 255
    4e62:	b9 01       	movw	r22, r18
    4e64:	0e 94 a2 2e 	call	0x5d44	; 0x5d44 <AddUser>
    4e68:	fa cc       	rjmp	.-1548   	; 0x485e <main+0xbe>
				//STATE=ADMIN_CONTROL;
				break;
			case'3':
				// get the number of users
				EEPROM_enuRead(&Number_Users,0,90);
    4e6a:	ce 01       	movw	r24, r28
    4e6c:	ca 96       	adiw	r24, 0x3a	; 58
    4e6e:	60 e0       	ldi	r22, 0x00	; 0
    4e70:	4a e5       	ldi	r20, 0x5A	; 90
    4e72:	0e 94 01 21 	call	0x4202	; 0x4202 <EEPROM_enuRead>
				LCD_enuClearScreen();
    4e76:	0e 94 df 1c 	call	0x39be	; 0x39be <LCD_enuClearScreen>
				LCD_enuWriteString("USE Bluetooth");
    4e7a:	8a e3       	ldi	r24, 0x3A	; 58
    4e7c:	92 e0       	ldi	r25, 0x02	; 2
    4e7e:	0e 94 b9 1c 	call	0x3972	; 0x3972 <LCD_enuWriteString>
    4e82:	80 e0       	ldi	r24, 0x00	; 0
    4e84:	90 e0       	ldi	r25, 0x00	; 0
    4e86:	aa e7       	ldi	r26, 0x7A	; 122
    4e88:	b4 e4       	ldi	r27, 0x44	; 68
    4e8a:	89 8f       	std	Y+25, r24	; 0x19
    4e8c:	9a 8f       	std	Y+26, r25	; 0x1a
    4e8e:	ab 8f       	std	Y+27, r26	; 0x1b
    4e90:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e92:	69 8d       	ldd	r22, Y+25	; 0x19
    4e94:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4e96:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4e98:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4e9a:	20 e0       	ldi	r18, 0x00	; 0
    4e9c:	30 e0       	ldi	r19, 0x00	; 0
    4e9e:	4a e7       	ldi	r20, 0x7A	; 122
    4ea0:	55 e4       	ldi	r21, 0x45	; 69
    4ea2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ea6:	dc 01       	movw	r26, r24
    4ea8:	cb 01       	movw	r24, r22
    4eaa:	8d 8b       	std	Y+21, r24	; 0x15
    4eac:	9e 8b       	std	Y+22, r25	; 0x16
    4eae:	af 8b       	std	Y+23, r26	; 0x17
    4eb0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4eb2:	6d 89       	ldd	r22, Y+21	; 0x15
    4eb4:	7e 89       	ldd	r23, Y+22	; 0x16
    4eb6:	8f 89       	ldd	r24, Y+23	; 0x17
    4eb8:	98 8d       	ldd	r25, Y+24	; 0x18
    4eba:	20 e0       	ldi	r18, 0x00	; 0
    4ebc:	30 e0       	ldi	r19, 0x00	; 0
    4ebe:	40 e8       	ldi	r20, 0x80	; 128
    4ec0:	5f e3       	ldi	r21, 0x3F	; 63
    4ec2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4ec6:	88 23       	and	r24, r24
    4ec8:	2c f4       	brge	.+10     	; 0x4ed4 <main+0x734>
		__ticks = 1;
    4eca:	81 e0       	ldi	r24, 0x01	; 1
    4ecc:	90 e0       	ldi	r25, 0x00	; 0
    4ece:	9c 8b       	std	Y+20, r25	; 0x14
    4ed0:	8b 8b       	std	Y+19, r24	; 0x13
    4ed2:	3f c0       	rjmp	.+126    	; 0x4f52 <main+0x7b2>
	else if (__tmp > 65535)
    4ed4:	6d 89       	ldd	r22, Y+21	; 0x15
    4ed6:	7e 89       	ldd	r23, Y+22	; 0x16
    4ed8:	8f 89       	ldd	r24, Y+23	; 0x17
    4eda:	98 8d       	ldd	r25, Y+24	; 0x18
    4edc:	20 e0       	ldi	r18, 0x00	; 0
    4ede:	3f ef       	ldi	r19, 0xFF	; 255
    4ee0:	4f e7       	ldi	r20, 0x7F	; 127
    4ee2:	57 e4       	ldi	r21, 0x47	; 71
    4ee4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4ee8:	18 16       	cp	r1, r24
    4eea:	4c f5       	brge	.+82     	; 0x4f3e <main+0x79e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4eec:	69 8d       	ldd	r22, Y+25	; 0x19
    4eee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4ef0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4ef2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4ef4:	20 e0       	ldi	r18, 0x00	; 0
    4ef6:	30 e0       	ldi	r19, 0x00	; 0
    4ef8:	40 e2       	ldi	r20, 0x20	; 32
    4efa:	51 e4       	ldi	r21, 0x41	; 65
    4efc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f00:	dc 01       	movw	r26, r24
    4f02:	cb 01       	movw	r24, r22
    4f04:	bc 01       	movw	r22, r24
    4f06:	cd 01       	movw	r24, r26
    4f08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f0c:	dc 01       	movw	r26, r24
    4f0e:	cb 01       	movw	r24, r22
    4f10:	9c 8b       	std	Y+20, r25	; 0x14
    4f12:	8b 8b       	std	Y+19, r24	; 0x13
    4f14:	0f c0       	rjmp	.+30     	; 0x4f34 <main+0x794>
    4f16:	80 e9       	ldi	r24, 0x90	; 144
    4f18:	91 e0       	ldi	r25, 0x01	; 1
    4f1a:	9a 8b       	std	Y+18, r25	; 0x12
    4f1c:	89 8b       	std	Y+17, r24	; 0x11
    4f1e:	89 89       	ldd	r24, Y+17	; 0x11
    4f20:	9a 89       	ldd	r25, Y+18	; 0x12
    4f22:	01 97       	sbiw	r24, 0x01	; 1
    4f24:	f1 f7       	brne	.-4      	; 0x4f22 <main+0x782>
    4f26:	9a 8b       	std	Y+18, r25	; 0x12
    4f28:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f2a:	8b 89       	ldd	r24, Y+19	; 0x13
    4f2c:	9c 89       	ldd	r25, Y+20	; 0x14
    4f2e:	01 97       	sbiw	r24, 0x01	; 1
    4f30:	9c 8b       	std	Y+20, r25	; 0x14
    4f32:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f34:	8b 89       	ldd	r24, Y+19	; 0x13
    4f36:	9c 89       	ldd	r25, Y+20	; 0x14
    4f38:	00 97       	sbiw	r24, 0x00	; 0
    4f3a:	69 f7       	brne	.-38     	; 0x4f16 <main+0x776>
    4f3c:	14 c0       	rjmp	.+40     	; 0x4f66 <main+0x7c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f3e:	6d 89       	ldd	r22, Y+21	; 0x15
    4f40:	7e 89       	ldd	r23, Y+22	; 0x16
    4f42:	8f 89       	ldd	r24, Y+23	; 0x17
    4f44:	98 8d       	ldd	r25, Y+24	; 0x18
    4f46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f4a:	dc 01       	movw	r26, r24
    4f4c:	cb 01       	movw	r24, r22
    4f4e:	9c 8b       	std	Y+20, r25	; 0x14
    4f50:	8b 8b       	std	Y+19, r24	; 0x13
    4f52:	8b 89       	ldd	r24, Y+19	; 0x13
    4f54:	9c 89       	ldd	r25, Y+20	; 0x14
    4f56:	98 8b       	std	Y+16, r25	; 0x10
    4f58:	8f 87       	std	Y+15, r24	; 0x0f
    4f5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    4f5c:	98 89       	ldd	r25, Y+16	; 0x10
    4f5e:	01 97       	sbiw	r24, 0x01	; 1
    4f60:	f1 f7       	brne	.-4      	; 0x4f5e <main+0x7be>
    4f62:	98 8b       	std	Y+16, r25	; 0x10
    4f64:	8f 87       	std	Y+15, r24	; 0x0f
				//HC05_enuSendString("Use the Bluetooth\r\n");
				_delay_ms(1000);
				HC05_enuSendString("Enter The User Name Do you want to remove\r\n");
    4f66:	88 e4       	ldi	r24, 0x48	; 72
    4f68:	92 e0       	ldi	r25, 0x02	; 2
    4f6a:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
				GetId(Copy_ID,Admin_Mode);
    4f6e:	ce 01       	movw	r24, r28
    4f70:	cb 96       	adiw	r24, 0x3b	; 59
    4f72:	61 e0       	ldi	r22, 0x01	; 1
    4f74:	0e 94 4a 29 	call	0x5294	; 0x5294 <GetId>
				DeleteUser(Number_Users,Copy_ID);
    4f78:	8a ad       	ldd	r24, Y+58	; 0x3a
    4f7a:	9e 01       	movw	r18, r28
    4f7c:	25 5c       	subi	r18, 0xC5	; 197
    4f7e:	3f 4f       	sbci	r19, 0xFF	; 255
    4f80:	b9 01       	movw	r22, r18
    4f82:	0e 94 36 33 	call	0x666c	; 0x666c <DeleteUser>
    4f86:	6b cc       	rjmp	.-1834   	; 0x485e <main+0xbe>
				break;
			case'4':
				HC05_enuSendString("Enter the Number of the LED (1 to 5)\r\n");
    4f88:	84 e7       	ldi	r24, 0x74	; 116
    4f8a:	92 e0       	ldi	r25, 0x02	; 2
    4f8c:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
				Recieve_Date=0;
    4f90:	fe 01       	movw	r30, r28
    4f92:	e4 5b       	subi	r30, 0xB4	; 180
    4f94:	ff 4f       	sbci	r31, 0xFF	; 255
    4f96:	10 82       	st	Z, r1
				HC05_enuRecieveChar(&Recieve_Date);
    4f98:	ce 01       	movw	r24, r28
    4f9a:	84 5b       	subi	r24, 0xB4	; 180
    4f9c:	9f 4f       	sbci	r25, 0xFF	; 255
    4f9e:	0e 94 ba 20 	call	0x4174	; 0x4174 <HC05_enuRecieveChar>
				LedsControl(Leds_State,Recieve_Date);
    4fa2:	fe 01       	movw	r30, r28
    4fa4:	e4 5b       	subi	r30, 0xB4	; 180
    4fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    4fa8:	20 81       	ld	r18, Z
    4faa:	ce 01       	movw	r24, r28
    4fac:	8c 5b       	subi	r24, 0xBC	; 188
    4fae:	9f 4f       	sbci	r25, 0xFF	; 255
    4fb0:	62 2f       	mov	r22, r18
    4fb2:	0e 94 59 35 	call	0x6ab2	; 0x6ab2 <LedsControl>
    4fb6:	53 cc       	rjmp	.-1882   	; 0x485e <main+0xbe>
				break;
			case'5':
				SensorControl(&SENSOR_State);
    4fb8:	ce 01       	movw	r24, r28
    4fba:	86 5b       	subi	r24, 0xB6	; 182
    4fbc:	9f 4f       	sbci	r25, 0xFF	; 255
    4fbe:	0e 94 f5 33 	call	0x67ea	; 0x67ea <SensorControl>
    4fc2:	4d cc       	rjmp	.-1894   	; 0x485e <main+0xbe>
				break;
			case'6':
				HC05_enuSendString("Enter Intensity from 1 to 9   0-OFF \r\n");
    4fc4:	8b e9       	ldi	r24, 0x9B	; 155
    4fc6:	92 e0       	ldi	r25, 0x02	; 2
    4fc8:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
				HC05_enuRecieveChar(&Recieve_Date);
    4fcc:	ce 01       	movw	r24, r28
    4fce:	84 5b       	subi	r24, 0xB4	; 180
    4fd0:	9f 4f       	sbci	r25, 0xFF	; 255
    4fd2:	0e 94 ba 20 	call	0x4174	; 0x4174 <HC05_enuRecieveChar>
				DimmmerControl(&Dimmer_State,Recieve_Date);
    4fd6:	fe 01       	movw	r30, r28
    4fd8:	e4 5b       	subi	r30, 0xB4	; 180
    4fda:	ff 4f       	sbci	r31, 0xFF	; 255
    4fdc:	20 81       	ld	r18, Z
    4fde:	ce 01       	movw	r24, r28
    4fe0:	85 5b       	subi	r24, 0xB5	; 181
    4fe2:	9f 4f       	sbci	r25, 0xFF	; 255
    4fe4:	62 2f       	mov	r22, r18
    4fe6:	0e 94 c7 36 	call	0x6d8e	; 0x6d8e <DimmmerControl>
    4fea:	39 cc       	rjmp	.-1934   	; 0x485e <main+0xbe>

				break;
			case '7':
				HC05_enuSendString("System Changed to User Mode\r\n");
    4fec:	82 ec       	ldi	r24, 0xC2	; 194
    4fee:	92 e0       	ldi	r25, 0x02	; 2
    4ff0:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
				STATE=USER_LOGIN;
    4ff4:	83 e0       	ldi	r24, 0x03	; 3
    4ff6:	80 93 33 08 	sts	0x0833, r24
    4ffa:	31 cc       	rjmp	.-1950   	; 0x485e <main+0xbe>
				break;
			case '8':
				Reset(&SENSOR_State,&SERVO_State,Leds_State,&Dimmer_State);
    4ffc:	ce 01       	movw	r24, r28
    4ffe:	86 5b       	subi	r24, 0xB6	; 182
    5000:	9f 4f       	sbci	r25, 0xFF	; 255
    5002:	9e 01       	movw	r18, r28
    5004:	27 5b       	subi	r18, 0xB7	; 183
    5006:	3f 4f       	sbci	r19, 0xFF	; 255
    5008:	ae 01       	movw	r20, r28
    500a:	4c 5b       	subi	r20, 0xBC	; 188
    500c:	5f 4f       	sbci	r21, 0xFF	; 255
    500e:	fe 01       	movw	r30, r28
    5010:	e5 5b       	subi	r30, 0xB5	; 181
    5012:	ff 4f       	sbci	r31, 0xFF	; 255
    5014:	b9 01       	movw	r22, r18
    5016:	9f 01       	movw	r18, r30
    5018:	0e 94 8c 38 	call	0x7118	; 0x7118 <Reset>
    501c:	20 cc       	rjmp	.-1984   	; 0x485e <main+0xbe>
				break;
			case'9':
				//HC05_enuSendString("System Changed to User Mode\r\n");
				 Display_System(&STATE,SENSOR_State,SERVO_State,Leds_State,Dimmer_State);
    501e:	fe 01       	movw	r30, r28
    5020:	e6 5b       	subi	r30, 0xB6	; 182
    5022:	ff 4f       	sbci	r31, 0xFF	; 255
    5024:	40 81       	ld	r20, Z
    5026:	fe 01       	movw	r30, r28
    5028:	e7 5b       	subi	r30, 0xB7	; 183
    502a:	ff 4f       	sbci	r31, 0xFF	; 255
    502c:	50 81       	ld	r21, Z
    502e:	fe 01       	movw	r30, r28
    5030:	e5 5b       	subi	r30, 0xB5	; 181
    5032:	ff 4f       	sbci	r31, 0xFF	; 255
    5034:	70 81       	ld	r23, Z
    5036:	83 e3       	ldi	r24, 0x33	; 51
    5038:	98 e0       	ldi	r25, 0x08	; 8
    503a:	9e 01       	movw	r18, r28
    503c:	2c 5b       	subi	r18, 0xBC	; 188
    503e:	3f 4f       	sbci	r19, 0xFF	; 255
    5040:	64 2f       	mov	r22, r20
    5042:	45 2f       	mov	r20, r21
    5044:	07 2f       	mov	r16, r23
    5046:	0e 94 e4 38 	call	0x71c8	; 0x71c8 <Display_System>
    504a:	09 cc       	rjmp	.-2030   	; 0x485e <main+0xbe>
			default:
				break;
			}
			break;
			case USER_CONTROL:
				LCD_enuClearScreen();
    504c:	0e 94 df 1c 	call	0x39be	; 0x39be <LCD_enuClearScreen>
				LCD_enuWriteString("1-Leds 2-AC");
    5050:	80 ee       	ldi	r24, 0xE0	; 224
    5052:	92 e0       	ldi	r25, 0x02	; 2
    5054:	0e 94 b9 1c 	call	0x3972	; 0x3972 <LCD_enuWriteString>
				LCD_enuGoToPosition(1,0);
    5058:	81 e0       	ldi	r24, 0x01	; 1
    505a:	60 e0       	ldi	r22, 0x00	; 0
    505c:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <LCD_enuGoToPosition>
				LCD_enuWriteString("3-DIMMER 4-OK");
    5060:	8c ee       	ldi	r24, 0xEC	; 236
    5062:	92 e0       	ldi	r25, 0x02	; 2
    5064:	0e 94 b9 1c 	call	0x3972	; 0x3972 <LCD_enuWriteString>
				Key_Data=KEY_NOT_PRESSED;
    5068:	fe 01       	movw	r30, r28
    506a:	ed 5b       	subi	r30, 0xBD	; 189
    506c:	ff 4f       	sbci	r31, 0xFF	; 255
    506e:	8f ef       	ldi	r24, 0xFF	; 255
    5070:	80 83       	st	Z, r24
    5072:	8d c0       	rjmp	.+282    	; 0x518e <main+0x9ee>
				while(Key_Data==KEY_NOT_PRESSED){
					KEYPAD_enuGetPressedKey(&Key_Data);
    5074:	ce 01       	movw	r24, r28
    5076:	8d 5b       	subi	r24, 0xBD	; 189
    5078:	9f 4f       	sbci	r25, 0xFF	; 255
    507a:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <KEYPAD_enuGetPressedKey>
					if(Key_Data=='1'){
    507e:	fe 01       	movw	r30, r28
    5080:	ed 5b       	subi	r30, 0xBD	; 189
    5082:	ff 4f       	sbci	r31, 0xFF	; 255
    5084:	80 81       	ld	r24, Z
    5086:	81 33       	cpi	r24, 0x31	; 49
    5088:	51 f5       	brne	.+84     	; 0x50de <main+0x93e>
						LCD_enuClearScreen();
    508a:	0e 94 df 1c 	call	0x39be	; 0x39be <LCD_enuClearScreen>
						LCD_enuWriteString("Enter Number of LED");
    508e:	8a ef       	ldi	r24, 0xFA	; 250
    5090:	92 e0       	ldi	r25, 0x02	; 2
    5092:	0e 94 b9 1c 	call	0x3972	; 0x3972 <LCD_enuWriteString>
						LCD_enuGoToPosition(1,0);
    5096:	81 e0       	ldi	r24, 0x01	; 1
    5098:	60 e0       	ldi	r22, 0x00	; 0
    509a:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <LCD_enuGoToPosition>
						LCD_enuWriteString("from 1 to 5");
    509e:	8e e0       	ldi	r24, 0x0E	; 14
    50a0:	93 e0       	ldi	r25, 0x03	; 3
    50a2:	0e 94 b9 1c 	call	0x3972	; 0x3972 <LCD_enuWriteString>
						u8 key_led_num=KEY_NOT_PRESSED;
    50a6:	fe 01       	movw	r30, r28
    50a8:	e1 5b       	subi	r30, 0xB1	; 177
    50aa:	ff 4f       	sbci	r31, 0xFF	; 255
    50ac:	8f ef       	ldi	r24, 0xFF	; 255
    50ae:	80 83       	st	Z, r24
    50b0:	05 c0       	rjmp	.+10     	; 0x50bc <main+0x91c>
						while(key_led_num==KEY_NOT_PRESSED){
							KEYPAD_enuGetPressedKey(&key_led_num);
    50b2:	ce 01       	movw	r24, r28
    50b4:	81 5b       	subi	r24, 0xB1	; 177
    50b6:	9f 4f       	sbci	r25, 0xFF	; 255
    50b8:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <KEYPAD_enuGetPressedKey>
						LCD_enuClearScreen();
						LCD_enuWriteString("Enter Number of LED");
						LCD_enuGoToPosition(1,0);
						LCD_enuWriteString("from 1 to 5");
						u8 key_led_num=KEY_NOT_PRESSED;
						while(key_led_num==KEY_NOT_PRESSED){
    50bc:	fe 01       	movw	r30, r28
    50be:	e1 5b       	subi	r30, 0xB1	; 177
    50c0:	ff 4f       	sbci	r31, 0xFF	; 255
    50c2:	80 81       	ld	r24, Z
    50c4:	8f 3f       	cpi	r24, 0xFF	; 255
    50c6:	a9 f3       	breq	.-22     	; 0x50b2 <main+0x912>
							KEYPAD_enuGetPressedKey(&key_led_num);
						}
						LedsControl(Leds_State,key_led_num);
    50c8:	fe 01       	movw	r30, r28
    50ca:	e1 5b       	subi	r30, 0xB1	; 177
    50cc:	ff 4f       	sbci	r31, 0xFF	; 255
    50ce:	20 81       	ld	r18, Z
    50d0:	ce 01       	movw	r24, r28
    50d2:	8c 5b       	subi	r24, 0xBC	; 188
    50d4:	9f 4f       	sbci	r25, 0xFF	; 255
    50d6:	62 2f       	mov	r22, r18
    50d8:	0e 94 59 35 	call	0x6ab2	; 0x6ab2 <LedsControl>
    50dc:	58 c0       	rjmp	.+176    	; 0x518e <main+0x9ee>
					}
					else if(Key_Data=='2'){
    50de:	fe 01       	movw	r30, r28
    50e0:	ed 5b       	subi	r30, 0xBD	; 189
    50e2:	ff 4f       	sbci	r31, 0xFF	; 255
    50e4:	80 81       	ld	r24, Z
    50e6:	82 33       	cpi	r24, 0x32	; 50
    50e8:	31 f4       	brne	.+12     	; 0x50f6 <main+0x956>
						SensorControl(&SENSOR_State);
    50ea:	ce 01       	movw	r24, r28
    50ec:	86 5b       	subi	r24, 0xB6	; 182
    50ee:	9f 4f       	sbci	r25, 0xFF	; 255
    50f0:	0e 94 f5 33 	call	0x67ea	; 0x67ea <SensorControl>
    50f4:	4c c0       	rjmp	.+152    	; 0x518e <main+0x9ee>
					}
					else if(Key_Data=='3'){
    50f6:	fe 01       	movw	r30, r28
    50f8:	ed 5b       	subi	r30, 0xBD	; 189
    50fa:	ff 4f       	sbci	r31, 0xFF	; 255
    50fc:	80 81       	ld	r24, Z
    50fe:	83 33       	cpi	r24, 0x33	; 51
    5100:	51 f5       	brne	.+84     	; 0x5156 <main+0x9b6>
						LCD_enuClearScreen();
    5102:	0e 94 df 1c 	call	0x39be	; 0x39be <LCD_enuClearScreen>
						LCD_enuWriteString("Enter Intensity");
    5106:	8a e1       	ldi	r24, 0x1A	; 26
    5108:	93 e0       	ldi	r25, 0x03	; 3
    510a:	0e 94 b9 1c 	call	0x3972	; 0x3972 <LCD_enuWriteString>
						LCD_enuGoToPosition(1,0);
    510e:	81 e0       	ldi	r24, 0x01	; 1
    5110:	60 e0       	ldi	r22, 0x00	; 0
    5112:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <LCD_enuGoToPosition>
						LCD_enuWriteString("1 to 9 ** 0-OFF");
    5116:	8a e2       	ldi	r24, 0x2A	; 42
    5118:	93 e0       	ldi	r25, 0x03	; 3
    511a:	0e 94 b9 1c 	call	0x3972	; 0x3972 <LCD_enuWriteString>
						u8 key_intensty=KEY_NOT_PRESSED;
    511e:	fe 01       	movw	r30, r28
    5120:	e0 5b       	subi	r30, 0xB0	; 176
    5122:	ff 4f       	sbci	r31, 0xFF	; 255
    5124:	8f ef       	ldi	r24, 0xFF	; 255
    5126:	80 83       	st	Z, r24
    5128:	05 c0       	rjmp	.+10     	; 0x5134 <main+0x994>
						while (key_intensty==KEY_NOT_PRESSED){
							KEYPAD_enuGetPressedKey(&key_intensty);
    512a:	ce 01       	movw	r24, r28
    512c:	80 5b       	subi	r24, 0xB0	; 176
    512e:	9f 4f       	sbci	r25, 0xFF	; 255
    5130:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <KEYPAD_enuGetPressedKey>
						LCD_enuClearScreen();
						LCD_enuWriteString("Enter Intensity");
						LCD_enuGoToPosition(1,0);
						LCD_enuWriteString("1 to 9 ** 0-OFF");
						u8 key_intensty=KEY_NOT_PRESSED;
						while (key_intensty==KEY_NOT_PRESSED){
    5134:	fe 01       	movw	r30, r28
    5136:	e0 5b       	subi	r30, 0xB0	; 176
    5138:	ff 4f       	sbci	r31, 0xFF	; 255
    513a:	80 81       	ld	r24, Z
    513c:	8f 3f       	cpi	r24, 0xFF	; 255
    513e:	a9 f3       	breq	.-22     	; 0x512a <main+0x98a>
							KEYPAD_enuGetPressedKey(&key_intensty);
						}

						DimmmerControl(&Dimmer_State,key_intensty);
    5140:	fe 01       	movw	r30, r28
    5142:	e0 5b       	subi	r30, 0xB0	; 176
    5144:	ff 4f       	sbci	r31, 0xFF	; 255
    5146:	20 81       	ld	r18, Z
    5148:	ce 01       	movw	r24, r28
    514a:	85 5b       	subi	r24, 0xB5	; 181
    514c:	9f 4f       	sbci	r25, 0xFF	; 255
    514e:	62 2f       	mov	r22, r18
    5150:	0e 94 c7 36 	call	0x6d8e	; 0x6d8e <DimmmerControl>
    5154:	1c c0       	rjmp	.+56     	; 0x518e <main+0x9ee>
					}
					else if (Key_Data=='4'){
    5156:	fe 01       	movw	r30, r28
    5158:	ed 5b       	subi	r30, 0xBD	; 189
    515a:	ff 4f       	sbci	r31, 0xFF	; 255
    515c:	80 81       	ld	r24, Z
    515e:	84 33       	cpi	r24, 0x34	; 52
    5160:	b1 f4       	brne	.+44     	; 0x518e <main+0x9ee>
						 Display_System(&STATE,SENSOR_State,SERVO_State,Leds_State,Dimmer_State);
    5162:	fe 01       	movw	r30, r28
    5164:	e6 5b       	subi	r30, 0xB6	; 182
    5166:	ff 4f       	sbci	r31, 0xFF	; 255
    5168:	40 81       	ld	r20, Z
    516a:	fe 01       	movw	r30, r28
    516c:	e7 5b       	subi	r30, 0xB7	; 183
    516e:	ff 4f       	sbci	r31, 0xFF	; 255
    5170:	50 81       	ld	r21, Z
    5172:	fe 01       	movw	r30, r28
    5174:	e5 5b       	subi	r30, 0xB5	; 181
    5176:	ff 4f       	sbci	r31, 0xFF	; 255
    5178:	70 81       	ld	r23, Z
    517a:	83 e3       	ldi	r24, 0x33	; 51
    517c:	98 e0       	ldi	r25, 0x08	; 8
    517e:	9e 01       	movw	r18, r28
    5180:	2c 5b       	subi	r18, 0xBC	; 188
    5182:	3f 4f       	sbci	r19, 0xFF	; 255
    5184:	64 2f       	mov	r22, r20
    5186:	45 2f       	mov	r20, r21
    5188:	07 2f       	mov	r16, r23
    518a:	0e 94 e4 38 	call	0x71c8	; 0x71c8 <Display_System>
				LCD_enuClearScreen();
				LCD_enuWriteString("1-Leds 2-AC");
				LCD_enuGoToPosition(1,0);
				LCD_enuWriteString("3-DIMMER 4-OK");
				Key_Data=KEY_NOT_PRESSED;
				while(Key_Data==KEY_NOT_PRESSED){
    518e:	fe 01       	movw	r30, r28
    5190:	ed 5b       	subi	r30, 0xBD	; 189
    5192:	ff 4f       	sbci	r31, 0xFF	; 255
    5194:	80 81       	ld	r24, Z
    5196:	8f 3f       	cpi	r24, 0xFF	; 255
    5198:	09 f4       	brne	.+2      	; 0x519c <main+0x9fc>
    519a:	6c cf       	rjmp	.-296    	; 0x5074 <main+0x8d4>
    519c:	60 cb       	rjmp	.-2368   	; 0x485e <main+0xbe>
						 Display_System(&STATE,SENSOR_State,SERVO_State,Leds_State,Dimmer_State);
					}
				}
				break;
			case NO_DATA:
				LCD_enuClearScreen();
    519e:	0e 94 df 1c 	call	0x39be	; 0x39be <LCD_enuClearScreen>
                STATE=WELCOM_PAGE;
    51a2:	10 92 33 08 	sts	0x0833, r1
                LCD_enuWriteString("welcome page");
    51a6:	8a e3       	ldi	r24, 0x3A	; 58
    51a8:	93 e0       	ldi	r25, 0x03	; 3
    51aa:	0e 94 b9 1c 	call	0x3972	; 0x3972 <LCD_enuWriteString>
    51ae:	80 e0       	ldi	r24, 0x00	; 0
    51b0:	90 e0       	ldi	r25, 0x00	; 0
    51b2:	aa e7       	ldi	r26, 0x7A	; 122
    51b4:	b4 e4       	ldi	r27, 0x44	; 68
    51b6:	8b 87       	std	Y+11, r24	; 0x0b
    51b8:	9c 87       	std	Y+12, r25	; 0x0c
    51ba:	ad 87       	std	Y+13, r26	; 0x0d
    51bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    51be:	6b 85       	ldd	r22, Y+11	; 0x0b
    51c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    51c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    51c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    51c6:	20 e0       	ldi	r18, 0x00	; 0
    51c8:	30 e0       	ldi	r19, 0x00	; 0
    51ca:	4a e7       	ldi	r20, 0x7A	; 122
    51cc:	55 e4       	ldi	r21, 0x45	; 69
    51ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51d2:	dc 01       	movw	r26, r24
    51d4:	cb 01       	movw	r24, r22
    51d6:	8f 83       	std	Y+7, r24	; 0x07
    51d8:	98 87       	std	Y+8, r25	; 0x08
    51da:	a9 87       	std	Y+9, r26	; 0x09
    51dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    51de:	6f 81       	ldd	r22, Y+7	; 0x07
    51e0:	78 85       	ldd	r23, Y+8	; 0x08
    51e2:	89 85       	ldd	r24, Y+9	; 0x09
    51e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    51e6:	20 e0       	ldi	r18, 0x00	; 0
    51e8:	30 e0       	ldi	r19, 0x00	; 0
    51ea:	40 e8       	ldi	r20, 0x80	; 128
    51ec:	5f e3       	ldi	r21, 0x3F	; 63
    51ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    51f2:	88 23       	and	r24, r24
    51f4:	2c f4       	brge	.+10     	; 0x5200 <main+0xa60>
		__ticks = 1;
    51f6:	81 e0       	ldi	r24, 0x01	; 1
    51f8:	90 e0       	ldi	r25, 0x00	; 0
    51fa:	9e 83       	std	Y+6, r25	; 0x06
    51fc:	8d 83       	std	Y+5, r24	; 0x05
    51fe:	3f c0       	rjmp	.+126    	; 0x527e <main+0xade>
	else if (__tmp > 65535)
    5200:	6f 81       	ldd	r22, Y+7	; 0x07
    5202:	78 85       	ldd	r23, Y+8	; 0x08
    5204:	89 85       	ldd	r24, Y+9	; 0x09
    5206:	9a 85       	ldd	r25, Y+10	; 0x0a
    5208:	20 e0       	ldi	r18, 0x00	; 0
    520a:	3f ef       	ldi	r19, 0xFF	; 255
    520c:	4f e7       	ldi	r20, 0x7F	; 127
    520e:	57 e4       	ldi	r21, 0x47	; 71
    5210:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5214:	18 16       	cp	r1, r24
    5216:	4c f5       	brge	.+82     	; 0x526a <main+0xaca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5218:	6b 85       	ldd	r22, Y+11	; 0x0b
    521a:	7c 85       	ldd	r23, Y+12	; 0x0c
    521c:	8d 85       	ldd	r24, Y+13	; 0x0d
    521e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5220:	20 e0       	ldi	r18, 0x00	; 0
    5222:	30 e0       	ldi	r19, 0x00	; 0
    5224:	40 e2       	ldi	r20, 0x20	; 32
    5226:	51 e4       	ldi	r21, 0x41	; 65
    5228:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    522c:	dc 01       	movw	r26, r24
    522e:	cb 01       	movw	r24, r22
    5230:	bc 01       	movw	r22, r24
    5232:	cd 01       	movw	r24, r26
    5234:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5238:	dc 01       	movw	r26, r24
    523a:	cb 01       	movw	r24, r22
    523c:	9e 83       	std	Y+6, r25	; 0x06
    523e:	8d 83       	std	Y+5, r24	; 0x05
    5240:	0f c0       	rjmp	.+30     	; 0x5260 <main+0xac0>
    5242:	80 e9       	ldi	r24, 0x90	; 144
    5244:	91 e0       	ldi	r25, 0x01	; 1
    5246:	9c 83       	std	Y+4, r25	; 0x04
    5248:	8b 83       	std	Y+3, r24	; 0x03
    524a:	8b 81       	ldd	r24, Y+3	; 0x03
    524c:	9c 81       	ldd	r25, Y+4	; 0x04
    524e:	01 97       	sbiw	r24, 0x01	; 1
    5250:	f1 f7       	brne	.-4      	; 0x524e <main+0xaae>
    5252:	9c 83       	std	Y+4, r25	; 0x04
    5254:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5256:	8d 81       	ldd	r24, Y+5	; 0x05
    5258:	9e 81       	ldd	r25, Y+6	; 0x06
    525a:	01 97       	sbiw	r24, 0x01	; 1
    525c:	9e 83       	std	Y+6, r25	; 0x06
    525e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5260:	8d 81       	ldd	r24, Y+5	; 0x05
    5262:	9e 81       	ldd	r25, Y+6	; 0x06
    5264:	00 97       	sbiw	r24, 0x00	; 0
    5266:	69 f7       	brne	.-38     	; 0x5242 <main+0xaa2>
    5268:	fa ca       	rjmp	.-2572   	; 0x485e <main+0xbe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    526a:	6f 81       	ldd	r22, Y+7	; 0x07
    526c:	78 85       	ldd	r23, Y+8	; 0x08
    526e:	89 85       	ldd	r24, Y+9	; 0x09
    5270:	9a 85       	ldd	r25, Y+10	; 0x0a
    5272:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5276:	dc 01       	movw	r26, r24
    5278:	cb 01       	movw	r24, r22
    527a:	9e 83       	std	Y+6, r25	; 0x06
    527c:	8d 83       	std	Y+5, r24	; 0x05
    527e:	8d 81       	ldd	r24, Y+5	; 0x05
    5280:	9e 81       	ldd	r25, Y+6	; 0x06
    5282:	9a 83       	std	Y+2, r25	; 0x02
    5284:	89 83       	std	Y+1, r24	; 0x01
    5286:	89 81       	ldd	r24, Y+1	; 0x01
    5288:	9a 81       	ldd	r25, Y+2	; 0x02
    528a:	01 97       	sbiw	r24, 0x01	; 1
    528c:	f1 f7       	brne	.-4      	; 0x528a <main+0xaea>
    528e:	9a 83       	std	Y+2, r25	; 0x02
    5290:	89 83       	std	Y+1, r24	; 0x01
    5292:	e5 ca       	rjmp	.-2614   	; 0x485e <main+0xbe>

00005294 <GetId>:
				break;
	}
}
}

    void GetId(u8*Copy_u8Id, u8 Copy_u8Mode){
    5294:	df 93       	push	r29
    5296:	cf 93       	push	r28
    5298:	cd b7       	in	r28, 0x3d	; 61
    529a:	de b7       	in	r29, 0x3e	; 62
    529c:	a2 97       	sbiw	r28, 0x22	; 34
    529e:	0f b6       	in	r0, 0x3f	; 63
    52a0:	f8 94       	cli
    52a2:	de bf       	out	0x3e, r29	; 62
    52a4:	0f be       	out	0x3f, r0	; 63
    52a6:	cd bf       	out	0x3d, r28	; 61
    52a8:	99 a3       	std	Y+33, r25	; 0x21
    52aa:	88 a3       	std	Y+32, r24	; 0x20
    52ac:	6a a3       	std	Y+34, r22	; 0x22
       u8 Num_Digit=0; u8 Key=KEY_NOT_PRESSED; u8 Data_Recived=0;
    52ae:	1d 8e       	std	Y+29, r1	; 0x1d
    52b0:	8f ef       	ldi	r24, 0xFF	; 255
    52b2:	8e 8f       	std	Y+30, r24	; 0x1e
    52b4:	1f 8e       	std	Y+31, r1	; 0x1f
       if (Copy_u8Mode==Admin_Mode){
    52b6:	8a a1       	ldd	r24, Y+34	; 0x22
    52b8:	81 30       	cpi	r24, 0x01	; 1
    52ba:	09 f0       	breq	.+2      	; 0x52be <GetId+0x2a>
    52bc:	a4 c0       	rjmp	.+328    	; 0x5406 <GetId+0x172>
    	   LCD_enuClearScreen();
    52be:	0e 94 df 1c 	call	0x39be	; 0x39be <LCD_enuClearScreen>
    	   LCD_enuWriteString("Enter User Name");
    52c2:	83 e0       	ldi	r24, 0x03	; 3
    52c4:	92 e0       	ldi	r25, 0x02	; 2
    52c6:	0e 94 b9 1c 	call	0x3972	; 0x3972 <LCD_enuWriteString>
    	   LCD_enuGoToPosition(1,0);
    52ca:	81 e0       	ldi	r24, 0x01	; 1
    52cc:	60 e0       	ldi	r22, 0x00	; 0
    52ce:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <LCD_enuGoToPosition>
    52d2:	1f c0       	rjmp	.+62     	; 0x5312 <GetId+0x7e>
    	   while(Num_Digit<4){
    		   HC05_enuRecieveChar(&Data_Recived);
    52d4:	ce 01       	movw	r24, r28
    52d6:	4f 96       	adiw	r24, 0x1f	; 31
    52d8:	0e 94 ba 20 	call	0x4174	; 0x4174 <HC05_enuRecieveChar>
    		   if(Data_Recived){
    52dc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    52de:	88 23       	and	r24, r24
    52e0:	c1 f0       	breq	.+48     	; 0x5312 <GetId+0x7e>
    			   Copy_u8Id[Num_Digit]=Data_Recived;
    52e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    52e4:	28 2f       	mov	r18, r24
    52e6:	30 e0       	ldi	r19, 0x00	; 0
    52e8:	88 a1       	ldd	r24, Y+32	; 0x20
    52ea:	99 a1       	ldd	r25, Y+33	; 0x21
    52ec:	fc 01       	movw	r30, r24
    52ee:	e2 0f       	add	r30, r18
    52f0:	f3 1f       	adc	r31, r19
    52f2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    52f4:	80 83       	st	Z, r24
    			   LCD_enuWriteCharacter(Copy_u8Id[Num_Digit]);
    52f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    52f8:	28 2f       	mov	r18, r24
    52fa:	30 e0       	ldi	r19, 0x00	; 0
    52fc:	88 a1       	ldd	r24, Y+32	; 0x20
    52fe:	99 a1       	ldd	r25, Y+33	; 0x21
    5300:	fc 01       	movw	r30, r24
    5302:	e2 0f       	add	r30, r18
    5304:	f3 1f       	adc	r31, r19
    5306:	80 81       	ld	r24, Z
    5308:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <LCD_enuWriteCharacter>
    			   Num_Digit++;
    530c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    530e:	8f 5f       	subi	r24, 0xFF	; 255
    5310:	8d 8f       	std	Y+29, r24	; 0x1d
       u8 Num_Digit=0; u8 Key=KEY_NOT_PRESSED; u8 Data_Recived=0;
       if (Copy_u8Mode==Admin_Mode){
    	   LCD_enuClearScreen();
    	   LCD_enuWriteString("Enter User Name");
    	   LCD_enuGoToPosition(1,0);
    	   while(Num_Digit<4){
    5312:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5314:	84 30       	cpi	r24, 0x04	; 4
    5316:	f0 f2       	brcs	.-68     	; 0x52d4 <GetId+0x40>
    			   Copy_u8Id[Num_Digit]=Data_Recived;
    			   LCD_enuWriteCharacter(Copy_u8Id[Num_Digit]);
    			   Num_Digit++;
    		   }
    	   }
    	   HC05_enuSendString("\r\n");
    5318:	80 e0       	ldi	r24, 0x00	; 0
    531a:	92 e0       	ldi	r25, 0x02	; 2
    531c:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
    5320:	80 e0       	ldi	r24, 0x00	; 0
    5322:	90 e0       	ldi	r25, 0x00	; 0
    5324:	a6 e9       	ldi	r26, 0x96	; 150
    5326:	b3 e4       	ldi	r27, 0x43	; 67
    5328:	89 8f       	std	Y+25, r24	; 0x19
    532a:	9a 8f       	std	Y+26, r25	; 0x1a
    532c:	ab 8f       	std	Y+27, r26	; 0x1b
    532e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5330:	69 8d       	ldd	r22, Y+25	; 0x19
    5332:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5334:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5336:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5338:	20 e0       	ldi	r18, 0x00	; 0
    533a:	30 e0       	ldi	r19, 0x00	; 0
    533c:	4a e7       	ldi	r20, 0x7A	; 122
    533e:	55 e4       	ldi	r21, 0x45	; 69
    5340:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5344:	dc 01       	movw	r26, r24
    5346:	cb 01       	movw	r24, r22
    5348:	8d 8b       	std	Y+21, r24	; 0x15
    534a:	9e 8b       	std	Y+22, r25	; 0x16
    534c:	af 8b       	std	Y+23, r26	; 0x17
    534e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5350:	6d 89       	ldd	r22, Y+21	; 0x15
    5352:	7e 89       	ldd	r23, Y+22	; 0x16
    5354:	8f 89       	ldd	r24, Y+23	; 0x17
    5356:	98 8d       	ldd	r25, Y+24	; 0x18
    5358:	20 e0       	ldi	r18, 0x00	; 0
    535a:	30 e0       	ldi	r19, 0x00	; 0
    535c:	40 e8       	ldi	r20, 0x80	; 128
    535e:	5f e3       	ldi	r21, 0x3F	; 63
    5360:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5364:	88 23       	and	r24, r24
    5366:	2c f4       	brge	.+10     	; 0x5372 <GetId+0xde>
		__ticks = 1;
    5368:	81 e0       	ldi	r24, 0x01	; 1
    536a:	90 e0       	ldi	r25, 0x00	; 0
    536c:	9c 8b       	std	Y+20, r25	; 0x14
    536e:	8b 8b       	std	Y+19, r24	; 0x13
    5370:	3f c0       	rjmp	.+126    	; 0x53f0 <GetId+0x15c>
	else if (__tmp > 65535)
    5372:	6d 89       	ldd	r22, Y+21	; 0x15
    5374:	7e 89       	ldd	r23, Y+22	; 0x16
    5376:	8f 89       	ldd	r24, Y+23	; 0x17
    5378:	98 8d       	ldd	r25, Y+24	; 0x18
    537a:	20 e0       	ldi	r18, 0x00	; 0
    537c:	3f ef       	ldi	r19, 0xFF	; 255
    537e:	4f e7       	ldi	r20, 0x7F	; 127
    5380:	57 e4       	ldi	r21, 0x47	; 71
    5382:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5386:	18 16       	cp	r1, r24
    5388:	4c f5       	brge	.+82     	; 0x53dc <GetId+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    538a:	69 8d       	ldd	r22, Y+25	; 0x19
    538c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    538e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5390:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5392:	20 e0       	ldi	r18, 0x00	; 0
    5394:	30 e0       	ldi	r19, 0x00	; 0
    5396:	40 e2       	ldi	r20, 0x20	; 32
    5398:	51 e4       	ldi	r21, 0x41	; 65
    539a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    539e:	dc 01       	movw	r26, r24
    53a0:	cb 01       	movw	r24, r22
    53a2:	bc 01       	movw	r22, r24
    53a4:	cd 01       	movw	r24, r26
    53a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53aa:	dc 01       	movw	r26, r24
    53ac:	cb 01       	movw	r24, r22
    53ae:	9c 8b       	std	Y+20, r25	; 0x14
    53b0:	8b 8b       	std	Y+19, r24	; 0x13
    53b2:	0f c0       	rjmp	.+30     	; 0x53d2 <GetId+0x13e>
    53b4:	80 e9       	ldi	r24, 0x90	; 144
    53b6:	91 e0       	ldi	r25, 0x01	; 1
    53b8:	9a 8b       	std	Y+18, r25	; 0x12
    53ba:	89 8b       	std	Y+17, r24	; 0x11
    53bc:	89 89       	ldd	r24, Y+17	; 0x11
    53be:	9a 89       	ldd	r25, Y+18	; 0x12
    53c0:	01 97       	sbiw	r24, 0x01	; 1
    53c2:	f1 f7       	brne	.-4      	; 0x53c0 <GetId+0x12c>
    53c4:	9a 8b       	std	Y+18, r25	; 0x12
    53c6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    53c8:	8b 89       	ldd	r24, Y+19	; 0x13
    53ca:	9c 89       	ldd	r25, Y+20	; 0x14
    53cc:	01 97       	sbiw	r24, 0x01	; 1
    53ce:	9c 8b       	std	Y+20, r25	; 0x14
    53d0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    53d2:	8b 89       	ldd	r24, Y+19	; 0x13
    53d4:	9c 89       	ldd	r25, Y+20	; 0x14
    53d6:	00 97       	sbiw	r24, 0x00	; 0
    53d8:	69 f7       	brne	.-38     	; 0x53b4 <GetId+0x120>
    53da:	b2 c0       	rjmp	.+356    	; 0x5540 <GetId+0x2ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    53dc:	6d 89       	ldd	r22, Y+21	; 0x15
    53de:	7e 89       	ldd	r23, Y+22	; 0x16
    53e0:	8f 89       	ldd	r24, Y+23	; 0x17
    53e2:	98 8d       	ldd	r25, Y+24	; 0x18
    53e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53e8:	dc 01       	movw	r26, r24
    53ea:	cb 01       	movw	r24, r22
    53ec:	9c 8b       	std	Y+20, r25	; 0x14
    53ee:	8b 8b       	std	Y+19, r24	; 0x13
    53f0:	8b 89       	ldd	r24, Y+19	; 0x13
    53f2:	9c 89       	ldd	r25, Y+20	; 0x14
    53f4:	98 8b       	std	Y+16, r25	; 0x10
    53f6:	8f 87       	std	Y+15, r24	; 0x0f
    53f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    53fa:	98 89       	ldd	r25, Y+16	; 0x10
    53fc:	01 97       	sbiw	r24, 0x01	; 1
    53fe:	f1 f7       	brne	.-4      	; 0x53fc <GetId+0x168>
    5400:	98 8b       	std	Y+16, r25	; 0x10
    5402:	8f 87       	std	Y+15, r24	; 0x0f
    5404:	9d c0       	rjmp	.+314    	; 0x5540 <GetId+0x2ac>
    	   _delay_ms(300);

       }
       else if(Copy_u8Mode==User_Mode){
    5406:	8a a1       	ldd	r24, Y+34	; 0x22
    5408:	82 30       	cpi	r24, 0x02	; 2
    540a:	09 f0       	breq	.+2      	; 0x540e <GetId+0x17a>
    540c:	99 c0       	rjmp	.+306    	; 0x5540 <GetId+0x2ac>
    	   LCD_enuGoToPosition(1,0);
    540e:	81 e0       	ldi	r24, 0x01	; 1
    5410:	60 e0       	ldi	r22, 0x00	; 0
    5412:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <LCD_enuGoToPosition>
    5416:	1f c0       	rjmp	.+62     	; 0x5456 <GetId+0x1c2>

    	   while(Num_Digit<4){
    		   KEYPAD_enuGetPressedKey(&Key);
    5418:	ce 01       	movw	r24, r28
    541a:	4e 96       	adiw	r24, 0x1e	; 30
    541c:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <KEYPAD_enuGetPressedKey>

    		   if(Key!=KEY_NOT_PRESSED){
    5420:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5422:	8f 3f       	cpi	r24, 0xFF	; 255
    5424:	c1 f0       	breq	.+48     	; 0x5456 <GetId+0x1c2>
    			   Copy_u8Id[Num_Digit]=Key;
    5426:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5428:	28 2f       	mov	r18, r24
    542a:	30 e0       	ldi	r19, 0x00	; 0
    542c:	88 a1       	ldd	r24, Y+32	; 0x20
    542e:	99 a1       	ldd	r25, Y+33	; 0x21
    5430:	fc 01       	movw	r30, r24
    5432:	e2 0f       	add	r30, r18
    5434:	f3 1f       	adc	r31, r19
    5436:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5438:	80 83       	st	Z, r24
    			   LCD_enuWriteCharacter(Copy_u8Id[Num_Digit]);
    543a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    543c:	28 2f       	mov	r18, r24
    543e:	30 e0       	ldi	r19, 0x00	; 0
    5440:	88 a1       	ldd	r24, Y+32	; 0x20
    5442:	99 a1       	ldd	r25, Y+33	; 0x21
    5444:	fc 01       	movw	r30, r24
    5446:	e2 0f       	add	r30, r18
    5448:	f3 1f       	adc	r31, r19
    544a:	80 81       	ld	r24, Z
    544c:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <LCD_enuWriteCharacter>
    			   Num_Digit++;
    5450:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5452:	8f 5f       	subi	r24, 0xFF	; 255
    5454:	8d 8f       	std	Y+29, r24	; 0x1d

       }
       else if(Copy_u8Mode==User_Mode){
    	   LCD_enuGoToPosition(1,0);

    	   while(Num_Digit<4){
    5456:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5458:	84 30       	cpi	r24, 0x04	; 4
    545a:	f0 f2       	brcs	.-68     	; 0x5418 <GetId+0x184>
    545c:	80 e0       	ldi	r24, 0x00	; 0
    545e:	90 e0       	ldi	r25, 0x00	; 0
    5460:	a6 e9       	ldi	r26, 0x96	; 150
    5462:	b3 e4       	ldi	r27, 0x43	; 67
    5464:	8b 87       	std	Y+11, r24	; 0x0b
    5466:	9c 87       	std	Y+12, r25	; 0x0c
    5468:	ad 87       	std	Y+13, r26	; 0x0d
    546a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    546c:	6b 85       	ldd	r22, Y+11	; 0x0b
    546e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5470:	8d 85       	ldd	r24, Y+13	; 0x0d
    5472:	9e 85       	ldd	r25, Y+14	; 0x0e
    5474:	20 e0       	ldi	r18, 0x00	; 0
    5476:	30 e0       	ldi	r19, 0x00	; 0
    5478:	4a e7       	ldi	r20, 0x7A	; 122
    547a:	55 e4       	ldi	r21, 0x45	; 69
    547c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5480:	dc 01       	movw	r26, r24
    5482:	cb 01       	movw	r24, r22
    5484:	8f 83       	std	Y+7, r24	; 0x07
    5486:	98 87       	std	Y+8, r25	; 0x08
    5488:	a9 87       	std	Y+9, r26	; 0x09
    548a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    548c:	6f 81       	ldd	r22, Y+7	; 0x07
    548e:	78 85       	ldd	r23, Y+8	; 0x08
    5490:	89 85       	ldd	r24, Y+9	; 0x09
    5492:	9a 85       	ldd	r25, Y+10	; 0x0a
    5494:	20 e0       	ldi	r18, 0x00	; 0
    5496:	30 e0       	ldi	r19, 0x00	; 0
    5498:	40 e8       	ldi	r20, 0x80	; 128
    549a:	5f e3       	ldi	r21, 0x3F	; 63
    549c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    54a0:	88 23       	and	r24, r24
    54a2:	2c f4       	brge	.+10     	; 0x54ae <GetId+0x21a>
		__ticks = 1;
    54a4:	81 e0       	ldi	r24, 0x01	; 1
    54a6:	90 e0       	ldi	r25, 0x00	; 0
    54a8:	9e 83       	std	Y+6, r25	; 0x06
    54aa:	8d 83       	std	Y+5, r24	; 0x05
    54ac:	3f c0       	rjmp	.+126    	; 0x552c <GetId+0x298>
	else if (__tmp > 65535)
    54ae:	6f 81       	ldd	r22, Y+7	; 0x07
    54b0:	78 85       	ldd	r23, Y+8	; 0x08
    54b2:	89 85       	ldd	r24, Y+9	; 0x09
    54b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    54b6:	20 e0       	ldi	r18, 0x00	; 0
    54b8:	3f ef       	ldi	r19, 0xFF	; 255
    54ba:	4f e7       	ldi	r20, 0x7F	; 127
    54bc:	57 e4       	ldi	r21, 0x47	; 71
    54be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    54c2:	18 16       	cp	r1, r24
    54c4:	4c f5       	brge	.+82     	; 0x5518 <GetId+0x284>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    54c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    54c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    54ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    54cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    54ce:	20 e0       	ldi	r18, 0x00	; 0
    54d0:	30 e0       	ldi	r19, 0x00	; 0
    54d2:	40 e2       	ldi	r20, 0x20	; 32
    54d4:	51 e4       	ldi	r21, 0x41	; 65
    54d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54da:	dc 01       	movw	r26, r24
    54dc:	cb 01       	movw	r24, r22
    54de:	bc 01       	movw	r22, r24
    54e0:	cd 01       	movw	r24, r26
    54e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54e6:	dc 01       	movw	r26, r24
    54e8:	cb 01       	movw	r24, r22
    54ea:	9e 83       	std	Y+6, r25	; 0x06
    54ec:	8d 83       	std	Y+5, r24	; 0x05
    54ee:	0f c0       	rjmp	.+30     	; 0x550e <GetId+0x27a>
    54f0:	80 e9       	ldi	r24, 0x90	; 144
    54f2:	91 e0       	ldi	r25, 0x01	; 1
    54f4:	9c 83       	std	Y+4, r25	; 0x04
    54f6:	8b 83       	std	Y+3, r24	; 0x03
    54f8:	8b 81       	ldd	r24, Y+3	; 0x03
    54fa:	9c 81       	ldd	r25, Y+4	; 0x04
    54fc:	01 97       	sbiw	r24, 0x01	; 1
    54fe:	f1 f7       	brne	.-4      	; 0x54fc <GetId+0x268>
    5500:	9c 83       	std	Y+4, r25	; 0x04
    5502:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5504:	8d 81       	ldd	r24, Y+5	; 0x05
    5506:	9e 81       	ldd	r25, Y+6	; 0x06
    5508:	01 97       	sbiw	r24, 0x01	; 1
    550a:	9e 83       	std	Y+6, r25	; 0x06
    550c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    550e:	8d 81       	ldd	r24, Y+5	; 0x05
    5510:	9e 81       	ldd	r25, Y+6	; 0x06
    5512:	00 97       	sbiw	r24, 0x00	; 0
    5514:	69 f7       	brne	.-38     	; 0x54f0 <GetId+0x25c>
    5516:	14 c0       	rjmp	.+40     	; 0x5540 <GetId+0x2ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5518:	6f 81       	ldd	r22, Y+7	; 0x07
    551a:	78 85       	ldd	r23, Y+8	; 0x08
    551c:	89 85       	ldd	r24, Y+9	; 0x09
    551e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5520:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5524:	dc 01       	movw	r26, r24
    5526:	cb 01       	movw	r24, r22
    5528:	9e 83       	std	Y+6, r25	; 0x06
    552a:	8d 83       	std	Y+5, r24	; 0x05
    552c:	8d 81       	ldd	r24, Y+5	; 0x05
    552e:	9e 81       	ldd	r25, Y+6	; 0x06
    5530:	9a 83       	std	Y+2, r25	; 0x02
    5532:	89 83       	std	Y+1, r24	; 0x01
    5534:	89 81       	ldd	r24, Y+1	; 0x01
    5536:	9a 81       	ldd	r25, Y+2	; 0x02
    5538:	01 97       	sbiw	r24, 0x01	; 1
    553a:	f1 f7       	brne	.-4      	; 0x5538 <GetId+0x2a4>
    553c:	9a 83       	std	Y+2, r25	; 0x02
    553e:	89 83       	std	Y+1, r24	; 0x01
    			   Num_Digit++;
    		   }
    	   }
    	   _delay_ms(300);
       }
         LCD_enuClearScreen();
    5540:	0e 94 df 1c 	call	0x39be	; 0x39be <LCD_enuClearScreen>
    }
    5544:	a2 96       	adiw	r28, 0x22	; 34
    5546:	0f b6       	in	r0, 0x3f	; 63
    5548:	f8 94       	cli
    554a:	de bf       	out	0x3e, r29	; 62
    554c:	0f be       	out	0x3f, r0	; 63
    554e:	cd bf       	out	0x3d, r28	; 61
    5550:	cf 91       	pop	r28
    5552:	df 91       	pop	r29
    5554:	08 95       	ret

00005556 <GetPassword>:
	void GetPassword  (u8* Copy_u8Password, u8 Copy_u8Mode){
    5556:	df 93       	push	r29
    5558:	cf 93       	push	r28
    555a:	cd b7       	in	r28, 0x3d	; 61
    555c:	de b7       	in	r29, 0x3e	; 62
    555e:	a2 97       	sbiw	r28, 0x22	; 34
    5560:	0f b6       	in	r0, 0x3f	; 63
    5562:	f8 94       	cli
    5564:	de bf       	out	0x3e, r29	; 62
    5566:	0f be       	out	0x3f, r0	; 63
    5568:	cd bf       	out	0x3d, r28	; 61
    556a:	99 a3       	std	Y+33, r25	; 0x21
    556c:	88 a3       	std	Y+32, r24	; 0x20
    556e:	6a a3       	std	Y+34, r22	; 0x22
         u8 Num_Digit=0; u8 Key=KEY_NOT_PRESSED; u8 Data_Recieved=0;
    5570:	1d 8e       	std	Y+29, r1	; 0x1d
    5572:	8f ef       	ldi	r24, 0xFF	; 255
    5574:	8e 8f       	std	Y+30, r24	; 0x1e
    5576:	1f 8e       	std	Y+31, r1	; 0x1f
         if (Copy_u8Mode==Admin_Mode){
    5578:	8a a1       	ldd	r24, Y+34	; 0x22
    557a:	81 30       	cpi	r24, 0x01	; 1
    557c:	09 f0       	breq	.+2      	; 0x5580 <GetPassword+0x2a>
    557e:	98 c0       	rjmp	.+304    	; 0x56b0 <GetPassword+0x15a>
        	 LCD_enuClearScreen();
    5580:	0e 94 df 1c 	call	0x39be	; 0x39be <LCD_enuClearScreen>
        	 LCD_enuWriteString("Enter PassWord");
    5584:	87 e4       	ldi	r24, 0x47	; 71
    5586:	93 e0       	ldi	r25, 0x03	; 3
    5588:	0e 94 b9 1c 	call	0x3972	; 0x3972 <LCD_enuWriteString>
        	 LCD_enuGoToPosition(1,0);
    558c:	81 e0       	ldi	r24, 0x01	; 1
    558e:	60 e0       	ldi	r22, 0x00	; 0
    5590:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <LCD_enuGoToPosition>
    5594:	17 c0       	rjmp	.+46     	; 0x55c4 <GetPassword+0x6e>
        	 while(Num_Digit<4){
        		 HC05_enuRecieveChar(&Data_Recieved);
    5596:	ce 01       	movw	r24, r28
    5598:	4f 96       	adiw	r24, 0x1f	; 31
    559a:	0e 94 ba 20 	call	0x4174	; 0x4174 <HC05_enuRecieveChar>
        		 if(Data_Recieved){
    559e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    55a0:	88 23       	and	r24, r24
    55a2:	81 f0       	breq	.+32     	; 0x55c4 <GetPassword+0x6e>
        			 Copy_u8Password[Num_Digit]=Data_Recieved;
    55a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    55a6:	28 2f       	mov	r18, r24
    55a8:	30 e0       	ldi	r19, 0x00	; 0
    55aa:	88 a1       	ldd	r24, Y+32	; 0x20
    55ac:	99 a1       	ldd	r25, Y+33	; 0x21
    55ae:	fc 01       	movw	r30, r24
    55b0:	e2 0f       	add	r30, r18
    55b2:	f3 1f       	adc	r31, r19
    55b4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    55b6:	80 83       	st	Z, r24
        			 LCD_enuWriteCharacter('*');
    55b8:	8a e2       	ldi	r24, 0x2A	; 42
    55ba:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <LCD_enuWriteCharacter>
        			 Num_Digit++;
    55be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    55c0:	8f 5f       	subi	r24, 0xFF	; 255
    55c2:	8d 8f       	std	Y+29, r24	; 0x1d
         u8 Num_Digit=0; u8 Key=KEY_NOT_PRESSED; u8 Data_Recieved=0;
         if (Copy_u8Mode==Admin_Mode){
        	 LCD_enuClearScreen();
        	 LCD_enuWriteString("Enter PassWord");
        	 LCD_enuGoToPosition(1,0);
        	 while(Num_Digit<4){
    55c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    55c6:	84 30       	cpi	r24, 0x04	; 4
    55c8:	30 f3       	brcs	.-52     	; 0x5596 <GetPassword+0x40>
    55ca:	80 e0       	ldi	r24, 0x00	; 0
    55cc:	90 e0       	ldi	r25, 0x00	; 0
    55ce:	a8 e4       	ldi	r26, 0x48	; 72
    55d0:	b2 e4       	ldi	r27, 0x42	; 66
    55d2:	89 8f       	std	Y+25, r24	; 0x19
    55d4:	9a 8f       	std	Y+26, r25	; 0x1a
    55d6:	ab 8f       	std	Y+27, r26	; 0x1b
    55d8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    55da:	69 8d       	ldd	r22, Y+25	; 0x19
    55dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    55de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    55e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    55e2:	20 e0       	ldi	r18, 0x00	; 0
    55e4:	30 e0       	ldi	r19, 0x00	; 0
    55e6:	4a e7       	ldi	r20, 0x7A	; 122
    55e8:	55 e4       	ldi	r21, 0x45	; 69
    55ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55ee:	dc 01       	movw	r26, r24
    55f0:	cb 01       	movw	r24, r22
    55f2:	8d 8b       	std	Y+21, r24	; 0x15
    55f4:	9e 8b       	std	Y+22, r25	; 0x16
    55f6:	af 8b       	std	Y+23, r26	; 0x17
    55f8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    55fa:	6d 89       	ldd	r22, Y+21	; 0x15
    55fc:	7e 89       	ldd	r23, Y+22	; 0x16
    55fe:	8f 89       	ldd	r24, Y+23	; 0x17
    5600:	98 8d       	ldd	r25, Y+24	; 0x18
    5602:	20 e0       	ldi	r18, 0x00	; 0
    5604:	30 e0       	ldi	r19, 0x00	; 0
    5606:	40 e8       	ldi	r20, 0x80	; 128
    5608:	5f e3       	ldi	r21, 0x3F	; 63
    560a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    560e:	88 23       	and	r24, r24
    5610:	2c f4       	brge	.+10     	; 0x561c <GetPassword+0xc6>
		__ticks = 1;
    5612:	81 e0       	ldi	r24, 0x01	; 1
    5614:	90 e0       	ldi	r25, 0x00	; 0
    5616:	9c 8b       	std	Y+20, r25	; 0x14
    5618:	8b 8b       	std	Y+19, r24	; 0x13
    561a:	3f c0       	rjmp	.+126    	; 0x569a <GetPassword+0x144>
	else if (__tmp > 65535)
    561c:	6d 89       	ldd	r22, Y+21	; 0x15
    561e:	7e 89       	ldd	r23, Y+22	; 0x16
    5620:	8f 89       	ldd	r24, Y+23	; 0x17
    5622:	98 8d       	ldd	r25, Y+24	; 0x18
    5624:	20 e0       	ldi	r18, 0x00	; 0
    5626:	3f ef       	ldi	r19, 0xFF	; 255
    5628:	4f e7       	ldi	r20, 0x7F	; 127
    562a:	57 e4       	ldi	r21, 0x47	; 71
    562c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5630:	18 16       	cp	r1, r24
    5632:	4c f5       	brge	.+82     	; 0x5686 <GetPassword+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5634:	69 8d       	ldd	r22, Y+25	; 0x19
    5636:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5638:	8b 8d       	ldd	r24, Y+27	; 0x1b
    563a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    563c:	20 e0       	ldi	r18, 0x00	; 0
    563e:	30 e0       	ldi	r19, 0x00	; 0
    5640:	40 e2       	ldi	r20, 0x20	; 32
    5642:	51 e4       	ldi	r21, 0x41	; 65
    5644:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5648:	dc 01       	movw	r26, r24
    564a:	cb 01       	movw	r24, r22
    564c:	bc 01       	movw	r22, r24
    564e:	cd 01       	movw	r24, r26
    5650:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5654:	dc 01       	movw	r26, r24
    5656:	cb 01       	movw	r24, r22
    5658:	9c 8b       	std	Y+20, r25	; 0x14
    565a:	8b 8b       	std	Y+19, r24	; 0x13
    565c:	0f c0       	rjmp	.+30     	; 0x567c <GetPassword+0x126>
    565e:	80 e9       	ldi	r24, 0x90	; 144
    5660:	91 e0       	ldi	r25, 0x01	; 1
    5662:	9a 8b       	std	Y+18, r25	; 0x12
    5664:	89 8b       	std	Y+17, r24	; 0x11
    5666:	89 89       	ldd	r24, Y+17	; 0x11
    5668:	9a 89       	ldd	r25, Y+18	; 0x12
    566a:	01 97       	sbiw	r24, 0x01	; 1
    566c:	f1 f7       	brne	.-4      	; 0x566a <GetPassword+0x114>
    566e:	9a 8b       	std	Y+18, r25	; 0x12
    5670:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5672:	8b 89       	ldd	r24, Y+19	; 0x13
    5674:	9c 89       	ldd	r25, Y+20	; 0x14
    5676:	01 97       	sbiw	r24, 0x01	; 1
    5678:	9c 8b       	std	Y+20, r25	; 0x14
    567a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    567c:	8b 89       	ldd	r24, Y+19	; 0x13
    567e:	9c 89       	ldd	r25, Y+20	; 0x14
    5680:	00 97       	sbiw	r24, 0x00	; 0
    5682:	69 f7       	brne	.-38     	; 0x565e <GetPassword+0x108>
    5684:	aa c0       	rjmp	.+340    	; 0x57da <GetPassword+0x284>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5686:	6d 89       	ldd	r22, Y+21	; 0x15
    5688:	7e 89       	ldd	r23, Y+22	; 0x16
    568a:	8f 89       	ldd	r24, Y+23	; 0x17
    568c:	98 8d       	ldd	r25, Y+24	; 0x18
    568e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5692:	dc 01       	movw	r26, r24
    5694:	cb 01       	movw	r24, r22
    5696:	9c 8b       	std	Y+20, r25	; 0x14
    5698:	8b 8b       	std	Y+19, r24	; 0x13
    569a:	8b 89       	ldd	r24, Y+19	; 0x13
    569c:	9c 89       	ldd	r25, Y+20	; 0x14
    569e:	98 8b       	std	Y+16, r25	; 0x10
    56a0:	8f 87       	std	Y+15, r24	; 0x0f
    56a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    56a4:	98 89       	ldd	r25, Y+16	; 0x10
    56a6:	01 97       	sbiw	r24, 0x01	; 1
    56a8:	f1 f7       	brne	.-4      	; 0x56a6 <GetPassword+0x150>
    56aa:	98 8b       	std	Y+16, r25	; 0x10
    56ac:	8f 87       	std	Y+15, r24	; 0x0f
    56ae:	95 c0       	rjmp	.+298    	; 0x57da <GetPassword+0x284>
        			 Num_Digit++;
        		 }
        	 }
        	 _delay_ms(50);
        	 }
         else if(Copy_u8Mode==User_Mode){
    56b0:	8a a1       	ldd	r24, Y+34	; 0x22
    56b2:	82 30       	cpi	r24, 0x02	; 2
    56b4:	09 f0       	breq	.+2      	; 0x56b8 <GetPassword+0x162>
    56b6:	91 c0       	rjmp	.+290    	; 0x57da <GetPassword+0x284>
        	 LCD_enuGoToPosition(1,0);
    56b8:	81 e0       	ldi	r24, 0x01	; 1
    56ba:	60 e0       	ldi	r22, 0x00	; 0
    56bc:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <LCD_enuGoToPosition>
    56c0:	17 c0       	rjmp	.+46     	; 0x56f0 <GetPassword+0x19a>
        	 while(Num_Digit<4){
        		 KEYPAD_enuGetPressedKey(&Key);
    56c2:	ce 01       	movw	r24, r28
    56c4:	4e 96       	adiw	r24, 0x1e	; 30
    56c6:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <KEYPAD_enuGetPressedKey>
        		 if(Key!=KEY_NOT_PRESSED){
    56ca:	8e 8d       	ldd	r24, Y+30	; 0x1e
    56cc:	8f 3f       	cpi	r24, 0xFF	; 255
    56ce:	81 f0       	breq	.+32     	; 0x56f0 <GetPassword+0x19a>
        			 Copy_u8Password[Num_Digit]=Key;
    56d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    56d2:	28 2f       	mov	r18, r24
    56d4:	30 e0       	ldi	r19, 0x00	; 0
    56d6:	88 a1       	ldd	r24, Y+32	; 0x20
    56d8:	99 a1       	ldd	r25, Y+33	; 0x21
    56da:	fc 01       	movw	r30, r24
    56dc:	e2 0f       	add	r30, r18
    56de:	f3 1f       	adc	r31, r19
    56e0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    56e2:	80 83       	st	Z, r24
        			 LCD_enuWriteCharacter('*');
    56e4:	8a e2       	ldi	r24, 0x2A	; 42
    56e6:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <LCD_enuWriteCharacter>
        			 Num_Digit++;
    56ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    56ec:	8f 5f       	subi	r24, 0xFF	; 255
    56ee:	8d 8f       	std	Y+29, r24	; 0x1d
        	 }
        	 _delay_ms(50);
        	 }
         else if(Copy_u8Mode==User_Mode){
        	 LCD_enuGoToPosition(1,0);
        	 while(Num_Digit<4){
    56f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    56f2:	84 30       	cpi	r24, 0x04	; 4
    56f4:	30 f3       	brcs	.-52     	; 0x56c2 <GetPassword+0x16c>
    56f6:	80 e0       	ldi	r24, 0x00	; 0
    56f8:	90 e0       	ldi	r25, 0x00	; 0
    56fa:	a6 e9       	ldi	r26, 0x96	; 150
    56fc:	b3 e4       	ldi	r27, 0x43	; 67
    56fe:	8b 87       	std	Y+11, r24	; 0x0b
    5700:	9c 87       	std	Y+12, r25	; 0x0c
    5702:	ad 87       	std	Y+13, r26	; 0x0d
    5704:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5706:	6b 85       	ldd	r22, Y+11	; 0x0b
    5708:	7c 85       	ldd	r23, Y+12	; 0x0c
    570a:	8d 85       	ldd	r24, Y+13	; 0x0d
    570c:	9e 85       	ldd	r25, Y+14	; 0x0e
    570e:	20 e0       	ldi	r18, 0x00	; 0
    5710:	30 e0       	ldi	r19, 0x00	; 0
    5712:	4a e7       	ldi	r20, 0x7A	; 122
    5714:	55 e4       	ldi	r21, 0x45	; 69
    5716:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    571a:	dc 01       	movw	r26, r24
    571c:	cb 01       	movw	r24, r22
    571e:	8f 83       	std	Y+7, r24	; 0x07
    5720:	98 87       	std	Y+8, r25	; 0x08
    5722:	a9 87       	std	Y+9, r26	; 0x09
    5724:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5726:	6f 81       	ldd	r22, Y+7	; 0x07
    5728:	78 85       	ldd	r23, Y+8	; 0x08
    572a:	89 85       	ldd	r24, Y+9	; 0x09
    572c:	9a 85       	ldd	r25, Y+10	; 0x0a
    572e:	20 e0       	ldi	r18, 0x00	; 0
    5730:	30 e0       	ldi	r19, 0x00	; 0
    5732:	40 e8       	ldi	r20, 0x80	; 128
    5734:	5f e3       	ldi	r21, 0x3F	; 63
    5736:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    573a:	88 23       	and	r24, r24
    573c:	2c f4       	brge	.+10     	; 0x5748 <GetPassword+0x1f2>
		__ticks = 1;
    573e:	81 e0       	ldi	r24, 0x01	; 1
    5740:	90 e0       	ldi	r25, 0x00	; 0
    5742:	9e 83       	std	Y+6, r25	; 0x06
    5744:	8d 83       	std	Y+5, r24	; 0x05
    5746:	3f c0       	rjmp	.+126    	; 0x57c6 <GetPassword+0x270>
	else if (__tmp > 65535)
    5748:	6f 81       	ldd	r22, Y+7	; 0x07
    574a:	78 85       	ldd	r23, Y+8	; 0x08
    574c:	89 85       	ldd	r24, Y+9	; 0x09
    574e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5750:	20 e0       	ldi	r18, 0x00	; 0
    5752:	3f ef       	ldi	r19, 0xFF	; 255
    5754:	4f e7       	ldi	r20, 0x7F	; 127
    5756:	57 e4       	ldi	r21, 0x47	; 71
    5758:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    575c:	18 16       	cp	r1, r24
    575e:	4c f5       	brge	.+82     	; 0x57b2 <GetPassword+0x25c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5760:	6b 85       	ldd	r22, Y+11	; 0x0b
    5762:	7c 85       	ldd	r23, Y+12	; 0x0c
    5764:	8d 85       	ldd	r24, Y+13	; 0x0d
    5766:	9e 85       	ldd	r25, Y+14	; 0x0e
    5768:	20 e0       	ldi	r18, 0x00	; 0
    576a:	30 e0       	ldi	r19, 0x00	; 0
    576c:	40 e2       	ldi	r20, 0x20	; 32
    576e:	51 e4       	ldi	r21, 0x41	; 65
    5770:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5774:	dc 01       	movw	r26, r24
    5776:	cb 01       	movw	r24, r22
    5778:	bc 01       	movw	r22, r24
    577a:	cd 01       	movw	r24, r26
    577c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5780:	dc 01       	movw	r26, r24
    5782:	cb 01       	movw	r24, r22
    5784:	9e 83       	std	Y+6, r25	; 0x06
    5786:	8d 83       	std	Y+5, r24	; 0x05
    5788:	0f c0       	rjmp	.+30     	; 0x57a8 <GetPassword+0x252>
    578a:	80 e9       	ldi	r24, 0x90	; 144
    578c:	91 e0       	ldi	r25, 0x01	; 1
    578e:	9c 83       	std	Y+4, r25	; 0x04
    5790:	8b 83       	std	Y+3, r24	; 0x03
    5792:	8b 81       	ldd	r24, Y+3	; 0x03
    5794:	9c 81       	ldd	r25, Y+4	; 0x04
    5796:	01 97       	sbiw	r24, 0x01	; 1
    5798:	f1 f7       	brne	.-4      	; 0x5796 <GetPassword+0x240>
    579a:	9c 83       	std	Y+4, r25	; 0x04
    579c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    579e:	8d 81       	ldd	r24, Y+5	; 0x05
    57a0:	9e 81       	ldd	r25, Y+6	; 0x06
    57a2:	01 97       	sbiw	r24, 0x01	; 1
    57a4:	9e 83       	std	Y+6, r25	; 0x06
    57a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    57a8:	8d 81       	ldd	r24, Y+5	; 0x05
    57aa:	9e 81       	ldd	r25, Y+6	; 0x06
    57ac:	00 97       	sbiw	r24, 0x00	; 0
    57ae:	69 f7       	brne	.-38     	; 0x578a <GetPassword+0x234>
    57b0:	14 c0       	rjmp	.+40     	; 0x57da <GetPassword+0x284>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    57b2:	6f 81       	ldd	r22, Y+7	; 0x07
    57b4:	78 85       	ldd	r23, Y+8	; 0x08
    57b6:	89 85       	ldd	r24, Y+9	; 0x09
    57b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    57ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57be:	dc 01       	movw	r26, r24
    57c0:	cb 01       	movw	r24, r22
    57c2:	9e 83       	std	Y+6, r25	; 0x06
    57c4:	8d 83       	std	Y+5, r24	; 0x05
    57c6:	8d 81       	ldd	r24, Y+5	; 0x05
    57c8:	9e 81       	ldd	r25, Y+6	; 0x06
    57ca:	9a 83       	std	Y+2, r25	; 0x02
    57cc:	89 83       	std	Y+1, r24	; 0x01
    57ce:	89 81       	ldd	r24, Y+1	; 0x01
    57d0:	9a 81       	ldd	r25, Y+2	; 0x02
    57d2:	01 97       	sbiw	r24, 0x01	; 1
    57d4:	f1 f7       	brne	.-4      	; 0x57d2 <GetPassword+0x27c>
    57d6:	9a 83       	std	Y+2, r25	; 0x02
    57d8:	89 83       	std	Y+1, r24	; 0x01
        			 Num_Digit++;
        		 }
        	 }
        	 _delay_ms(300);
         }
	}
    57da:	a2 96       	adiw	r28, 0x22	; 34
    57dc:	0f b6       	in	r0, 0x3f	; 63
    57de:	f8 94       	cli
    57e0:	de bf       	out	0x3e, r29	; 62
    57e2:	0f be       	out	0x3f, r0	; 63
    57e4:	cd bf       	out	0x3d, r28	; 61
    57e6:	cf 91       	pop	r28
    57e8:	df 91       	pop	r29
    57ea:	08 95       	ret

000057ec <CheckAdmin>:
	void CheckAdmin (u8* Copy_u8Id, u8* Copy_u8Password,u8 *Copy_u8AdminState){
    57ec:	df 93       	push	r29
    57ee:	cf 93       	push	r28
    57f0:	cd b7       	in	r28, 0x3d	; 61
    57f2:	de b7       	in	r29, 0x3e	; 62
    57f4:	c3 54       	subi	r28, 0x43	; 67
    57f6:	d0 40       	sbci	r29, 0x00	; 0
    57f8:	0f b6       	in	r0, 0x3f	; 63
    57fa:	f8 94       	cli
    57fc:	de bf       	out	0x3e, r29	; 62
    57fe:	0f be       	out	0x3f, r0	; 63
    5800:	cd bf       	out	0x3d, r28	; 61
    5802:	9f af       	std	Y+63, r25	; 0x3f
    5804:	8e af       	std	Y+62, r24	; 0x3e
    5806:	fe 01       	movw	r30, r28
    5808:	e0 5c       	subi	r30, 0xC0	; 192
    580a:	ff 4f       	sbci	r31, 0xFF	; 255
    580c:	71 83       	std	Z+1, r23	; 0x01
    580e:	60 83       	st	Z, r22
    5810:	fe 01       	movw	r30, r28
    5812:	ee 5b       	subi	r30, 0xBE	; 190
    5814:	ff 4f       	sbci	r31, 0xFF	; 255
    5816:	51 83       	std	Z+1, r21	; 0x01
    5818:	40 83       	st	Z, r20
        u8 Address=0; u8 Num_Digit=0; u8 Exist_UserNAme=0;  u8 Exist_Password=0;
    581a:	1c ae       	std	Y+60, r1	; 0x3c
    581c:	1b ae       	std	Y+59, r1	; 0x3b
    581e:	1a ae       	std	Y+58, r1	; 0x3a
    5820:	19 ae       	std	Y+57, r1	; 0x39
        u8 Data=0;
    5822:	1d ae       	std	Y+61, r1	; 0x3d
		LCD_enuClearScreen();
    5824:	0e 94 df 1c 	call	0x39be	; 0x39be <LCD_enuClearScreen>
		HC05_enuSendString("\r\n");
    5828:	80 e0       	ldi	r24, 0x00	; 0
    582a:	92 e0       	ldi	r25, 0x02	; 2
    582c:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
    5830:	1b c0       	rjmp	.+54     	; 0x5868 <CheckAdmin+0x7c>
		while(Num_Digit<4){
			Address=91+Num_Digit;
    5832:	8b ad       	ldd	r24, Y+59	; 0x3b
    5834:	85 5a       	subi	r24, 0xA5	; 165
    5836:	8c af       	std	Y+60, r24	; 0x3c
			EEPROM_enuRead(&Data,0,Address);
    5838:	ce 01       	movw	r24, r28
    583a:	cd 96       	adiw	r24, 0x3d	; 61
    583c:	60 e0       	ldi	r22, 0x00	; 0
    583e:	4c ad       	ldd	r20, Y+60	; 0x3c
    5840:	0e 94 01 21 	call	0x4202	; 0x4202 <EEPROM_enuRead>
			if(Data==Copy_u8Id[Num_Digit]){
    5844:	8b ad       	ldd	r24, Y+59	; 0x3b
    5846:	28 2f       	mov	r18, r24
    5848:	30 e0       	ldi	r19, 0x00	; 0
    584a:	8e ad       	ldd	r24, Y+62	; 0x3e
    584c:	9f ad       	ldd	r25, Y+63	; 0x3f
    584e:	fc 01       	movw	r30, r24
    5850:	e2 0f       	add	r30, r18
    5852:	f3 1f       	adc	r31, r19
    5854:	90 81       	ld	r25, Z
    5856:	8d ad       	ldd	r24, Y+61	; 0x3d
    5858:	98 17       	cp	r25, r24
    585a:	19 f4       	brne	.+6      	; 0x5862 <CheckAdmin+0x76>
				Exist_UserNAme++;
    585c:	8a ad       	ldd	r24, Y+58	; 0x3a
    585e:	8f 5f       	subi	r24, 0xFF	; 255
    5860:	8a af       	std	Y+58, r24	; 0x3a
			}
			Num_Digit++;
    5862:	8b ad       	ldd	r24, Y+59	; 0x3b
    5864:	8f 5f       	subi	r24, 0xFF	; 255
    5866:	8b af       	std	Y+59, r24	; 0x3b
	void CheckAdmin (u8* Copy_u8Id, u8* Copy_u8Password,u8 *Copy_u8AdminState){
        u8 Address=0; u8 Num_Digit=0; u8 Exist_UserNAme=0;  u8 Exist_Password=0;
        u8 Data=0;
		LCD_enuClearScreen();
		HC05_enuSendString("\r\n");
		while(Num_Digit<4){
    5868:	8b ad       	ldd	r24, Y+59	; 0x3b
    586a:	84 30       	cpi	r24, 0x04	; 4
    586c:	10 f3       	brcs	.-60     	; 0x5832 <CheckAdmin+0x46>
			if(Data==Copy_u8Id[Num_Digit]){
				Exist_UserNAme++;
			}
			Num_Digit++;
		}
		Num_Digit=0;
    586e:	1b ae       	std	Y+59, r1	; 0x3b
    5870:	1e c0       	rjmp	.+60     	; 0x58ae <CheckAdmin+0xc2>
		while(Num_Digit<4){
			Address=91+4+Num_Digit;
    5872:	8b ad       	ldd	r24, Y+59	; 0x3b
    5874:	81 5a       	subi	r24, 0xA1	; 161
    5876:	8c af       	std	Y+60, r24	; 0x3c
			EEPROM_enuRead(&Data,0,Address);
    5878:	ce 01       	movw	r24, r28
    587a:	cd 96       	adiw	r24, 0x3d	; 61
    587c:	60 e0       	ldi	r22, 0x00	; 0
    587e:	4c ad       	ldd	r20, Y+60	; 0x3c
    5880:	0e 94 01 21 	call	0x4202	; 0x4202 <EEPROM_enuRead>
			if(Data==Copy_u8Password[Num_Digit]){
    5884:	8b ad       	ldd	r24, Y+59	; 0x3b
    5886:	28 2f       	mov	r18, r24
    5888:	30 e0       	ldi	r19, 0x00	; 0
    588a:	fe 01       	movw	r30, r28
    588c:	e0 5c       	subi	r30, 0xC0	; 192
    588e:	ff 4f       	sbci	r31, 0xFF	; 255
    5890:	80 81       	ld	r24, Z
    5892:	91 81       	ldd	r25, Z+1	; 0x01
    5894:	fc 01       	movw	r30, r24
    5896:	e2 0f       	add	r30, r18
    5898:	f3 1f       	adc	r31, r19
    589a:	90 81       	ld	r25, Z
    589c:	8d ad       	ldd	r24, Y+61	; 0x3d
    589e:	98 17       	cp	r25, r24
    58a0:	19 f4       	brne	.+6      	; 0x58a8 <CheckAdmin+0xbc>
				Exist_Password++;
    58a2:	89 ad       	ldd	r24, Y+57	; 0x39
    58a4:	8f 5f       	subi	r24, 0xFF	; 255
    58a6:	89 af       	std	Y+57, r24	; 0x39
			}
			Num_Digit++;
    58a8:	8b ad       	ldd	r24, Y+59	; 0x3b
    58aa:	8f 5f       	subi	r24, 0xFF	; 255
    58ac:	8b af       	std	Y+59, r24	; 0x3b
				Exist_UserNAme++;
			}
			Num_Digit++;
		}
		Num_Digit=0;
		while(Num_Digit<4){
    58ae:	8b ad       	ldd	r24, Y+59	; 0x3b
    58b0:	84 30       	cpi	r24, 0x04	; 4
    58b2:	f8 f2       	brcs	.-66     	; 0x5872 <CheckAdmin+0x86>
			if(Data==Copy_u8Password[Num_Digit]){
				Exist_Password++;
			}
			Num_Digit++;
		}
		if(Exist_Password==4&&Exist_UserNAme==4){
    58b4:	89 ad       	ldd	r24, Y+57	; 0x39
    58b6:	84 30       	cpi	r24, 0x04	; 4
    58b8:	09 f0       	breq	.+2      	; 0x58bc <CheckAdmin+0xd0>
    58ba:	89 c0       	rjmp	.+274    	; 0x59ce <CheckAdmin+0x1e2>
    58bc:	8a ad       	ldd	r24, Y+58	; 0x3a
    58be:	84 30       	cpi	r24, 0x04	; 4
    58c0:	09 f0       	breq	.+2      	; 0x58c4 <CheckAdmin+0xd8>
    58c2:	85 c0       	rjmp	.+266    	; 0x59ce <CheckAdmin+0x1e2>
			LCD_enuClearScreen();
    58c4:	0e 94 df 1c 	call	0x39be	; 0x39be <LCD_enuClearScreen>
			LCD_enuWriteString("Successful Login");
    58c8:	86 e5       	ldi	r24, 0x56	; 86
    58ca:	93 e0       	ldi	r25, 0x03	; 3
    58cc:	0e 94 b9 1c 	call	0x3972	; 0x3972 <LCD_enuWriteString>
			HC05_enuSendString("Successful Login\r\n");
    58d0:	87 e6       	ldi	r24, 0x67	; 103
    58d2:	93 e0       	ldi	r25, 0x03	; 3
    58d4:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
			*Copy_u8AdminState=1;
    58d8:	fe 01       	movw	r30, r28
    58da:	ee 5b       	subi	r30, 0xBE	; 190
    58dc:	ff 4f       	sbci	r31, 0xFF	; 255
    58de:	01 90       	ld	r0, Z+
    58e0:	f0 81       	ld	r31, Z
    58e2:	e0 2d       	mov	r30, r0
    58e4:	81 e0       	ldi	r24, 0x01	; 1
    58e6:	80 83       	st	Z, r24
    58e8:	80 e0       	ldi	r24, 0x00	; 0
    58ea:	90 e0       	ldi	r25, 0x00	; 0
    58ec:	aa e7       	ldi	r26, 0x7A	; 122
    58ee:	b4 e4       	ldi	r27, 0x44	; 68
    58f0:	8d ab       	std	Y+53, r24	; 0x35
    58f2:	9e ab       	std	Y+54, r25	; 0x36
    58f4:	af ab       	std	Y+55, r26	; 0x37
    58f6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    58f8:	6d a9       	ldd	r22, Y+53	; 0x35
    58fa:	7e a9       	ldd	r23, Y+54	; 0x36
    58fc:	8f a9       	ldd	r24, Y+55	; 0x37
    58fe:	98 ad       	ldd	r25, Y+56	; 0x38
    5900:	20 e0       	ldi	r18, 0x00	; 0
    5902:	30 e0       	ldi	r19, 0x00	; 0
    5904:	4a e7       	ldi	r20, 0x7A	; 122
    5906:	55 e4       	ldi	r21, 0x45	; 69
    5908:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    590c:	dc 01       	movw	r26, r24
    590e:	cb 01       	movw	r24, r22
    5910:	89 ab       	std	Y+49, r24	; 0x31
    5912:	9a ab       	std	Y+50, r25	; 0x32
    5914:	ab ab       	std	Y+51, r26	; 0x33
    5916:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5918:	69 a9       	ldd	r22, Y+49	; 0x31
    591a:	7a a9       	ldd	r23, Y+50	; 0x32
    591c:	8b a9       	ldd	r24, Y+51	; 0x33
    591e:	9c a9       	ldd	r25, Y+52	; 0x34
    5920:	20 e0       	ldi	r18, 0x00	; 0
    5922:	30 e0       	ldi	r19, 0x00	; 0
    5924:	40 e8       	ldi	r20, 0x80	; 128
    5926:	5f e3       	ldi	r21, 0x3F	; 63
    5928:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    592c:	88 23       	and	r24, r24
    592e:	2c f4       	brge	.+10     	; 0x593a <CheckAdmin+0x14e>
		__ticks = 1;
    5930:	81 e0       	ldi	r24, 0x01	; 1
    5932:	90 e0       	ldi	r25, 0x00	; 0
    5934:	98 ab       	std	Y+48, r25	; 0x30
    5936:	8f a7       	std	Y+47, r24	; 0x2f
    5938:	3f c0       	rjmp	.+126    	; 0x59b8 <CheckAdmin+0x1cc>
	else if (__tmp > 65535)
    593a:	69 a9       	ldd	r22, Y+49	; 0x31
    593c:	7a a9       	ldd	r23, Y+50	; 0x32
    593e:	8b a9       	ldd	r24, Y+51	; 0x33
    5940:	9c a9       	ldd	r25, Y+52	; 0x34
    5942:	20 e0       	ldi	r18, 0x00	; 0
    5944:	3f ef       	ldi	r19, 0xFF	; 255
    5946:	4f e7       	ldi	r20, 0x7F	; 127
    5948:	57 e4       	ldi	r21, 0x47	; 71
    594a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    594e:	18 16       	cp	r1, r24
    5950:	4c f5       	brge	.+82     	; 0x59a4 <CheckAdmin+0x1b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5952:	6d a9       	ldd	r22, Y+53	; 0x35
    5954:	7e a9       	ldd	r23, Y+54	; 0x36
    5956:	8f a9       	ldd	r24, Y+55	; 0x37
    5958:	98 ad       	ldd	r25, Y+56	; 0x38
    595a:	20 e0       	ldi	r18, 0x00	; 0
    595c:	30 e0       	ldi	r19, 0x00	; 0
    595e:	40 e2       	ldi	r20, 0x20	; 32
    5960:	51 e4       	ldi	r21, 0x41	; 65
    5962:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5966:	dc 01       	movw	r26, r24
    5968:	cb 01       	movw	r24, r22
    596a:	bc 01       	movw	r22, r24
    596c:	cd 01       	movw	r24, r26
    596e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5972:	dc 01       	movw	r26, r24
    5974:	cb 01       	movw	r24, r22
    5976:	98 ab       	std	Y+48, r25	; 0x30
    5978:	8f a7       	std	Y+47, r24	; 0x2f
    597a:	0f c0       	rjmp	.+30     	; 0x599a <CheckAdmin+0x1ae>
    597c:	80 e9       	ldi	r24, 0x90	; 144
    597e:	91 e0       	ldi	r25, 0x01	; 1
    5980:	9e a7       	std	Y+46, r25	; 0x2e
    5982:	8d a7       	std	Y+45, r24	; 0x2d
    5984:	8d a5       	ldd	r24, Y+45	; 0x2d
    5986:	9e a5       	ldd	r25, Y+46	; 0x2e
    5988:	01 97       	sbiw	r24, 0x01	; 1
    598a:	f1 f7       	brne	.-4      	; 0x5988 <CheckAdmin+0x19c>
    598c:	9e a7       	std	Y+46, r25	; 0x2e
    598e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5990:	8f a5       	ldd	r24, Y+47	; 0x2f
    5992:	98 a9       	ldd	r25, Y+48	; 0x30
    5994:	01 97       	sbiw	r24, 0x01	; 1
    5996:	98 ab       	std	Y+48, r25	; 0x30
    5998:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    599a:	8f a5       	ldd	r24, Y+47	; 0x2f
    599c:	98 a9       	ldd	r25, Y+48	; 0x30
    599e:	00 97       	sbiw	r24, 0x00	; 0
    59a0:	69 f7       	brne	.-38     	; 0x597c <CheckAdmin+0x190>
    59a2:	c4 c1       	rjmp	.+904    	; 0x5d2c <CheckAdmin+0x540>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    59a4:	69 a9       	ldd	r22, Y+49	; 0x31
    59a6:	7a a9       	ldd	r23, Y+50	; 0x32
    59a8:	8b a9       	ldd	r24, Y+51	; 0x33
    59aa:	9c a9       	ldd	r25, Y+52	; 0x34
    59ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    59b0:	dc 01       	movw	r26, r24
    59b2:	cb 01       	movw	r24, r22
    59b4:	98 ab       	std	Y+48, r25	; 0x30
    59b6:	8f a7       	std	Y+47, r24	; 0x2f
    59b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    59ba:	98 a9       	ldd	r25, Y+48	; 0x30
    59bc:	9c a7       	std	Y+44, r25	; 0x2c
    59be:	8b a7       	std	Y+43, r24	; 0x2b
    59c0:	8b a5       	ldd	r24, Y+43	; 0x2b
    59c2:	9c a5       	ldd	r25, Y+44	; 0x2c
    59c4:	01 97       	sbiw	r24, 0x01	; 1
    59c6:	f1 f7       	brne	.-4      	; 0x59c4 <CheckAdmin+0x1d8>
    59c8:	9c a7       	std	Y+44, r25	; 0x2c
    59ca:	8b a7       	std	Y+43, r24	; 0x2b
    59cc:	af c1       	rjmp	.+862    	; 0x5d2c <CheckAdmin+0x540>
			_delay_ms(1000);
		}
		else if(Exist_Password==4&&Exist_UserNAme!=4){
    59ce:	89 ad       	ldd	r24, Y+57	; 0x39
    59d0:	84 30       	cpi	r24, 0x04	; 4
    59d2:	09 f0       	breq	.+2      	; 0x59d6 <CheckAdmin+0x1ea>
    59d4:	88 c0       	rjmp	.+272    	; 0x5ae6 <CheckAdmin+0x2fa>
    59d6:	8a ad       	ldd	r24, Y+58	; 0x3a
    59d8:	84 30       	cpi	r24, 0x04	; 4
    59da:	09 f4       	brne	.+2      	; 0x59de <CheckAdmin+0x1f2>
    59dc:	84 c0       	rjmp	.+264    	; 0x5ae6 <CheckAdmin+0x2fa>
			LCD_enuClearScreen();
    59de:	0e 94 df 1c 	call	0x39be	; 0x39be <LCD_enuClearScreen>
			LCD_enuWriteString("Invalid UserName");
    59e2:	8a e7       	ldi	r24, 0x7A	; 122
    59e4:	93 e0       	ldi	r25, 0x03	; 3
    59e6:	0e 94 b9 1c 	call	0x3972	; 0x3972 <LCD_enuWriteString>
			HC05_enuSendString("Invalid UserName\r\n");
    59ea:	8b e8       	ldi	r24, 0x8B	; 139
    59ec:	93 e0       	ldi	r25, 0x03	; 3
    59ee:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
			*Copy_u8AdminState=0;
    59f2:	fe 01       	movw	r30, r28
    59f4:	ee 5b       	subi	r30, 0xBE	; 190
    59f6:	ff 4f       	sbci	r31, 0xFF	; 255
    59f8:	01 90       	ld	r0, Z+
    59fa:	f0 81       	ld	r31, Z
    59fc:	e0 2d       	mov	r30, r0
    59fe:	10 82       	st	Z, r1
    5a00:	80 e0       	ldi	r24, 0x00	; 0
    5a02:	90 e0       	ldi	r25, 0x00	; 0
    5a04:	a8 e4       	ldi	r26, 0x48	; 72
    5a06:	b3 e4       	ldi	r27, 0x43	; 67
    5a08:	8f a3       	std	Y+39, r24	; 0x27
    5a0a:	98 a7       	std	Y+40, r25	; 0x28
    5a0c:	a9 a7       	std	Y+41, r26	; 0x29
    5a0e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a10:	6f a1       	ldd	r22, Y+39	; 0x27
    5a12:	78 a5       	ldd	r23, Y+40	; 0x28
    5a14:	89 a5       	ldd	r24, Y+41	; 0x29
    5a16:	9a a5       	ldd	r25, Y+42	; 0x2a
    5a18:	20 e0       	ldi	r18, 0x00	; 0
    5a1a:	30 e0       	ldi	r19, 0x00	; 0
    5a1c:	4a e7       	ldi	r20, 0x7A	; 122
    5a1e:	55 e4       	ldi	r21, 0x45	; 69
    5a20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a24:	dc 01       	movw	r26, r24
    5a26:	cb 01       	movw	r24, r22
    5a28:	8b a3       	std	Y+35, r24	; 0x23
    5a2a:	9c a3       	std	Y+36, r25	; 0x24
    5a2c:	ad a3       	std	Y+37, r26	; 0x25
    5a2e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5a30:	6b a1       	ldd	r22, Y+35	; 0x23
    5a32:	7c a1       	ldd	r23, Y+36	; 0x24
    5a34:	8d a1       	ldd	r24, Y+37	; 0x25
    5a36:	9e a1       	ldd	r25, Y+38	; 0x26
    5a38:	20 e0       	ldi	r18, 0x00	; 0
    5a3a:	30 e0       	ldi	r19, 0x00	; 0
    5a3c:	40 e8       	ldi	r20, 0x80	; 128
    5a3e:	5f e3       	ldi	r21, 0x3F	; 63
    5a40:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5a44:	88 23       	and	r24, r24
    5a46:	2c f4       	brge	.+10     	; 0x5a52 <CheckAdmin+0x266>
		__ticks = 1;
    5a48:	81 e0       	ldi	r24, 0x01	; 1
    5a4a:	90 e0       	ldi	r25, 0x00	; 0
    5a4c:	9a a3       	std	Y+34, r25	; 0x22
    5a4e:	89 a3       	std	Y+33, r24	; 0x21
    5a50:	3f c0       	rjmp	.+126    	; 0x5ad0 <CheckAdmin+0x2e4>
	else if (__tmp > 65535)
    5a52:	6b a1       	ldd	r22, Y+35	; 0x23
    5a54:	7c a1       	ldd	r23, Y+36	; 0x24
    5a56:	8d a1       	ldd	r24, Y+37	; 0x25
    5a58:	9e a1       	ldd	r25, Y+38	; 0x26
    5a5a:	20 e0       	ldi	r18, 0x00	; 0
    5a5c:	3f ef       	ldi	r19, 0xFF	; 255
    5a5e:	4f e7       	ldi	r20, 0x7F	; 127
    5a60:	57 e4       	ldi	r21, 0x47	; 71
    5a62:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5a66:	18 16       	cp	r1, r24
    5a68:	4c f5       	brge	.+82     	; 0x5abc <CheckAdmin+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5a6a:	6f a1       	ldd	r22, Y+39	; 0x27
    5a6c:	78 a5       	ldd	r23, Y+40	; 0x28
    5a6e:	89 a5       	ldd	r24, Y+41	; 0x29
    5a70:	9a a5       	ldd	r25, Y+42	; 0x2a
    5a72:	20 e0       	ldi	r18, 0x00	; 0
    5a74:	30 e0       	ldi	r19, 0x00	; 0
    5a76:	40 e2       	ldi	r20, 0x20	; 32
    5a78:	51 e4       	ldi	r21, 0x41	; 65
    5a7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a7e:	dc 01       	movw	r26, r24
    5a80:	cb 01       	movw	r24, r22
    5a82:	bc 01       	movw	r22, r24
    5a84:	cd 01       	movw	r24, r26
    5a86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a8a:	dc 01       	movw	r26, r24
    5a8c:	cb 01       	movw	r24, r22
    5a8e:	9a a3       	std	Y+34, r25	; 0x22
    5a90:	89 a3       	std	Y+33, r24	; 0x21
    5a92:	0f c0       	rjmp	.+30     	; 0x5ab2 <CheckAdmin+0x2c6>
    5a94:	80 e9       	ldi	r24, 0x90	; 144
    5a96:	91 e0       	ldi	r25, 0x01	; 1
    5a98:	98 a3       	std	Y+32, r25	; 0x20
    5a9a:	8f 8f       	std	Y+31, r24	; 0x1f
    5a9c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5a9e:	98 a1       	ldd	r25, Y+32	; 0x20
    5aa0:	01 97       	sbiw	r24, 0x01	; 1
    5aa2:	f1 f7       	brne	.-4      	; 0x5aa0 <CheckAdmin+0x2b4>
    5aa4:	98 a3       	std	Y+32, r25	; 0x20
    5aa6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5aa8:	89 a1       	ldd	r24, Y+33	; 0x21
    5aaa:	9a a1       	ldd	r25, Y+34	; 0x22
    5aac:	01 97       	sbiw	r24, 0x01	; 1
    5aae:	9a a3       	std	Y+34, r25	; 0x22
    5ab0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5ab2:	89 a1       	ldd	r24, Y+33	; 0x21
    5ab4:	9a a1       	ldd	r25, Y+34	; 0x22
    5ab6:	00 97       	sbiw	r24, 0x00	; 0
    5ab8:	69 f7       	brne	.-38     	; 0x5a94 <CheckAdmin+0x2a8>
    5aba:	38 c1       	rjmp	.+624    	; 0x5d2c <CheckAdmin+0x540>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5abc:	6b a1       	ldd	r22, Y+35	; 0x23
    5abe:	7c a1       	ldd	r23, Y+36	; 0x24
    5ac0:	8d a1       	ldd	r24, Y+37	; 0x25
    5ac2:	9e a1       	ldd	r25, Y+38	; 0x26
    5ac4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ac8:	dc 01       	movw	r26, r24
    5aca:	cb 01       	movw	r24, r22
    5acc:	9a a3       	std	Y+34, r25	; 0x22
    5ace:	89 a3       	std	Y+33, r24	; 0x21
    5ad0:	89 a1       	ldd	r24, Y+33	; 0x21
    5ad2:	9a a1       	ldd	r25, Y+34	; 0x22
    5ad4:	9e 8f       	std	Y+30, r25	; 0x1e
    5ad6:	8d 8f       	std	Y+29, r24	; 0x1d
    5ad8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5ada:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5adc:	01 97       	sbiw	r24, 0x01	; 1
    5ade:	f1 f7       	brne	.-4      	; 0x5adc <CheckAdmin+0x2f0>
    5ae0:	9e 8f       	std	Y+30, r25	; 0x1e
    5ae2:	8d 8f       	std	Y+29, r24	; 0x1d
    5ae4:	23 c1       	rjmp	.+582    	; 0x5d2c <CheckAdmin+0x540>
			_delay_ms(200);
		}
		else if(Exist_UserNAme==4&&Exist_Password!=4){
    5ae6:	8a ad       	ldd	r24, Y+58	; 0x3a
    5ae8:	84 30       	cpi	r24, 0x04	; 4
    5aea:	09 f0       	breq	.+2      	; 0x5aee <CheckAdmin+0x302>
    5aec:	88 c0       	rjmp	.+272    	; 0x5bfe <CheckAdmin+0x412>
    5aee:	89 ad       	ldd	r24, Y+57	; 0x39
    5af0:	84 30       	cpi	r24, 0x04	; 4
    5af2:	09 f4       	brne	.+2      	; 0x5af6 <CheckAdmin+0x30a>
    5af4:	84 c0       	rjmp	.+264    	; 0x5bfe <CheckAdmin+0x412>
			LCD_enuClearScreen();
    5af6:	0e 94 df 1c 	call	0x39be	; 0x39be <LCD_enuClearScreen>
			LCD_enuWriteString("Invalid Password");
    5afa:	8e e9       	ldi	r24, 0x9E	; 158
    5afc:	93 e0       	ldi	r25, 0x03	; 3
    5afe:	0e 94 b9 1c 	call	0x3972	; 0x3972 <LCD_enuWriteString>
			HC05_enuSendString("Invalid Password\r\n");
    5b02:	8f ea       	ldi	r24, 0xAF	; 175
    5b04:	93 e0       	ldi	r25, 0x03	; 3
    5b06:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
			*Copy_u8AdminState=0;
    5b0a:	fe 01       	movw	r30, r28
    5b0c:	ee 5b       	subi	r30, 0xBE	; 190
    5b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    5b10:	01 90       	ld	r0, Z+
    5b12:	f0 81       	ld	r31, Z
    5b14:	e0 2d       	mov	r30, r0
    5b16:	10 82       	st	Z, r1
    5b18:	80 e0       	ldi	r24, 0x00	; 0
    5b1a:	90 e0       	ldi	r25, 0x00	; 0
    5b1c:	a8 e4       	ldi	r26, 0x48	; 72
    5b1e:	b3 e4       	ldi	r27, 0x43	; 67
    5b20:	89 8f       	std	Y+25, r24	; 0x19
    5b22:	9a 8f       	std	Y+26, r25	; 0x1a
    5b24:	ab 8f       	std	Y+27, r26	; 0x1b
    5b26:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5b28:	69 8d       	ldd	r22, Y+25	; 0x19
    5b2a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5b2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5b2e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5b30:	20 e0       	ldi	r18, 0x00	; 0
    5b32:	30 e0       	ldi	r19, 0x00	; 0
    5b34:	4a e7       	ldi	r20, 0x7A	; 122
    5b36:	55 e4       	ldi	r21, 0x45	; 69
    5b38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b3c:	dc 01       	movw	r26, r24
    5b3e:	cb 01       	movw	r24, r22
    5b40:	8d 8b       	std	Y+21, r24	; 0x15
    5b42:	9e 8b       	std	Y+22, r25	; 0x16
    5b44:	af 8b       	std	Y+23, r26	; 0x17
    5b46:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5b48:	6d 89       	ldd	r22, Y+21	; 0x15
    5b4a:	7e 89       	ldd	r23, Y+22	; 0x16
    5b4c:	8f 89       	ldd	r24, Y+23	; 0x17
    5b4e:	98 8d       	ldd	r25, Y+24	; 0x18
    5b50:	20 e0       	ldi	r18, 0x00	; 0
    5b52:	30 e0       	ldi	r19, 0x00	; 0
    5b54:	40 e8       	ldi	r20, 0x80	; 128
    5b56:	5f e3       	ldi	r21, 0x3F	; 63
    5b58:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5b5c:	88 23       	and	r24, r24
    5b5e:	2c f4       	brge	.+10     	; 0x5b6a <CheckAdmin+0x37e>
		__ticks = 1;
    5b60:	81 e0       	ldi	r24, 0x01	; 1
    5b62:	90 e0       	ldi	r25, 0x00	; 0
    5b64:	9c 8b       	std	Y+20, r25	; 0x14
    5b66:	8b 8b       	std	Y+19, r24	; 0x13
    5b68:	3f c0       	rjmp	.+126    	; 0x5be8 <CheckAdmin+0x3fc>
	else if (__tmp > 65535)
    5b6a:	6d 89       	ldd	r22, Y+21	; 0x15
    5b6c:	7e 89       	ldd	r23, Y+22	; 0x16
    5b6e:	8f 89       	ldd	r24, Y+23	; 0x17
    5b70:	98 8d       	ldd	r25, Y+24	; 0x18
    5b72:	20 e0       	ldi	r18, 0x00	; 0
    5b74:	3f ef       	ldi	r19, 0xFF	; 255
    5b76:	4f e7       	ldi	r20, 0x7F	; 127
    5b78:	57 e4       	ldi	r21, 0x47	; 71
    5b7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5b7e:	18 16       	cp	r1, r24
    5b80:	4c f5       	brge	.+82     	; 0x5bd4 <CheckAdmin+0x3e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b82:	69 8d       	ldd	r22, Y+25	; 0x19
    5b84:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5b86:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5b88:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5b8a:	20 e0       	ldi	r18, 0x00	; 0
    5b8c:	30 e0       	ldi	r19, 0x00	; 0
    5b8e:	40 e2       	ldi	r20, 0x20	; 32
    5b90:	51 e4       	ldi	r21, 0x41	; 65
    5b92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b96:	dc 01       	movw	r26, r24
    5b98:	cb 01       	movw	r24, r22
    5b9a:	bc 01       	movw	r22, r24
    5b9c:	cd 01       	movw	r24, r26
    5b9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ba2:	dc 01       	movw	r26, r24
    5ba4:	cb 01       	movw	r24, r22
    5ba6:	9c 8b       	std	Y+20, r25	; 0x14
    5ba8:	8b 8b       	std	Y+19, r24	; 0x13
    5baa:	0f c0       	rjmp	.+30     	; 0x5bca <CheckAdmin+0x3de>
    5bac:	80 e9       	ldi	r24, 0x90	; 144
    5bae:	91 e0       	ldi	r25, 0x01	; 1
    5bb0:	9a 8b       	std	Y+18, r25	; 0x12
    5bb2:	89 8b       	std	Y+17, r24	; 0x11
    5bb4:	89 89       	ldd	r24, Y+17	; 0x11
    5bb6:	9a 89       	ldd	r25, Y+18	; 0x12
    5bb8:	01 97       	sbiw	r24, 0x01	; 1
    5bba:	f1 f7       	brne	.-4      	; 0x5bb8 <CheckAdmin+0x3cc>
    5bbc:	9a 8b       	std	Y+18, r25	; 0x12
    5bbe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5bc0:	8b 89       	ldd	r24, Y+19	; 0x13
    5bc2:	9c 89       	ldd	r25, Y+20	; 0x14
    5bc4:	01 97       	sbiw	r24, 0x01	; 1
    5bc6:	9c 8b       	std	Y+20, r25	; 0x14
    5bc8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5bca:	8b 89       	ldd	r24, Y+19	; 0x13
    5bcc:	9c 89       	ldd	r25, Y+20	; 0x14
    5bce:	00 97       	sbiw	r24, 0x00	; 0
    5bd0:	69 f7       	brne	.-38     	; 0x5bac <CheckAdmin+0x3c0>
    5bd2:	ac c0       	rjmp	.+344    	; 0x5d2c <CheckAdmin+0x540>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5bd4:	6d 89       	ldd	r22, Y+21	; 0x15
    5bd6:	7e 89       	ldd	r23, Y+22	; 0x16
    5bd8:	8f 89       	ldd	r24, Y+23	; 0x17
    5bda:	98 8d       	ldd	r25, Y+24	; 0x18
    5bdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5be0:	dc 01       	movw	r26, r24
    5be2:	cb 01       	movw	r24, r22
    5be4:	9c 8b       	std	Y+20, r25	; 0x14
    5be6:	8b 8b       	std	Y+19, r24	; 0x13
    5be8:	8b 89       	ldd	r24, Y+19	; 0x13
    5bea:	9c 89       	ldd	r25, Y+20	; 0x14
    5bec:	98 8b       	std	Y+16, r25	; 0x10
    5bee:	8f 87       	std	Y+15, r24	; 0x0f
    5bf0:	8f 85       	ldd	r24, Y+15	; 0x0f
    5bf2:	98 89       	ldd	r25, Y+16	; 0x10
    5bf4:	01 97       	sbiw	r24, 0x01	; 1
    5bf6:	f1 f7       	brne	.-4      	; 0x5bf4 <CheckAdmin+0x408>
    5bf8:	98 8b       	std	Y+16, r25	; 0x10
    5bfa:	8f 87       	std	Y+15, r24	; 0x0f
    5bfc:	97 c0       	rjmp	.+302    	; 0x5d2c <CheckAdmin+0x540>
			_delay_ms(200);
		}
		else if(Exist_Password!=4&&Exist_UserNAme!=4){
    5bfe:	89 ad       	ldd	r24, Y+57	; 0x39
    5c00:	84 30       	cpi	r24, 0x04	; 4
    5c02:	09 f4       	brne	.+2      	; 0x5c06 <CheckAdmin+0x41a>
    5c04:	93 c0       	rjmp	.+294    	; 0x5d2c <CheckAdmin+0x540>
    5c06:	8a ad       	ldd	r24, Y+58	; 0x3a
    5c08:	84 30       	cpi	r24, 0x04	; 4
    5c0a:	09 f4       	brne	.+2      	; 0x5c0e <CheckAdmin+0x422>
    5c0c:	8f c0       	rjmp	.+286    	; 0x5d2c <CheckAdmin+0x540>
			LCD_enuClearScreen();
    5c0e:	0e 94 df 1c 	call	0x39be	; 0x39be <LCD_enuClearScreen>
			LCD_enuWriteString("Invalid UserName");
    5c12:	8a e7       	ldi	r24, 0x7A	; 122
    5c14:	93 e0       	ldi	r25, 0x03	; 3
    5c16:	0e 94 b9 1c 	call	0x3972	; 0x3972 <LCD_enuWriteString>
			HC05_enuSendString("Invalid UserName\r\n");
    5c1a:	8b e8       	ldi	r24, 0x8B	; 139
    5c1c:	93 e0       	ldi	r25, 0x03	; 3
    5c1e:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
			LCD_enuGoToPosition(1,0);
    5c22:	81 e0       	ldi	r24, 0x01	; 1
    5c24:	60 e0       	ldi	r22, 0x00	; 0
    5c26:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <LCD_enuGoToPosition>
			LCD_enuWriteString("Invalid Password");
    5c2a:	8e e9       	ldi	r24, 0x9E	; 158
    5c2c:	93 e0       	ldi	r25, 0x03	; 3
    5c2e:	0e 94 b9 1c 	call	0x3972	; 0x3972 <LCD_enuWriteString>
			HC05_enuSendString("Invalid Password\r\n");
    5c32:	8f ea       	ldi	r24, 0xAF	; 175
    5c34:	93 e0       	ldi	r25, 0x03	; 3
    5c36:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
			*Copy_u8AdminState=0;
    5c3a:	fe 01       	movw	r30, r28
    5c3c:	ee 5b       	subi	r30, 0xBE	; 190
    5c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    5c40:	01 90       	ld	r0, Z+
    5c42:	f0 81       	ld	r31, Z
    5c44:	e0 2d       	mov	r30, r0
    5c46:	10 82       	st	Z, r1
    5c48:	80 e0       	ldi	r24, 0x00	; 0
    5c4a:	90 e0       	ldi	r25, 0x00	; 0
    5c4c:	a8 e4       	ldi	r26, 0x48	; 72
    5c4e:	b3 e4       	ldi	r27, 0x43	; 67
    5c50:	8b 87       	std	Y+11, r24	; 0x0b
    5c52:	9c 87       	std	Y+12, r25	; 0x0c
    5c54:	ad 87       	std	Y+13, r26	; 0x0d
    5c56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5c58:	6b 85       	ldd	r22, Y+11	; 0x0b
    5c5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    5c5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    5c5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5c60:	20 e0       	ldi	r18, 0x00	; 0
    5c62:	30 e0       	ldi	r19, 0x00	; 0
    5c64:	4a e7       	ldi	r20, 0x7A	; 122
    5c66:	55 e4       	ldi	r21, 0x45	; 69
    5c68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c6c:	dc 01       	movw	r26, r24
    5c6e:	cb 01       	movw	r24, r22
    5c70:	8f 83       	std	Y+7, r24	; 0x07
    5c72:	98 87       	std	Y+8, r25	; 0x08
    5c74:	a9 87       	std	Y+9, r26	; 0x09
    5c76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5c78:	6f 81       	ldd	r22, Y+7	; 0x07
    5c7a:	78 85       	ldd	r23, Y+8	; 0x08
    5c7c:	89 85       	ldd	r24, Y+9	; 0x09
    5c7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c80:	20 e0       	ldi	r18, 0x00	; 0
    5c82:	30 e0       	ldi	r19, 0x00	; 0
    5c84:	40 e8       	ldi	r20, 0x80	; 128
    5c86:	5f e3       	ldi	r21, 0x3F	; 63
    5c88:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5c8c:	88 23       	and	r24, r24
    5c8e:	2c f4       	brge	.+10     	; 0x5c9a <CheckAdmin+0x4ae>
		__ticks = 1;
    5c90:	81 e0       	ldi	r24, 0x01	; 1
    5c92:	90 e0       	ldi	r25, 0x00	; 0
    5c94:	9e 83       	std	Y+6, r25	; 0x06
    5c96:	8d 83       	std	Y+5, r24	; 0x05
    5c98:	3f c0       	rjmp	.+126    	; 0x5d18 <CheckAdmin+0x52c>
	else if (__tmp > 65535)
    5c9a:	6f 81       	ldd	r22, Y+7	; 0x07
    5c9c:	78 85       	ldd	r23, Y+8	; 0x08
    5c9e:	89 85       	ldd	r24, Y+9	; 0x09
    5ca0:	9a 85       	ldd	r25, Y+10	; 0x0a
    5ca2:	20 e0       	ldi	r18, 0x00	; 0
    5ca4:	3f ef       	ldi	r19, 0xFF	; 255
    5ca6:	4f e7       	ldi	r20, 0x7F	; 127
    5ca8:	57 e4       	ldi	r21, 0x47	; 71
    5caa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5cae:	18 16       	cp	r1, r24
    5cb0:	4c f5       	brge	.+82     	; 0x5d04 <CheckAdmin+0x518>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5cb2:	6b 85       	ldd	r22, Y+11	; 0x0b
    5cb4:	7c 85       	ldd	r23, Y+12	; 0x0c
    5cb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    5cb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    5cba:	20 e0       	ldi	r18, 0x00	; 0
    5cbc:	30 e0       	ldi	r19, 0x00	; 0
    5cbe:	40 e2       	ldi	r20, 0x20	; 32
    5cc0:	51 e4       	ldi	r21, 0x41	; 65
    5cc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5cc6:	dc 01       	movw	r26, r24
    5cc8:	cb 01       	movw	r24, r22
    5cca:	bc 01       	movw	r22, r24
    5ccc:	cd 01       	movw	r24, r26
    5cce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5cd2:	dc 01       	movw	r26, r24
    5cd4:	cb 01       	movw	r24, r22
    5cd6:	9e 83       	std	Y+6, r25	; 0x06
    5cd8:	8d 83       	std	Y+5, r24	; 0x05
    5cda:	0f c0       	rjmp	.+30     	; 0x5cfa <CheckAdmin+0x50e>
    5cdc:	80 e9       	ldi	r24, 0x90	; 144
    5cde:	91 e0       	ldi	r25, 0x01	; 1
    5ce0:	9c 83       	std	Y+4, r25	; 0x04
    5ce2:	8b 83       	std	Y+3, r24	; 0x03
    5ce4:	8b 81       	ldd	r24, Y+3	; 0x03
    5ce6:	9c 81       	ldd	r25, Y+4	; 0x04
    5ce8:	01 97       	sbiw	r24, 0x01	; 1
    5cea:	f1 f7       	brne	.-4      	; 0x5ce8 <CheckAdmin+0x4fc>
    5cec:	9c 83       	std	Y+4, r25	; 0x04
    5cee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5cf0:	8d 81       	ldd	r24, Y+5	; 0x05
    5cf2:	9e 81       	ldd	r25, Y+6	; 0x06
    5cf4:	01 97       	sbiw	r24, 0x01	; 1
    5cf6:	9e 83       	std	Y+6, r25	; 0x06
    5cf8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5cfa:	8d 81       	ldd	r24, Y+5	; 0x05
    5cfc:	9e 81       	ldd	r25, Y+6	; 0x06
    5cfe:	00 97       	sbiw	r24, 0x00	; 0
    5d00:	69 f7       	brne	.-38     	; 0x5cdc <CheckAdmin+0x4f0>
    5d02:	14 c0       	rjmp	.+40     	; 0x5d2c <CheckAdmin+0x540>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5d04:	6f 81       	ldd	r22, Y+7	; 0x07
    5d06:	78 85       	ldd	r23, Y+8	; 0x08
    5d08:	89 85       	ldd	r24, Y+9	; 0x09
    5d0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d10:	dc 01       	movw	r26, r24
    5d12:	cb 01       	movw	r24, r22
    5d14:	9e 83       	std	Y+6, r25	; 0x06
    5d16:	8d 83       	std	Y+5, r24	; 0x05
    5d18:	8d 81       	ldd	r24, Y+5	; 0x05
    5d1a:	9e 81       	ldd	r25, Y+6	; 0x06
    5d1c:	9a 83       	std	Y+2, r25	; 0x02
    5d1e:	89 83       	std	Y+1, r24	; 0x01
    5d20:	89 81       	ldd	r24, Y+1	; 0x01
    5d22:	9a 81       	ldd	r25, Y+2	; 0x02
    5d24:	01 97       	sbiw	r24, 0x01	; 1
    5d26:	f1 f7       	brne	.-4      	; 0x5d24 <CheckAdmin+0x538>
    5d28:	9a 83       	std	Y+2, r25	; 0x02
    5d2a:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(200);

		}
		LCD_enuClearScreen();
    5d2c:	0e 94 df 1c 	call	0x39be	; 0x39be <LCD_enuClearScreen>
	}
    5d30:	cd 5b       	subi	r28, 0xBD	; 189
    5d32:	df 4f       	sbci	r29, 0xFF	; 255
    5d34:	0f b6       	in	r0, 0x3f	; 63
    5d36:	f8 94       	cli
    5d38:	de bf       	out	0x3e, r29	; 62
    5d3a:	0f be       	out	0x3f, r0	; 63
    5d3c:	cd bf       	out	0x3d, r28	; 61
    5d3e:	cf 91       	pop	r28
    5d40:	df 91       	pop	r29
    5d42:	08 95       	ret

00005d44 <AddUser>:
	void AddUser (u8* Copy_u8Id, u8* Copy_u8Password){
    5d44:	df 93       	push	r29
    5d46:	cf 93       	push	r28
    5d48:	cd b7       	in	r28, 0x3d	; 61
    5d4a:	de b7       	in	r29, 0x3e	; 62
    5d4c:	e9 97       	sbiw	r28, 0x39	; 57
    5d4e:	0f b6       	in	r0, 0x3f	; 63
    5d50:	f8 94       	cli
    5d52:	de bf       	out	0x3e, r29	; 62
    5d54:	0f be       	out	0x3f, r0	; 63
    5d56:	cd bf       	out	0x3d, r28	; 61
    5d58:	9f ab       	std	Y+55, r25	; 0x37
    5d5a:	8e ab       	std	Y+54, r24	; 0x36
    5d5c:	79 af       	std	Y+57, r23	; 0x39
    5d5e:	68 af       	std	Y+56, r22	; 0x38

		u8 Num_Users=0;
    5d60:	1c aa       	std	Y+52, r1	; 0x34
		EEPROM_enuRead(&Num_Users,0,90);
    5d62:	ce 01       	movw	r24, r28
    5d64:	c4 96       	adiw	r24, 0x34	; 52
    5d66:	60 e0       	ldi	r22, 0x00	; 0
    5d68:	4a e5       	ldi	r20, 0x5A	; 90
    5d6a:	0e 94 01 21 	call	0x4202	; 0x4202 <EEPROM_enuRead>
		if(Num_Users<Max_Num_Users){
    5d6e:	9c a9       	ldd	r25, Y+52	; 0x34
    5d70:	80 91 0a 08 	lds	r24, 0x080A
    5d74:	98 17       	cp	r25, r24
    5d76:	08 f0       	brcs	.+2      	; 0x5d7a <AddUser+0x36>
    5d78:	d2 c1       	rjmp	.+932    	; 0x611e <AddUser+0x3da>

			if(Num_Users>0){
    5d7a:	8c a9       	ldd	r24, Y+52	; 0x34
    5d7c:	88 23       	and	r24, r24
    5d7e:	09 f4       	brne	.+2      	; 0x5d82 <AddUser+0x3e>
    5d80:	8b c1       	rjmp	.+790    	; 0x6098 <AddUser+0x354>
				u8 Problem=0;
    5d82:	1b aa       	std	Y+51, r1	; 0x33
				for (u8 Counter=0;Counter<Num_Users;Counter++){
    5d84:	1a aa       	std	Y+50, r1	; 0x32
    5d86:	b4 c0       	rjmp	.+360    	; 0x5ef0 <AddUser+0x1ac>

					u8 Num_Digit=0;  u8 Address=0;  u8 Exist_User=0; u8   Date=0;
    5d88:	19 aa       	std	Y+49, r1	; 0x31
    5d8a:	18 aa       	std	Y+48, r1	; 0x30
    5d8c:	1f a6       	std	Y+47, r1	; 0x2f
    5d8e:	1d aa       	std	Y+53, r1	; 0x35
    5d90:	25 c0       	rjmp	.+74     	; 0x5ddc <AddUser+0x98>
					for(;Num_Digit<4;Num_Digit++){
						Address=Counter*8+Num_Digit;
    5d92:	8a a9       	ldd	r24, Y+50	; 0x32
    5d94:	88 2f       	mov	r24, r24
    5d96:	90 e0       	ldi	r25, 0x00	; 0
    5d98:	88 0f       	add	r24, r24
    5d9a:	99 1f       	adc	r25, r25
    5d9c:	88 0f       	add	r24, r24
    5d9e:	99 1f       	adc	r25, r25
    5da0:	88 0f       	add	r24, r24
    5da2:	99 1f       	adc	r25, r25
    5da4:	98 2f       	mov	r25, r24
    5da6:	89 a9       	ldd	r24, Y+49	; 0x31
    5da8:	89 0f       	add	r24, r25
    5daa:	88 ab       	std	Y+48, r24	; 0x30
						EEPROM_enuRead(&Date,0,Address);
    5dac:	ce 01       	movw	r24, r28
    5dae:	c5 96       	adiw	r24, 0x35	; 53
    5db0:	60 e0       	ldi	r22, 0x00	; 0
    5db2:	48 a9       	ldd	r20, Y+48	; 0x30
    5db4:	0e 94 01 21 	call	0x4202	; 0x4202 <EEPROM_enuRead>
						if(Date==Copy_u8Id[Num_Digit]){
    5db8:	89 a9       	ldd	r24, Y+49	; 0x31
    5dba:	28 2f       	mov	r18, r24
    5dbc:	30 e0       	ldi	r19, 0x00	; 0
    5dbe:	8e a9       	ldd	r24, Y+54	; 0x36
    5dc0:	9f a9       	ldd	r25, Y+55	; 0x37
    5dc2:	fc 01       	movw	r30, r24
    5dc4:	e2 0f       	add	r30, r18
    5dc6:	f3 1f       	adc	r31, r19
    5dc8:	90 81       	ld	r25, Z
    5dca:	8d a9       	ldd	r24, Y+53	; 0x35
    5dcc:	98 17       	cp	r25, r24
    5dce:	19 f4       	brne	.+6      	; 0x5dd6 <AddUser+0x92>
							Exist_User++;
    5dd0:	8f a5       	ldd	r24, Y+47	; 0x2f
    5dd2:	8f 5f       	subi	r24, 0xFF	; 255
    5dd4:	8f a7       	std	Y+47, r24	; 0x2f
			if(Num_Users>0){
				u8 Problem=0;
				for (u8 Counter=0;Counter<Num_Users;Counter++){

					u8 Num_Digit=0;  u8 Address=0;  u8 Exist_User=0; u8   Date=0;
					for(;Num_Digit<4;Num_Digit++){
    5dd6:	89 a9       	ldd	r24, Y+49	; 0x31
    5dd8:	8f 5f       	subi	r24, 0xFF	; 255
    5dda:	89 ab       	std	Y+49, r24	; 0x31
    5ddc:	89 a9       	ldd	r24, Y+49	; 0x31
    5dde:	84 30       	cpi	r24, 0x04	; 4
    5de0:	c0 f2       	brcs	.-80     	; 0x5d92 <AddUser+0x4e>
						EEPROM_enuRead(&Date,0,Address);
						if(Date==Copy_u8Id[Num_Digit]){
							Exist_User++;
						}
					}
						if (Exist_User==4){
    5de2:	8f a5       	ldd	r24, Y+47	; 0x2f
    5de4:	84 30       	cpi	r24, 0x04	; 4
    5de6:	09 f0       	breq	.+2      	; 0x5dea <AddUser+0xa6>
    5de8:	80 c0       	rjmp	.+256    	; 0x5eea <AddUser+0x1a6>
							LCD_enuClearScreen();
    5dea:	0e 94 df 1c 	call	0x39be	; 0x39be <LCD_enuClearScreen>
							LCD_enuWriteString("User Is Existed");
    5dee:	82 ec       	ldi	r24, 0xC2	; 194
    5df0:	93 e0       	ldi	r25, 0x03	; 3
    5df2:	0e 94 b9 1c 	call	0x3972	; 0x3972 <LCD_enuWriteString>
							HC05_enuSendString("the User is Already Existed\r\n");
    5df6:	82 ed       	ldi	r24, 0xD2	; 210
    5df8:	93 e0       	ldi	r25, 0x03	; 3
    5dfa:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
    5dfe:	80 e0       	ldi	r24, 0x00	; 0
    5e00:	90 e0       	ldi	r25, 0x00	; 0
    5e02:	aa e7       	ldi	r26, 0x7A	; 122
    5e04:	b4 e4       	ldi	r27, 0x44	; 68
    5e06:	8f a3       	std	Y+39, r24	; 0x27
    5e08:	98 a7       	std	Y+40, r25	; 0x28
    5e0a:	a9 a7       	std	Y+41, r26	; 0x29
    5e0c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5e0e:	6f a1       	ldd	r22, Y+39	; 0x27
    5e10:	78 a5       	ldd	r23, Y+40	; 0x28
    5e12:	89 a5       	ldd	r24, Y+41	; 0x29
    5e14:	9a a5       	ldd	r25, Y+42	; 0x2a
    5e16:	20 e0       	ldi	r18, 0x00	; 0
    5e18:	30 e0       	ldi	r19, 0x00	; 0
    5e1a:	4a e7       	ldi	r20, 0x7A	; 122
    5e1c:	55 e4       	ldi	r21, 0x45	; 69
    5e1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5e22:	dc 01       	movw	r26, r24
    5e24:	cb 01       	movw	r24, r22
    5e26:	8b a3       	std	Y+35, r24	; 0x23
    5e28:	9c a3       	std	Y+36, r25	; 0x24
    5e2a:	ad a3       	std	Y+37, r26	; 0x25
    5e2c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5e2e:	6b a1       	ldd	r22, Y+35	; 0x23
    5e30:	7c a1       	ldd	r23, Y+36	; 0x24
    5e32:	8d a1       	ldd	r24, Y+37	; 0x25
    5e34:	9e a1       	ldd	r25, Y+38	; 0x26
    5e36:	20 e0       	ldi	r18, 0x00	; 0
    5e38:	30 e0       	ldi	r19, 0x00	; 0
    5e3a:	40 e8       	ldi	r20, 0x80	; 128
    5e3c:	5f e3       	ldi	r21, 0x3F	; 63
    5e3e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5e42:	88 23       	and	r24, r24
    5e44:	2c f4       	brge	.+10     	; 0x5e50 <AddUser+0x10c>
		__ticks = 1;
    5e46:	81 e0       	ldi	r24, 0x01	; 1
    5e48:	90 e0       	ldi	r25, 0x00	; 0
    5e4a:	9a a3       	std	Y+34, r25	; 0x22
    5e4c:	89 a3       	std	Y+33, r24	; 0x21
    5e4e:	3f c0       	rjmp	.+126    	; 0x5ece <AddUser+0x18a>
	else if (__tmp > 65535)
    5e50:	6b a1       	ldd	r22, Y+35	; 0x23
    5e52:	7c a1       	ldd	r23, Y+36	; 0x24
    5e54:	8d a1       	ldd	r24, Y+37	; 0x25
    5e56:	9e a1       	ldd	r25, Y+38	; 0x26
    5e58:	20 e0       	ldi	r18, 0x00	; 0
    5e5a:	3f ef       	ldi	r19, 0xFF	; 255
    5e5c:	4f e7       	ldi	r20, 0x7F	; 127
    5e5e:	57 e4       	ldi	r21, 0x47	; 71
    5e60:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5e64:	18 16       	cp	r1, r24
    5e66:	4c f5       	brge	.+82     	; 0x5eba <AddUser+0x176>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5e68:	6f a1       	ldd	r22, Y+39	; 0x27
    5e6a:	78 a5       	ldd	r23, Y+40	; 0x28
    5e6c:	89 a5       	ldd	r24, Y+41	; 0x29
    5e6e:	9a a5       	ldd	r25, Y+42	; 0x2a
    5e70:	20 e0       	ldi	r18, 0x00	; 0
    5e72:	30 e0       	ldi	r19, 0x00	; 0
    5e74:	40 e2       	ldi	r20, 0x20	; 32
    5e76:	51 e4       	ldi	r21, 0x41	; 65
    5e78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5e7c:	dc 01       	movw	r26, r24
    5e7e:	cb 01       	movw	r24, r22
    5e80:	bc 01       	movw	r22, r24
    5e82:	cd 01       	movw	r24, r26
    5e84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e88:	dc 01       	movw	r26, r24
    5e8a:	cb 01       	movw	r24, r22
    5e8c:	9a a3       	std	Y+34, r25	; 0x22
    5e8e:	89 a3       	std	Y+33, r24	; 0x21
    5e90:	0f c0       	rjmp	.+30     	; 0x5eb0 <AddUser+0x16c>
    5e92:	80 e9       	ldi	r24, 0x90	; 144
    5e94:	91 e0       	ldi	r25, 0x01	; 1
    5e96:	98 a3       	std	Y+32, r25	; 0x20
    5e98:	8f 8f       	std	Y+31, r24	; 0x1f
    5e9a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5e9c:	98 a1       	ldd	r25, Y+32	; 0x20
    5e9e:	01 97       	sbiw	r24, 0x01	; 1
    5ea0:	f1 f7       	brne	.-4      	; 0x5e9e <AddUser+0x15a>
    5ea2:	98 a3       	std	Y+32, r25	; 0x20
    5ea4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5ea6:	89 a1       	ldd	r24, Y+33	; 0x21
    5ea8:	9a a1       	ldd	r25, Y+34	; 0x22
    5eaa:	01 97       	sbiw	r24, 0x01	; 1
    5eac:	9a a3       	std	Y+34, r25	; 0x22
    5eae:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5eb0:	89 a1       	ldd	r24, Y+33	; 0x21
    5eb2:	9a a1       	ldd	r25, Y+34	; 0x22
    5eb4:	00 97       	sbiw	r24, 0x00	; 0
    5eb6:	69 f7       	brne	.-38     	; 0x5e92 <AddUser+0x14e>
    5eb8:	14 c0       	rjmp	.+40     	; 0x5ee2 <AddUser+0x19e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5eba:	6b a1       	ldd	r22, Y+35	; 0x23
    5ebc:	7c a1       	ldd	r23, Y+36	; 0x24
    5ebe:	8d a1       	ldd	r24, Y+37	; 0x25
    5ec0:	9e a1       	ldd	r25, Y+38	; 0x26
    5ec2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ec6:	dc 01       	movw	r26, r24
    5ec8:	cb 01       	movw	r24, r22
    5eca:	9a a3       	std	Y+34, r25	; 0x22
    5ecc:	89 a3       	std	Y+33, r24	; 0x21
    5ece:	89 a1       	ldd	r24, Y+33	; 0x21
    5ed0:	9a a1       	ldd	r25, Y+34	; 0x22
    5ed2:	9e 8f       	std	Y+30, r25	; 0x1e
    5ed4:	8d 8f       	std	Y+29, r24	; 0x1d
    5ed6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5ed8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5eda:	01 97       	sbiw	r24, 0x01	; 1
    5edc:	f1 f7       	brne	.-4      	; 0x5eda <AddUser+0x196>
    5ede:	9e 8f       	std	Y+30, r25	; 0x1e
    5ee0:	8d 8f       	std	Y+29, r24	; 0x1d
							_delay_ms(1000);
							Problem++;
    5ee2:	8b a9       	ldd	r24, Y+51	; 0x33
    5ee4:	8f 5f       	subi	r24, 0xFF	; 255
    5ee6:	8b ab       	std	Y+51, r24	; 0x33
    5ee8:	08 c0       	rjmp	.+16     	; 0x5efa <AddUser+0x1b6>
		EEPROM_enuRead(&Num_Users,0,90);
		if(Num_Users<Max_Num_Users){

			if(Num_Users>0){
				u8 Problem=0;
				for (u8 Counter=0;Counter<Num_Users;Counter++){
    5eea:	8a a9       	ldd	r24, Y+50	; 0x32
    5eec:	8f 5f       	subi	r24, 0xFF	; 255
    5eee:	8a ab       	std	Y+50, r24	; 0x32
    5ef0:	9c a9       	ldd	r25, Y+52	; 0x34
    5ef2:	8a a9       	ldd	r24, Y+50	; 0x32
    5ef4:	89 17       	cp	r24, r25
    5ef6:	08 f4       	brcc	.+2      	; 0x5efa <AddUser+0x1b6>
    5ef8:	47 cf       	rjmp	.-370    	; 0x5d88 <AddUser+0x44>
							Problem++;
							break;

						}
						}
				if(!Problem){
    5efa:	8b a9       	ldd	r24, Y+51	; 0x33
    5efc:	88 23       	and	r24, r24
    5efe:	09 f0       	breq	.+2      	; 0x5f02 <AddUser+0x1be>
    5f00:	92 c1       	rjmp	.+804    	; 0x6226 <AddUser+0x4e2>
                      LCD_enuClearScreen();
    5f02:	0e 94 df 1c 	call	0x39be	; 0x39be <LCD_enuClearScreen>
                      LCD_enuWriteString("Successful Add");
    5f06:	80 ef       	ldi	r24, 0xF0	; 240
    5f08:	93 e0       	ldi	r25, 0x03	; 3
    5f0a:	0e 94 b9 1c 	call	0x3972	; 0x3972 <LCD_enuWriteString>
                      HC05_enuSendString("Successful Add\r\n");
    5f0e:	8f ef       	ldi	r24, 0xFF	; 255
    5f10:	93 e0       	ldi	r25, 0x03	; 3
    5f12:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
                      u8 Num_Digit=0;  u8 Address=0;
    5f16:	1e a6       	std	Y+46, r1	; 0x2e
    5f18:	1d a6       	std	Y+45, r1	; 0x2d
    5f1a:	1d c0       	rjmp	.+58     	; 0x5f56 <AddUser+0x212>
                      for(;Num_Digit<4;Num_Digit++){
                    	  Address=Num_Users*8+Num_Digit;
    5f1c:	8c a9       	ldd	r24, Y+52	; 0x34
    5f1e:	88 2f       	mov	r24, r24
    5f20:	90 e0       	ldi	r25, 0x00	; 0
    5f22:	88 0f       	add	r24, r24
    5f24:	99 1f       	adc	r25, r25
    5f26:	88 0f       	add	r24, r24
    5f28:	99 1f       	adc	r25, r25
    5f2a:	88 0f       	add	r24, r24
    5f2c:	99 1f       	adc	r25, r25
    5f2e:	98 2f       	mov	r25, r24
    5f30:	8e a5       	ldd	r24, Y+46	; 0x2e
    5f32:	89 0f       	add	r24, r25
    5f34:	8d a7       	std	Y+45, r24	; 0x2d
                    	  EEPROM_enuWrite(Copy_u8Id[Num_Digit],0,Address);
    5f36:	8e a5       	ldd	r24, Y+46	; 0x2e
    5f38:	28 2f       	mov	r18, r24
    5f3a:	30 e0       	ldi	r19, 0x00	; 0
    5f3c:	8e a9       	ldd	r24, Y+54	; 0x36
    5f3e:	9f a9       	ldd	r25, Y+55	; 0x37
    5f40:	fc 01       	movw	r30, r24
    5f42:	e2 0f       	add	r30, r18
    5f44:	f3 1f       	adc	r31, r19
    5f46:	80 81       	ld	r24, Z
    5f48:	60 e0       	ldi	r22, 0x00	; 0
    5f4a:	4d a5       	ldd	r20, Y+45	; 0x2d
    5f4c:	0e 94 db 20 	call	0x41b6	; 0x41b6 <EEPROM_enuWrite>
				if(!Problem){
                      LCD_enuClearScreen();
                      LCD_enuWriteString("Successful Add");
                      HC05_enuSendString("Successful Add\r\n");
                      u8 Num_Digit=0;  u8 Address=0;
                      for(;Num_Digit<4;Num_Digit++){
    5f50:	8e a5       	ldd	r24, Y+46	; 0x2e
    5f52:	8f 5f       	subi	r24, 0xFF	; 255
    5f54:	8e a7       	std	Y+46, r24	; 0x2e
    5f56:	8e a5       	ldd	r24, Y+46	; 0x2e
    5f58:	84 30       	cpi	r24, 0x04	; 4
    5f5a:	00 f3       	brcs	.-64     	; 0x5f1c <AddUser+0x1d8>
                    	  Address=Num_Users*8+Num_Digit;
                    	  EEPROM_enuWrite(Copy_u8Id[Num_Digit],0,Address);
                      }
                       Num_Digit=0;
    5f5c:	1e a6       	std	Y+46, r1	; 0x2e
    5f5e:	1e c0       	rjmp	.+60     	; 0x5f9c <AddUser+0x258>
                      for(;Num_Digit<4;Num_Digit++){
                    	  Address=Num_Users*8+4+Num_Digit;
    5f60:	8c a9       	ldd	r24, Y+52	; 0x34
    5f62:	88 2f       	mov	r24, r24
    5f64:	90 e0       	ldi	r25, 0x00	; 0
    5f66:	88 0f       	add	r24, r24
    5f68:	99 1f       	adc	r25, r25
    5f6a:	01 96       	adiw	r24, 0x01	; 1
    5f6c:	88 0f       	add	r24, r24
    5f6e:	99 1f       	adc	r25, r25
    5f70:	88 0f       	add	r24, r24
    5f72:	99 1f       	adc	r25, r25
    5f74:	98 2f       	mov	r25, r24
    5f76:	8e a5       	ldd	r24, Y+46	; 0x2e
    5f78:	89 0f       	add	r24, r25
    5f7a:	8d a7       	std	Y+45, r24	; 0x2d
                    	  EEPROM_enuWrite(Copy_u8Password[Num_Digit],0,Address);
    5f7c:	8e a5       	ldd	r24, Y+46	; 0x2e
    5f7e:	28 2f       	mov	r18, r24
    5f80:	30 e0       	ldi	r19, 0x00	; 0
    5f82:	88 ad       	ldd	r24, Y+56	; 0x38
    5f84:	99 ad       	ldd	r25, Y+57	; 0x39
    5f86:	fc 01       	movw	r30, r24
    5f88:	e2 0f       	add	r30, r18
    5f8a:	f3 1f       	adc	r31, r19
    5f8c:	80 81       	ld	r24, Z
    5f8e:	60 e0       	ldi	r22, 0x00	; 0
    5f90:	4d a5       	ldd	r20, Y+45	; 0x2d
    5f92:	0e 94 db 20 	call	0x41b6	; 0x41b6 <EEPROM_enuWrite>
                      for(;Num_Digit<4;Num_Digit++){
                    	  Address=Num_Users*8+Num_Digit;
                    	  EEPROM_enuWrite(Copy_u8Id[Num_Digit],0,Address);
                      }
                       Num_Digit=0;
                      for(;Num_Digit<4;Num_Digit++){
    5f96:	8e a5       	ldd	r24, Y+46	; 0x2e
    5f98:	8f 5f       	subi	r24, 0xFF	; 255
    5f9a:	8e a7       	std	Y+46, r24	; 0x2e
    5f9c:	8e a5       	ldd	r24, Y+46	; 0x2e
    5f9e:	84 30       	cpi	r24, 0x04	; 4
    5fa0:	f8 f2       	brcs	.-66     	; 0x5f60 <AddUser+0x21c>
                    	  Address=Num_Users*8+4+Num_Digit;
                    	  EEPROM_enuWrite(Copy_u8Password[Num_Digit],0,Address);
                      }
                      Num_Users++;
    5fa2:	8c a9       	ldd	r24, Y+52	; 0x34
    5fa4:	8f 5f       	subi	r24, 0xFF	; 255
    5fa6:	8c ab       	std	Y+52, r24	; 0x34
                      EEPROM_enuWrite(Num_Users,0,90);
    5fa8:	8c a9       	ldd	r24, Y+52	; 0x34
    5faa:	60 e0       	ldi	r22, 0x00	; 0
    5fac:	4a e5       	ldi	r20, 0x5A	; 90
    5fae:	0e 94 db 20 	call	0x41b6	; 0x41b6 <EEPROM_enuWrite>
    5fb2:	80 e0       	ldi	r24, 0x00	; 0
    5fb4:	90 e0       	ldi	r25, 0x00	; 0
    5fb6:	aa e7       	ldi	r26, 0x7A	; 122
    5fb8:	b4 e4       	ldi	r27, 0x44	; 68
    5fba:	89 8f       	std	Y+25, r24	; 0x19
    5fbc:	9a 8f       	std	Y+26, r25	; 0x1a
    5fbe:	ab 8f       	std	Y+27, r26	; 0x1b
    5fc0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5fc2:	69 8d       	ldd	r22, Y+25	; 0x19
    5fc4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5fc6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5fc8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5fca:	20 e0       	ldi	r18, 0x00	; 0
    5fcc:	30 e0       	ldi	r19, 0x00	; 0
    5fce:	4a e7       	ldi	r20, 0x7A	; 122
    5fd0:	55 e4       	ldi	r21, 0x45	; 69
    5fd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5fd6:	dc 01       	movw	r26, r24
    5fd8:	cb 01       	movw	r24, r22
    5fda:	8d 8b       	std	Y+21, r24	; 0x15
    5fdc:	9e 8b       	std	Y+22, r25	; 0x16
    5fde:	af 8b       	std	Y+23, r26	; 0x17
    5fe0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5fe2:	6d 89       	ldd	r22, Y+21	; 0x15
    5fe4:	7e 89       	ldd	r23, Y+22	; 0x16
    5fe6:	8f 89       	ldd	r24, Y+23	; 0x17
    5fe8:	98 8d       	ldd	r25, Y+24	; 0x18
    5fea:	20 e0       	ldi	r18, 0x00	; 0
    5fec:	30 e0       	ldi	r19, 0x00	; 0
    5fee:	40 e8       	ldi	r20, 0x80	; 128
    5ff0:	5f e3       	ldi	r21, 0x3F	; 63
    5ff2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5ff6:	88 23       	and	r24, r24
    5ff8:	2c f4       	brge	.+10     	; 0x6004 <AddUser+0x2c0>
		__ticks = 1;
    5ffa:	81 e0       	ldi	r24, 0x01	; 1
    5ffc:	90 e0       	ldi	r25, 0x00	; 0
    5ffe:	9c 8b       	std	Y+20, r25	; 0x14
    6000:	8b 8b       	std	Y+19, r24	; 0x13
    6002:	3f c0       	rjmp	.+126    	; 0x6082 <AddUser+0x33e>
	else if (__tmp > 65535)
    6004:	6d 89       	ldd	r22, Y+21	; 0x15
    6006:	7e 89       	ldd	r23, Y+22	; 0x16
    6008:	8f 89       	ldd	r24, Y+23	; 0x17
    600a:	98 8d       	ldd	r25, Y+24	; 0x18
    600c:	20 e0       	ldi	r18, 0x00	; 0
    600e:	3f ef       	ldi	r19, 0xFF	; 255
    6010:	4f e7       	ldi	r20, 0x7F	; 127
    6012:	57 e4       	ldi	r21, 0x47	; 71
    6014:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6018:	18 16       	cp	r1, r24
    601a:	4c f5       	brge	.+82     	; 0x606e <AddUser+0x32a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    601c:	69 8d       	ldd	r22, Y+25	; 0x19
    601e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6020:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6022:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6024:	20 e0       	ldi	r18, 0x00	; 0
    6026:	30 e0       	ldi	r19, 0x00	; 0
    6028:	40 e2       	ldi	r20, 0x20	; 32
    602a:	51 e4       	ldi	r21, 0x41	; 65
    602c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6030:	dc 01       	movw	r26, r24
    6032:	cb 01       	movw	r24, r22
    6034:	bc 01       	movw	r22, r24
    6036:	cd 01       	movw	r24, r26
    6038:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    603c:	dc 01       	movw	r26, r24
    603e:	cb 01       	movw	r24, r22
    6040:	9c 8b       	std	Y+20, r25	; 0x14
    6042:	8b 8b       	std	Y+19, r24	; 0x13
    6044:	0f c0       	rjmp	.+30     	; 0x6064 <AddUser+0x320>
    6046:	80 e9       	ldi	r24, 0x90	; 144
    6048:	91 e0       	ldi	r25, 0x01	; 1
    604a:	9a 8b       	std	Y+18, r25	; 0x12
    604c:	89 8b       	std	Y+17, r24	; 0x11
    604e:	89 89       	ldd	r24, Y+17	; 0x11
    6050:	9a 89       	ldd	r25, Y+18	; 0x12
    6052:	01 97       	sbiw	r24, 0x01	; 1
    6054:	f1 f7       	brne	.-4      	; 0x6052 <AddUser+0x30e>
    6056:	9a 8b       	std	Y+18, r25	; 0x12
    6058:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    605a:	8b 89       	ldd	r24, Y+19	; 0x13
    605c:	9c 89       	ldd	r25, Y+20	; 0x14
    605e:	01 97       	sbiw	r24, 0x01	; 1
    6060:	9c 8b       	std	Y+20, r25	; 0x14
    6062:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6064:	8b 89       	ldd	r24, Y+19	; 0x13
    6066:	9c 89       	ldd	r25, Y+20	; 0x14
    6068:	00 97       	sbiw	r24, 0x00	; 0
    606a:	69 f7       	brne	.-38     	; 0x6046 <AddUser+0x302>
    606c:	dc c0       	rjmp	.+440    	; 0x6226 <AddUser+0x4e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    606e:	6d 89       	ldd	r22, Y+21	; 0x15
    6070:	7e 89       	ldd	r23, Y+22	; 0x16
    6072:	8f 89       	ldd	r24, Y+23	; 0x17
    6074:	98 8d       	ldd	r25, Y+24	; 0x18
    6076:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    607a:	dc 01       	movw	r26, r24
    607c:	cb 01       	movw	r24, r22
    607e:	9c 8b       	std	Y+20, r25	; 0x14
    6080:	8b 8b       	std	Y+19, r24	; 0x13
    6082:	8b 89       	ldd	r24, Y+19	; 0x13
    6084:	9c 89       	ldd	r25, Y+20	; 0x14
    6086:	98 8b       	std	Y+16, r25	; 0x10
    6088:	8f 87       	std	Y+15, r24	; 0x0f
    608a:	8f 85       	ldd	r24, Y+15	; 0x0f
    608c:	98 89       	ldd	r25, Y+16	; 0x10
    608e:	01 97       	sbiw	r24, 0x01	; 1
    6090:	f1 f7       	brne	.-4      	; 0x608e <AddUser+0x34a>
    6092:	98 8b       	std	Y+16, r25	; 0x10
    6094:	8f 87       	std	Y+15, r24	; 0x0f
    6096:	c7 c0       	rjmp	.+398    	; 0x6226 <AddUser+0x4e2>

					}
				}

			else{
				LCD_enuClearScreen();
    6098:	0e 94 df 1c 	call	0x39be	; 0x39be <LCD_enuClearScreen>
				LCD_enuWriteString("Successful Add");
    609c:	80 ef       	ldi	r24, 0xF0	; 240
    609e:	93 e0       	ldi	r25, 0x03	; 3
    60a0:	0e 94 b9 1c 	call	0x3972	; 0x3972 <LCD_enuWriteString>
				HC05_enuSendString("Successful Add\r\n");
    60a4:	8f ef       	ldi	r24, 0xFF	; 255
    60a6:	93 e0       	ldi	r25, 0x03	; 3
    60a8:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
			//	u8 location=0;
				u8 Num_Digit=0; u8 Address=0;
    60ac:	1c a6       	std	Y+44, r1	; 0x2c
    60ae:	1b a6       	std	Y+43, r1	; 0x2b
    60b0:	12 c0       	rjmp	.+36     	; 0x60d6 <AddUser+0x392>
				for(;Num_Digit<4;Num_Digit++){
					Address=Num_Digit;
    60b2:	8c a5       	ldd	r24, Y+44	; 0x2c
    60b4:	8b a7       	std	Y+43, r24	; 0x2b
					EEPROM_enuWrite(Copy_u8Id[Num_Digit],0,Address);
    60b6:	8c a5       	ldd	r24, Y+44	; 0x2c
    60b8:	28 2f       	mov	r18, r24
    60ba:	30 e0       	ldi	r19, 0x00	; 0
    60bc:	8e a9       	ldd	r24, Y+54	; 0x36
    60be:	9f a9       	ldd	r25, Y+55	; 0x37
    60c0:	fc 01       	movw	r30, r24
    60c2:	e2 0f       	add	r30, r18
    60c4:	f3 1f       	adc	r31, r19
    60c6:	80 81       	ld	r24, Z
    60c8:	60 e0       	ldi	r22, 0x00	; 0
    60ca:	4b a5       	ldd	r20, Y+43	; 0x2b
    60cc:	0e 94 db 20 	call	0x41b6	; 0x41b6 <EEPROM_enuWrite>
				LCD_enuClearScreen();
				LCD_enuWriteString("Successful Add");
				HC05_enuSendString("Successful Add\r\n");
			//	u8 location=0;
				u8 Num_Digit=0; u8 Address=0;
				for(;Num_Digit<4;Num_Digit++){
    60d0:	8c a5       	ldd	r24, Y+44	; 0x2c
    60d2:	8f 5f       	subi	r24, 0xFF	; 255
    60d4:	8c a7       	std	Y+44, r24	; 0x2c
    60d6:	8c a5       	ldd	r24, Y+44	; 0x2c
    60d8:	84 30       	cpi	r24, 0x04	; 4
    60da:	58 f3       	brcs	.-42     	; 0x60b2 <AddUser+0x36e>
					Address=Num_Digit;
					EEPROM_enuWrite(Copy_u8Id[Num_Digit],0,Address);
				}
				 Num_Digit=0;
    60dc:	1c a6       	std	Y+44, r1	; 0x2c
    60de:	13 c0       	rjmp	.+38     	; 0x6106 <AddUser+0x3c2>
				for(;Num_Digit<4;Num_Digit++){
									Address=Num_Digit+4;
    60e0:	8c a5       	ldd	r24, Y+44	; 0x2c
    60e2:	8c 5f       	subi	r24, 0xFC	; 252
    60e4:	8b a7       	std	Y+43, r24	; 0x2b
									EEPROM_enuWrite(Copy_u8Password[Num_Digit],0,Address);
    60e6:	8c a5       	ldd	r24, Y+44	; 0x2c
    60e8:	28 2f       	mov	r18, r24
    60ea:	30 e0       	ldi	r19, 0x00	; 0
    60ec:	88 ad       	ldd	r24, Y+56	; 0x38
    60ee:	99 ad       	ldd	r25, Y+57	; 0x39
    60f0:	fc 01       	movw	r30, r24
    60f2:	e2 0f       	add	r30, r18
    60f4:	f3 1f       	adc	r31, r19
    60f6:	80 81       	ld	r24, Z
    60f8:	60 e0       	ldi	r22, 0x00	; 0
    60fa:	4b a5       	ldd	r20, Y+43	; 0x2b
    60fc:	0e 94 db 20 	call	0x41b6	; 0x41b6 <EEPROM_enuWrite>
				for(;Num_Digit<4;Num_Digit++){
					Address=Num_Digit;
					EEPROM_enuWrite(Copy_u8Id[Num_Digit],0,Address);
				}
				 Num_Digit=0;
				for(;Num_Digit<4;Num_Digit++){
    6100:	8c a5       	ldd	r24, Y+44	; 0x2c
    6102:	8f 5f       	subi	r24, 0xFF	; 255
    6104:	8c a7       	std	Y+44, r24	; 0x2c
    6106:	8c a5       	ldd	r24, Y+44	; 0x2c
    6108:	84 30       	cpi	r24, 0x04	; 4
    610a:	50 f3       	brcs	.-44     	; 0x60e0 <AddUser+0x39c>
									Address=Num_Digit+4;
									EEPROM_enuWrite(Copy_u8Password[Num_Digit],0,Address);
				}
				Num_Users++;
    610c:	8c a9       	ldd	r24, Y+52	; 0x34
    610e:	8f 5f       	subi	r24, 0xFF	; 255
    6110:	8c ab       	std	Y+52, r24	; 0x34
				EEPROM_enuWrite(Num_Users,0,90);
    6112:	8c a9       	ldd	r24, Y+52	; 0x34
    6114:	60 e0       	ldi	r22, 0x00	; 0
    6116:	4a e5       	ldi	r20, 0x5A	; 90
    6118:	0e 94 db 20 	call	0x41b6	; 0x41b6 <EEPROM_enuWrite>
    611c:	84 c0       	rjmp	.+264    	; 0x6226 <AddUser+0x4e2>
			//	_delay_ms(300);
			}
		}
		else{
			LCD_enuClearScreen();
    611e:	0e 94 df 1c 	call	0x39be	; 0x39be <LCD_enuClearScreen>
			LCD_enuWriteString("System Exceed");
    6122:	80 e1       	ldi	r24, 0x10	; 16
    6124:	94 e0       	ldi	r25, 0x04	; 4
    6126:	0e 94 b9 1c 	call	0x3972	; 0x3972 <LCD_enuWriteString>
			LCD_enuGoToPosition(1,0);
    612a:	81 e0       	ldi	r24, 0x01	; 1
    612c:	60 e0       	ldi	r22, 0x00	; 0
    612e:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <LCD_enuGoToPosition>
			LCD_enuWriteString("max Num of Users");
    6132:	8e e1       	ldi	r24, 0x1E	; 30
    6134:	94 e0       	ldi	r25, 0x04	; 4
    6136:	0e 94 b9 1c 	call	0x3972	; 0x3972 <LCD_enuWriteString>
			HC05_enuSendString("System Exceed Max Number of Users\r\n");
    613a:	8f e2       	ldi	r24, 0x2F	; 47
    613c:	94 e0       	ldi	r25, 0x04	; 4
    613e:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
    6142:	80 e0       	ldi	r24, 0x00	; 0
    6144:	90 e0       	ldi	r25, 0x00	; 0
    6146:	a6 e9       	ldi	r26, 0x96	; 150
    6148:	b3 e4       	ldi	r27, 0x43	; 67
    614a:	8b 87       	std	Y+11, r24	; 0x0b
    614c:	9c 87       	std	Y+12, r25	; 0x0c
    614e:	ad 87       	std	Y+13, r26	; 0x0d
    6150:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6152:	6b 85       	ldd	r22, Y+11	; 0x0b
    6154:	7c 85       	ldd	r23, Y+12	; 0x0c
    6156:	8d 85       	ldd	r24, Y+13	; 0x0d
    6158:	9e 85       	ldd	r25, Y+14	; 0x0e
    615a:	20 e0       	ldi	r18, 0x00	; 0
    615c:	30 e0       	ldi	r19, 0x00	; 0
    615e:	4a e7       	ldi	r20, 0x7A	; 122
    6160:	55 e4       	ldi	r21, 0x45	; 69
    6162:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6166:	dc 01       	movw	r26, r24
    6168:	cb 01       	movw	r24, r22
    616a:	8f 83       	std	Y+7, r24	; 0x07
    616c:	98 87       	std	Y+8, r25	; 0x08
    616e:	a9 87       	std	Y+9, r26	; 0x09
    6170:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6172:	6f 81       	ldd	r22, Y+7	; 0x07
    6174:	78 85       	ldd	r23, Y+8	; 0x08
    6176:	89 85       	ldd	r24, Y+9	; 0x09
    6178:	9a 85       	ldd	r25, Y+10	; 0x0a
    617a:	20 e0       	ldi	r18, 0x00	; 0
    617c:	30 e0       	ldi	r19, 0x00	; 0
    617e:	40 e8       	ldi	r20, 0x80	; 128
    6180:	5f e3       	ldi	r21, 0x3F	; 63
    6182:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6186:	88 23       	and	r24, r24
    6188:	2c f4       	brge	.+10     	; 0x6194 <AddUser+0x450>
		__ticks = 1;
    618a:	81 e0       	ldi	r24, 0x01	; 1
    618c:	90 e0       	ldi	r25, 0x00	; 0
    618e:	9e 83       	std	Y+6, r25	; 0x06
    6190:	8d 83       	std	Y+5, r24	; 0x05
    6192:	3f c0       	rjmp	.+126    	; 0x6212 <AddUser+0x4ce>
	else if (__tmp > 65535)
    6194:	6f 81       	ldd	r22, Y+7	; 0x07
    6196:	78 85       	ldd	r23, Y+8	; 0x08
    6198:	89 85       	ldd	r24, Y+9	; 0x09
    619a:	9a 85       	ldd	r25, Y+10	; 0x0a
    619c:	20 e0       	ldi	r18, 0x00	; 0
    619e:	3f ef       	ldi	r19, 0xFF	; 255
    61a0:	4f e7       	ldi	r20, 0x7F	; 127
    61a2:	57 e4       	ldi	r21, 0x47	; 71
    61a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    61a8:	18 16       	cp	r1, r24
    61aa:	4c f5       	brge	.+82     	; 0x61fe <AddUser+0x4ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    61ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    61ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    61b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    61b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    61b4:	20 e0       	ldi	r18, 0x00	; 0
    61b6:	30 e0       	ldi	r19, 0x00	; 0
    61b8:	40 e2       	ldi	r20, 0x20	; 32
    61ba:	51 e4       	ldi	r21, 0x41	; 65
    61bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    61c0:	dc 01       	movw	r26, r24
    61c2:	cb 01       	movw	r24, r22
    61c4:	bc 01       	movw	r22, r24
    61c6:	cd 01       	movw	r24, r26
    61c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    61cc:	dc 01       	movw	r26, r24
    61ce:	cb 01       	movw	r24, r22
    61d0:	9e 83       	std	Y+6, r25	; 0x06
    61d2:	8d 83       	std	Y+5, r24	; 0x05
    61d4:	0f c0       	rjmp	.+30     	; 0x61f4 <AddUser+0x4b0>
    61d6:	80 e9       	ldi	r24, 0x90	; 144
    61d8:	91 e0       	ldi	r25, 0x01	; 1
    61da:	9c 83       	std	Y+4, r25	; 0x04
    61dc:	8b 83       	std	Y+3, r24	; 0x03
    61de:	8b 81       	ldd	r24, Y+3	; 0x03
    61e0:	9c 81       	ldd	r25, Y+4	; 0x04
    61e2:	01 97       	sbiw	r24, 0x01	; 1
    61e4:	f1 f7       	brne	.-4      	; 0x61e2 <AddUser+0x49e>
    61e6:	9c 83       	std	Y+4, r25	; 0x04
    61e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    61ea:	8d 81       	ldd	r24, Y+5	; 0x05
    61ec:	9e 81       	ldd	r25, Y+6	; 0x06
    61ee:	01 97       	sbiw	r24, 0x01	; 1
    61f0:	9e 83       	std	Y+6, r25	; 0x06
    61f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    61f4:	8d 81       	ldd	r24, Y+5	; 0x05
    61f6:	9e 81       	ldd	r25, Y+6	; 0x06
    61f8:	00 97       	sbiw	r24, 0x00	; 0
    61fa:	69 f7       	brne	.-38     	; 0x61d6 <AddUser+0x492>
    61fc:	14 c0       	rjmp	.+40     	; 0x6226 <AddUser+0x4e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    61fe:	6f 81       	ldd	r22, Y+7	; 0x07
    6200:	78 85       	ldd	r23, Y+8	; 0x08
    6202:	89 85       	ldd	r24, Y+9	; 0x09
    6204:	9a 85       	ldd	r25, Y+10	; 0x0a
    6206:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    620a:	dc 01       	movw	r26, r24
    620c:	cb 01       	movw	r24, r22
    620e:	9e 83       	std	Y+6, r25	; 0x06
    6210:	8d 83       	std	Y+5, r24	; 0x05
    6212:	8d 81       	ldd	r24, Y+5	; 0x05
    6214:	9e 81       	ldd	r25, Y+6	; 0x06
    6216:	9a 83       	std	Y+2, r25	; 0x02
    6218:	89 83       	std	Y+1, r24	; 0x01
    621a:	89 81       	ldd	r24, Y+1	; 0x01
    621c:	9a 81       	ldd	r25, Y+2	; 0x02
    621e:	01 97       	sbiw	r24, 0x01	; 1
    6220:	f1 f7       	brne	.-4      	; 0x621e <AddUser+0x4da>
    6222:	9a 83       	std	Y+2, r25	; 0x02
    6224:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(300);
		}
	}
    6226:	e9 96       	adiw	r28, 0x39	; 57
    6228:	0f b6       	in	r0, 0x3f	; 63
    622a:	f8 94       	cli
    622c:	de bf       	out	0x3e, r29	; 62
    622e:	0f be       	out	0x3f, r0	; 63
    6230:	cd bf       	out	0x3d, r28	; 61
    6232:	cf 91       	pop	r28
    6234:	df 91       	pop	r29
    6236:	08 95       	ret

00006238 <CheckUser>:
	void CheckUser ( u8* Copy_u8Id, u8* Copy_u8Password,u8 *Copy_u8UserState){
    6238:	df 93       	push	r29
    623a:	cf 93       	push	r28
    623c:	cd b7       	in	r28, 0x3d	; 61
    623e:	de b7       	in	r29, 0x3e	; 62
    6240:	e8 97       	sbiw	r28, 0x38	; 56
    6242:	0f b6       	in	r0, 0x3f	; 63
    6244:	f8 94       	cli
    6246:	de bf       	out	0x3e, r29	; 62
    6248:	0f be       	out	0x3f, r0	; 63
    624a:	cd bf       	out	0x3d, r28	; 61
    624c:	9c ab       	std	Y+52, r25	; 0x34
    624e:	8b ab       	std	Y+51, r24	; 0x33
    6250:	7e ab       	std	Y+54, r23	; 0x36
    6252:	6d ab       	std	Y+53, r22	; 0x35
    6254:	58 af       	std	Y+56, r21	; 0x38
    6256:	4f ab       	std	Y+55, r20	; 0x37
		u8 Num_Users=0;
    6258:	19 aa       	std	Y+49, r1	; 0x31
		EEPROM_enuRead(&Num_Users,0,90);
    625a:	ce 01       	movw	r24, r28
    625c:	c1 96       	adiw	r24, 0x31	; 49
    625e:	60 e0       	ldi	r22, 0x00	; 0
    6260:	4a e5       	ldi	r20, 0x5A	; 90
    6262:	0e 94 01 21 	call	0x4202	; 0x4202 <EEPROM_enuRead>
		u8 Location =0; u8 Counter=0; u8 Data=0;
    6266:	18 aa       	std	Y+48, r1	; 0x30
    6268:	1f a6       	std	Y+47, r1	; 0x2f
    626a:	1a aa       	std	Y+50, r1	; 0x32
		 u8 Exist_UserName=0; u8 EXist_Password=0;
    626c:	1e a6       	std	Y+46, r1	; 0x2e
    626e:	1d a6       	std	Y+45, r1	; 0x2d
		u8 Address=0;
    6270:	1c a6       	std	Y+44, r1	; 0x2c
		if(Num_Users>0){
    6272:	89 a9       	ldd	r24, Y+49	; 0x31
    6274:	88 23       	and	r24, r24
    6276:	09 f4       	brne	.+2      	; 0x627a <CheckUser+0x42>
    6278:	71 c1       	rjmp	.+738    	; 0x655c <CheckUser+0x324>
    627a:	5a c0       	rjmp	.+180    	; 0x6330 <CheckUser+0xf8>

			for(;Counter<Num_Users;Counter++){
				  Exist_UserName=0;  EXist_Password=0;
    627c:	1e a6       	std	Y+46, r1	; 0x2e
    627e:	1d a6       	std	Y+45, r1	; 0x2d
				 Location=Counter*8;
    6280:	8f a5       	ldd	r24, Y+47	; 0x2f
    6282:	88 2f       	mov	r24, r24
    6284:	90 e0       	ldi	r25, 0x00	; 0
    6286:	88 0f       	add	r24, r24
    6288:	99 1f       	adc	r25, r25
    628a:	88 0f       	add	r24, r24
    628c:	99 1f       	adc	r25, r25
    628e:	88 0f       	add	r24, r24
    6290:	99 1f       	adc	r25, r25
    6292:	88 ab       	std	Y+48, r24	; 0x30
				 u8 Num_Digit=0;
    6294:	1b a6       	std	Y+43, r1	; 0x2b
    6296:	1c c0       	rjmp	.+56     	; 0x62d0 <CheckUser+0x98>
				 for(;Num_Digit<4;Num_Digit++){
					Address=Location+Num_Digit;
    6298:	98 a9       	ldd	r25, Y+48	; 0x30
    629a:	8b a5       	ldd	r24, Y+43	; 0x2b
    629c:	89 0f       	add	r24, r25
    629e:	8c a7       	std	Y+44, r24	; 0x2c
					EEPROM_enuRead(&Data,0,Address);
    62a0:	ce 01       	movw	r24, r28
    62a2:	c2 96       	adiw	r24, 0x32	; 50
    62a4:	60 e0       	ldi	r22, 0x00	; 0
    62a6:	4c a5       	ldd	r20, Y+44	; 0x2c
    62a8:	0e 94 01 21 	call	0x4202	; 0x4202 <EEPROM_enuRead>
					if(Data==Copy_u8Id[Num_Digit]){
    62ac:	8b a5       	ldd	r24, Y+43	; 0x2b
    62ae:	28 2f       	mov	r18, r24
    62b0:	30 e0       	ldi	r19, 0x00	; 0
    62b2:	8b a9       	ldd	r24, Y+51	; 0x33
    62b4:	9c a9       	ldd	r25, Y+52	; 0x34
    62b6:	fc 01       	movw	r30, r24
    62b8:	e2 0f       	add	r30, r18
    62ba:	f3 1f       	adc	r31, r19
    62bc:	90 81       	ld	r25, Z
    62be:	8a a9       	ldd	r24, Y+50	; 0x32
    62c0:	98 17       	cp	r25, r24
    62c2:	19 f4       	brne	.+6      	; 0x62ca <CheckUser+0x92>
						Exist_UserName++;
    62c4:	8e a5       	ldd	r24, Y+46	; 0x2e
    62c6:	8f 5f       	subi	r24, 0xFF	; 255
    62c8:	8e a7       	std	Y+46, r24	; 0x2e

			for(;Counter<Num_Users;Counter++){
				  Exist_UserName=0;  EXist_Password=0;
				 Location=Counter*8;
				 u8 Num_Digit=0;
				 for(;Num_Digit<4;Num_Digit++){
    62ca:	8b a5       	ldd	r24, Y+43	; 0x2b
    62cc:	8f 5f       	subi	r24, 0xFF	; 255
    62ce:	8b a7       	std	Y+43, r24	; 0x2b
    62d0:	8b a5       	ldd	r24, Y+43	; 0x2b
    62d2:	84 30       	cpi	r24, 0x04	; 4
    62d4:	08 f3       	brcs	.-62     	; 0x6298 <CheckUser+0x60>
					EEPROM_enuRead(&Data,0,Address);
					if(Data==Copy_u8Id[Num_Digit]){
						Exist_UserName++;
					}
				 }
				 Num_Digit=0;
    62d6:	1b a6       	std	Y+43, r1	; 0x2b
    62d8:	1d c0       	rjmp	.+58     	; 0x6314 <CheckUser+0xdc>
				 for(;Num_Digit<4;Num_Digit++){
									Address=Location+Num_Digit+4;
    62da:	98 a9       	ldd	r25, Y+48	; 0x30
    62dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    62de:	89 0f       	add	r24, r25
    62e0:	8c 5f       	subi	r24, 0xFC	; 252
    62e2:	8c a7       	std	Y+44, r24	; 0x2c
									EEPROM_enuRead(&Data,0,Address);
    62e4:	ce 01       	movw	r24, r28
    62e6:	c2 96       	adiw	r24, 0x32	; 50
    62e8:	60 e0       	ldi	r22, 0x00	; 0
    62ea:	4c a5       	ldd	r20, Y+44	; 0x2c
    62ec:	0e 94 01 21 	call	0x4202	; 0x4202 <EEPROM_enuRead>
									if(Data==Copy_u8Password[Num_Digit]){
    62f0:	8b a5       	ldd	r24, Y+43	; 0x2b
    62f2:	28 2f       	mov	r18, r24
    62f4:	30 e0       	ldi	r19, 0x00	; 0
    62f6:	8d a9       	ldd	r24, Y+53	; 0x35
    62f8:	9e a9       	ldd	r25, Y+54	; 0x36
    62fa:	fc 01       	movw	r30, r24
    62fc:	e2 0f       	add	r30, r18
    62fe:	f3 1f       	adc	r31, r19
    6300:	90 81       	ld	r25, Z
    6302:	8a a9       	ldd	r24, Y+50	; 0x32
    6304:	98 17       	cp	r25, r24
    6306:	19 f4       	brne	.+6      	; 0x630e <CheckUser+0xd6>
										EXist_Password++;
    6308:	8d a5       	ldd	r24, Y+45	; 0x2d
    630a:	8f 5f       	subi	r24, 0xFF	; 255
    630c:	8d a7       	std	Y+45, r24	; 0x2d
					if(Data==Copy_u8Id[Num_Digit]){
						Exist_UserName++;
					}
				 }
				 Num_Digit=0;
				 for(;Num_Digit<4;Num_Digit++){
    630e:	8b a5       	ldd	r24, Y+43	; 0x2b
    6310:	8f 5f       	subi	r24, 0xFF	; 255
    6312:	8b a7       	std	Y+43, r24	; 0x2b
    6314:	8b a5       	ldd	r24, Y+43	; 0x2b
    6316:	84 30       	cpi	r24, 0x04	; 4
    6318:	00 f3       	brcs	.-64     	; 0x62da <CheckUser+0xa2>
									EEPROM_enuRead(&Data,0,Address);
									if(Data==Copy_u8Password[Num_Digit]){
										EXist_Password++;
									}
				                  }
				 if(Exist_UserName==4&&EXist_Password==4){
    631a:	8e a5       	ldd	r24, Y+46	; 0x2e
    631c:	84 30       	cpi	r24, 0x04	; 4
    631e:	19 f4       	brne	.+6      	; 0x6326 <CheckUser+0xee>
    6320:	8d a5       	ldd	r24, Y+45	; 0x2d
    6322:	84 30       	cpi	r24, 0x04	; 4
    6324:	51 f0       	breq	.+20     	; 0x633a <CheckUser+0x102>
					 break;
				 }
				 else{
					 Exist_UserName=0;
    6326:	1e a6       	std	Y+46, r1	; 0x2e
					 EXist_Password=0;
    6328:	1d a6       	std	Y+45, r1	; 0x2d
		u8 Location =0; u8 Counter=0; u8 Data=0;
		 u8 Exist_UserName=0; u8 EXist_Password=0;
		u8 Address=0;
		if(Num_Users>0){

			for(;Counter<Num_Users;Counter++){
    632a:	8f a5       	ldd	r24, Y+47	; 0x2f
    632c:	8f 5f       	subi	r24, 0xFF	; 255
    632e:	8f a7       	std	Y+47, r24	; 0x2f
    6330:	99 a9       	ldd	r25, Y+49	; 0x31
    6332:	8f a5       	ldd	r24, Y+47	; 0x2f
    6334:	89 17       	cp	r24, r25
    6336:	08 f4       	brcc	.+2      	; 0x633a <CheckUser+0x102>
    6338:	a1 cf       	rjmp	.-190    	; 0x627c <CheckUser+0x44>
					 Exist_UserName=0;
					 EXist_Password=0;
				 }

		}
			 if(Exist_UserName==4&&EXist_Password==4){
    633a:	8e a5       	ldd	r24, Y+46	; 0x2e
    633c:	84 30       	cpi	r24, 0x04	; 4
    633e:	09 f0       	breq	.+2      	; 0x6342 <CheckUser+0x10a>
    6340:	85 c0       	rjmp	.+266    	; 0x644c <CheckUser+0x214>
    6342:	8d a5       	ldd	r24, Y+45	; 0x2d
    6344:	84 30       	cpi	r24, 0x04	; 4
    6346:	09 f0       	breq	.+2      	; 0x634a <CheckUser+0x112>
    6348:	81 c0       	rjmp	.+258    	; 0x644c <CheckUser+0x214>
								 LCD_enuClearScreen();
    634a:	0e 94 df 1c 	call	0x39be	; 0x39be <LCD_enuClearScreen>
								 LCD_enuWriteString("successful Login");
    634e:	83 e5       	ldi	r24, 0x53	; 83
    6350:	94 e0       	ldi	r25, 0x04	; 4
    6352:	0e 94 b9 1c 	call	0x3972	; 0x3972 <LCD_enuWriteString>
								 HC05_enuSendString("successful Login\r\n");
    6356:	84 e6       	ldi	r24, 0x64	; 100
    6358:	94 e0       	ldi	r25, 0x04	; 4
    635a:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
								 *Copy_u8UserState=1;
    635e:	ef a9       	ldd	r30, Y+55	; 0x37
    6360:	f8 ad       	ldd	r31, Y+56	; 0x38
    6362:	81 e0       	ldi	r24, 0x01	; 1
    6364:	80 83       	st	Z, r24
    6366:	80 e0       	ldi	r24, 0x00	; 0
    6368:	90 e0       	ldi	r25, 0x00	; 0
    636a:	aa e7       	ldi	r26, 0x7A	; 122
    636c:	b4 e4       	ldi	r27, 0x44	; 68
    636e:	8f a3       	std	Y+39, r24	; 0x27
    6370:	98 a7       	std	Y+40, r25	; 0x28
    6372:	a9 a7       	std	Y+41, r26	; 0x29
    6374:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6376:	6f a1       	ldd	r22, Y+39	; 0x27
    6378:	78 a5       	ldd	r23, Y+40	; 0x28
    637a:	89 a5       	ldd	r24, Y+41	; 0x29
    637c:	9a a5       	ldd	r25, Y+42	; 0x2a
    637e:	20 e0       	ldi	r18, 0x00	; 0
    6380:	30 e0       	ldi	r19, 0x00	; 0
    6382:	4a e7       	ldi	r20, 0x7A	; 122
    6384:	55 e4       	ldi	r21, 0x45	; 69
    6386:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    638a:	dc 01       	movw	r26, r24
    638c:	cb 01       	movw	r24, r22
    638e:	8b a3       	std	Y+35, r24	; 0x23
    6390:	9c a3       	std	Y+36, r25	; 0x24
    6392:	ad a3       	std	Y+37, r26	; 0x25
    6394:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    6396:	6b a1       	ldd	r22, Y+35	; 0x23
    6398:	7c a1       	ldd	r23, Y+36	; 0x24
    639a:	8d a1       	ldd	r24, Y+37	; 0x25
    639c:	9e a1       	ldd	r25, Y+38	; 0x26
    639e:	20 e0       	ldi	r18, 0x00	; 0
    63a0:	30 e0       	ldi	r19, 0x00	; 0
    63a2:	40 e8       	ldi	r20, 0x80	; 128
    63a4:	5f e3       	ldi	r21, 0x3F	; 63
    63a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    63aa:	88 23       	and	r24, r24
    63ac:	2c f4       	brge	.+10     	; 0x63b8 <CheckUser+0x180>
		__ticks = 1;
    63ae:	81 e0       	ldi	r24, 0x01	; 1
    63b0:	90 e0       	ldi	r25, 0x00	; 0
    63b2:	9a a3       	std	Y+34, r25	; 0x22
    63b4:	89 a3       	std	Y+33, r24	; 0x21
    63b6:	3f c0       	rjmp	.+126    	; 0x6436 <CheckUser+0x1fe>
	else if (__tmp > 65535)
    63b8:	6b a1       	ldd	r22, Y+35	; 0x23
    63ba:	7c a1       	ldd	r23, Y+36	; 0x24
    63bc:	8d a1       	ldd	r24, Y+37	; 0x25
    63be:	9e a1       	ldd	r25, Y+38	; 0x26
    63c0:	20 e0       	ldi	r18, 0x00	; 0
    63c2:	3f ef       	ldi	r19, 0xFF	; 255
    63c4:	4f e7       	ldi	r20, 0x7F	; 127
    63c6:	57 e4       	ldi	r21, 0x47	; 71
    63c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    63cc:	18 16       	cp	r1, r24
    63ce:	4c f5       	brge	.+82     	; 0x6422 <CheckUser+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    63d0:	6f a1       	ldd	r22, Y+39	; 0x27
    63d2:	78 a5       	ldd	r23, Y+40	; 0x28
    63d4:	89 a5       	ldd	r24, Y+41	; 0x29
    63d6:	9a a5       	ldd	r25, Y+42	; 0x2a
    63d8:	20 e0       	ldi	r18, 0x00	; 0
    63da:	30 e0       	ldi	r19, 0x00	; 0
    63dc:	40 e2       	ldi	r20, 0x20	; 32
    63de:	51 e4       	ldi	r21, 0x41	; 65
    63e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    63e4:	dc 01       	movw	r26, r24
    63e6:	cb 01       	movw	r24, r22
    63e8:	bc 01       	movw	r22, r24
    63ea:	cd 01       	movw	r24, r26
    63ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    63f0:	dc 01       	movw	r26, r24
    63f2:	cb 01       	movw	r24, r22
    63f4:	9a a3       	std	Y+34, r25	; 0x22
    63f6:	89 a3       	std	Y+33, r24	; 0x21
    63f8:	0f c0       	rjmp	.+30     	; 0x6418 <CheckUser+0x1e0>
    63fa:	80 e9       	ldi	r24, 0x90	; 144
    63fc:	91 e0       	ldi	r25, 0x01	; 1
    63fe:	98 a3       	std	Y+32, r25	; 0x20
    6400:	8f 8f       	std	Y+31, r24	; 0x1f
    6402:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6404:	98 a1       	ldd	r25, Y+32	; 0x20
    6406:	01 97       	sbiw	r24, 0x01	; 1
    6408:	f1 f7       	brne	.-4      	; 0x6406 <CheckUser+0x1ce>
    640a:	98 a3       	std	Y+32, r25	; 0x20
    640c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    640e:	89 a1       	ldd	r24, Y+33	; 0x21
    6410:	9a a1       	ldd	r25, Y+34	; 0x22
    6412:	01 97       	sbiw	r24, 0x01	; 1
    6414:	9a a3       	std	Y+34, r25	; 0x22
    6416:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6418:	89 a1       	ldd	r24, Y+33	; 0x21
    641a:	9a a1       	ldd	r25, Y+34	; 0x22
    641c:	00 97       	sbiw	r24, 0x00	; 0
    641e:	69 f7       	brne	.-38     	; 0x63fa <CheckUser+0x1c2>
    6420:	1c c1       	rjmp	.+568    	; 0x665a <CheckUser+0x422>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6422:	6b a1       	ldd	r22, Y+35	; 0x23
    6424:	7c a1       	ldd	r23, Y+36	; 0x24
    6426:	8d a1       	ldd	r24, Y+37	; 0x25
    6428:	9e a1       	ldd	r25, Y+38	; 0x26
    642a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    642e:	dc 01       	movw	r26, r24
    6430:	cb 01       	movw	r24, r22
    6432:	9a a3       	std	Y+34, r25	; 0x22
    6434:	89 a3       	std	Y+33, r24	; 0x21
    6436:	89 a1       	ldd	r24, Y+33	; 0x21
    6438:	9a a1       	ldd	r25, Y+34	; 0x22
    643a:	9e 8f       	std	Y+30, r25	; 0x1e
    643c:	8d 8f       	std	Y+29, r24	; 0x1d
    643e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6440:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6442:	01 97       	sbiw	r24, 0x01	; 1
    6444:	f1 f7       	brne	.-4      	; 0x6442 <CheckUser+0x20a>
    6446:	9e 8f       	std	Y+30, r25	; 0x1e
    6448:	8d 8f       	std	Y+29, r24	; 0x1d
    644a:	07 c1       	rjmp	.+526    	; 0x665a <CheckUser+0x422>
								 _delay_ms(1000);
							 }
			 else{
				 LCD_enuClearScreen();
    644c:	0e 94 df 1c 	call	0x39be	; 0x39be <LCD_enuClearScreen>
				 LCD_enuWriteString("Invalid UserName");
    6450:	8a e7       	ldi	r24, 0x7A	; 122
    6452:	93 e0       	ldi	r25, 0x03	; 3
    6454:	0e 94 b9 1c 	call	0x3972	; 0x3972 <LCD_enuWriteString>
				 LCD_enuGoToPosition(1,0);
    6458:	81 e0       	ldi	r24, 0x01	; 1
    645a:	60 e0       	ldi	r22, 0x00	; 0
    645c:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <LCD_enuGoToPosition>
				 LCD_enuWriteString("or Password");
    6460:	87 e7       	ldi	r24, 0x77	; 119
    6462:	94 e0       	ldi	r25, 0x04	; 4
    6464:	0e 94 b9 1c 	call	0x3972	; 0x3972 <LCD_enuWriteString>
				 HC05_enuSendString("Invalid UserName Or Password\r\n");
    6468:	83 e8       	ldi	r24, 0x83	; 131
    646a:	94 e0       	ldi	r25, 0x04	; 4
    646c:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
				 *Copy_u8UserState=0;
    6470:	ef a9       	ldd	r30, Y+55	; 0x37
    6472:	f8 ad       	ldd	r31, Y+56	; 0x38
    6474:	10 82       	st	Z, r1
    6476:	80 e0       	ldi	r24, 0x00	; 0
    6478:	90 e0       	ldi	r25, 0x00	; 0
    647a:	aa e7       	ldi	r26, 0x7A	; 122
    647c:	b4 e4       	ldi	r27, 0x44	; 68
    647e:	89 8f       	std	Y+25, r24	; 0x19
    6480:	9a 8f       	std	Y+26, r25	; 0x1a
    6482:	ab 8f       	std	Y+27, r26	; 0x1b
    6484:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6486:	69 8d       	ldd	r22, Y+25	; 0x19
    6488:	7a 8d       	ldd	r23, Y+26	; 0x1a
    648a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    648c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    648e:	20 e0       	ldi	r18, 0x00	; 0
    6490:	30 e0       	ldi	r19, 0x00	; 0
    6492:	4a e7       	ldi	r20, 0x7A	; 122
    6494:	55 e4       	ldi	r21, 0x45	; 69
    6496:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    649a:	dc 01       	movw	r26, r24
    649c:	cb 01       	movw	r24, r22
    649e:	8d 8b       	std	Y+21, r24	; 0x15
    64a0:	9e 8b       	std	Y+22, r25	; 0x16
    64a2:	af 8b       	std	Y+23, r26	; 0x17
    64a4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    64a6:	6d 89       	ldd	r22, Y+21	; 0x15
    64a8:	7e 89       	ldd	r23, Y+22	; 0x16
    64aa:	8f 89       	ldd	r24, Y+23	; 0x17
    64ac:	98 8d       	ldd	r25, Y+24	; 0x18
    64ae:	20 e0       	ldi	r18, 0x00	; 0
    64b0:	30 e0       	ldi	r19, 0x00	; 0
    64b2:	40 e8       	ldi	r20, 0x80	; 128
    64b4:	5f e3       	ldi	r21, 0x3F	; 63
    64b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    64ba:	88 23       	and	r24, r24
    64bc:	2c f4       	brge	.+10     	; 0x64c8 <CheckUser+0x290>
		__ticks = 1;
    64be:	81 e0       	ldi	r24, 0x01	; 1
    64c0:	90 e0       	ldi	r25, 0x00	; 0
    64c2:	9c 8b       	std	Y+20, r25	; 0x14
    64c4:	8b 8b       	std	Y+19, r24	; 0x13
    64c6:	3f c0       	rjmp	.+126    	; 0x6546 <CheckUser+0x30e>
	else if (__tmp > 65535)
    64c8:	6d 89       	ldd	r22, Y+21	; 0x15
    64ca:	7e 89       	ldd	r23, Y+22	; 0x16
    64cc:	8f 89       	ldd	r24, Y+23	; 0x17
    64ce:	98 8d       	ldd	r25, Y+24	; 0x18
    64d0:	20 e0       	ldi	r18, 0x00	; 0
    64d2:	3f ef       	ldi	r19, 0xFF	; 255
    64d4:	4f e7       	ldi	r20, 0x7F	; 127
    64d6:	57 e4       	ldi	r21, 0x47	; 71
    64d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    64dc:	18 16       	cp	r1, r24
    64de:	4c f5       	brge	.+82     	; 0x6532 <CheckUser+0x2fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    64e0:	69 8d       	ldd	r22, Y+25	; 0x19
    64e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    64e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    64e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    64e8:	20 e0       	ldi	r18, 0x00	; 0
    64ea:	30 e0       	ldi	r19, 0x00	; 0
    64ec:	40 e2       	ldi	r20, 0x20	; 32
    64ee:	51 e4       	ldi	r21, 0x41	; 65
    64f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    64f4:	dc 01       	movw	r26, r24
    64f6:	cb 01       	movw	r24, r22
    64f8:	bc 01       	movw	r22, r24
    64fa:	cd 01       	movw	r24, r26
    64fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6500:	dc 01       	movw	r26, r24
    6502:	cb 01       	movw	r24, r22
    6504:	9c 8b       	std	Y+20, r25	; 0x14
    6506:	8b 8b       	std	Y+19, r24	; 0x13
    6508:	0f c0       	rjmp	.+30     	; 0x6528 <CheckUser+0x2f0>
    650a:	80 e9       	ldi	r24, 0x90	; 144
    650c:	91 e0       	ldi	r25, 0x01	; 1
    650e:	9a 8b       	std	Y+18, r25	; 0x12
    6510:	89 8b       	std	Y+17, r24	; 0x11
    6512:	89 89       	ldd	r24, Y+17	; 0x11
    6514:	9a 89       	ldd	r25, Y+18	; 0x12
    6516:	01 97       	sbiw	r24, 0x01	; 1
    6518:	f1 f7       	brne	.-4      	; 0x6516 <CheckUser+0x2de>
    651a:	9a 8b       	std	Y+18, r25	; 0x12
    651c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    651e:	8b 89       	ldd	r24, Y+19	; 0x13
    6520:	9c 89       	ldd	r25, Y+20	; 0x14
    6522:	01 97       	sbiw	r24, 0x01	; 1
    6524:	9c 8b       	std	Y+20, r25	; 0x14
    6526:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6528:	8b 89       	ldd	r24, Y+19	; 0x13
    652a:	9c 89       	ldd	r25, Y+20	; 0x14
    652c:	00 97       	sbiw	r24, 0x00	; 0
    652e:	69 f7       	brne	.-38     	; 0x650a <CheckUser+0x2d2>
    6530:	94 c0       	rjmp	.+296    	; 0x665a <CheckUser+0x422>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6532:	6d 89       	ldd	r22, Y+21	; 0x15
    6534:	7e 89       	ldd	r23, Y+22	; 0x16
    6536:	8f 89       	ldd	r24, Y+23	; 0x17
    6538:	98 8d       	ldd	r25, Y+24	; 0x18
    653a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    653e:	dc 01       	movw	r26, r24
    6540:	cb 01       	movw	r24, r22
    6542:	9c 8b       	std	Y+20, r25	; 0x14
    6544:	8b 8b       	std	Y+19, r24	; 0x13
    6546:	8b 89       	ldd	r24, Y+19	; 0x13
    6548:	9c 89       	ldd	r25, Y+20	; 0x14
    654a:	98 8b       	std	Y+16, r25	; 0x10
    654c:	8f 87       	std	Y+15, r24	; 0x0f
    654e:	8f 85       	ldd	r24, Y+15	; 0x0f
    6550:	98 89       	ldd	r25, Y+16	; 0x10
    6552:	01 97       	sbiw	r24, 0x01	; 1
    6554:	f1 f7       	brne	.-4      	; 0x6552 <CheckUser+0x31a>
    6556:	98 8b       	std	Y+16, r25	; 0x10
    6558:	8f 87       	std	Y+15, r24	; 0x0f
    655a:	7f c0       	rjmp	.+254    	; 0x665a <CheckUser+0x422>
				 _delay_ms(1000);
			 }
	}
		else {
			LCD_enuClearScreen();
    655c:	0e 94 df 1c 	call	0x39be	; 0x39be <LCD_enuClearScreen>
			LCD_enuWriteString("there is no Users");
    6560:	82 ea       	ldi	r24, 0xA2	; 162
    6562:	94 e0       	ldi	r25, 0x04	; 4
    6564:	0e 94 b9 1c 	call	0x3972	; 0x3972 <LCD_enuWriteString>
			HC05_enuSendString("There is no Users\r\n");
    6568:	84 eb       	ldi	r24, 0xB4	; 180
    656a:	94 e0       	ldi	r25, 0x04	; 4
    656c:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
			*Copy_u8UserState=0;
    6570:	ef a9       	ldd	r30, Y+55	; 0x37
    6572:	f8 ad       	ldd	r31, Y+56	; 0x38
    6574:	10 82       	st	Z, r1
    6576:	80 e0       	ldi	r24, 0x00	; 0
    6578:	90 e0       	ldi	r25, 0x00	; 0
    657a:	aa e7       	ldi	r26, 0x7A	; 122
    657c:	b4 e4       	ldi	r27, 0x44	; 68
    657e:	8b 87       	std	Y+11, r24	; 0x0b
    6580:	9c 87       	std	Y+12, r25	; 0x0c
    6582:	ad 87       	std	Y+13, r26	; 0x0d
    6584:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6586:	6b 85       	ldd	r22, Y+11	; 0x0b
    6588:	7c 85       	ldd	r23, Y+12	; 0x0c
    658a:	8d 85       	ldd	r24, Y+13	; 0x0d
    658c:	9e 85       	ldd	r25, Y+14	; 0x0e
    658e:	20 e0       	ldi	r18, 0x00	; 0
    6590:	30 e0       	ldi	r19, 0x00	; 0
    6592:	4a e7       	ldi	r20, 0x7A	; 122
    6594:	55 e4       	ldi	r21, 0x45	; 69
    6596:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    659a:	dc 01       	movw	r26, r24
    659c:	cb 01       	movw	r24, r22
    659e:	8f 83       	std	Y+7, r24	; 0x07
    65a0:	98 87       	std	Y+8, r25	; 0x08
    65a2:	a9 87       	std	Y+9, r26	; 0x09
    65a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    65a6:	6f 81       	ldd	r22, Y+7	; 0x07
    65a8:	78 85       	ldd	r23, Y+8	; 0x08
    65aa:	89 85       	ldd	r24, Y+9	; 0x09
    65ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    65ae:	20 e0       	ldi	r18, 0x00	; 0
    65b0:	30 e0       	ldi	r19, 0x00	; 0
    65b2:	40 e8       	ldi	r20, 0x80	; 128
    65b4:	5f e3       	ldi	r21, 0x3F	; 63
    65b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    65ba:	88 23       	and	r24, r24
    65bc:	2c f4       	brge	.+10     	; 0x65c8 <CheckUser+0x390>
		__ticks = 1;
    65be:	81 e0       	ldi	r24, 0x01	; 1
    65c0:	90 e0       	ldi	r25, 0x00	; 0
    65c2:	9e 83       	std	Y+6, r25	; 0x06
    65c4:	8d 83       	std	Y+5, r24	; 0x05
    65c6:	3f c0       	rjmp	.+126    	; 0x6646 <CheckUser+0x40e>
	else if (__tmp > 65535)
    65c8:	6f 81       	ldd	r22, Y+7	; 0x07
    65ca:	78 85       	ldd	r23, Y+8	; 0x08
    65cc:	89 85       	ldd	r24, Y+9	; 0x09
    65ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    65d0:	20 e0       	ldi	r18, 0x00	; 0
    65d2:	3f ef       	ldi	r19, 0xFF	; 255
    65d4:	4f e7       	ldi	r20, 0x7F	; 127
    65d6:	57 e4       	ldi	r21, 0x47	; 71
    65d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    65dc:	18 16       	cp	r1, r24
    65de:	4c f5       	brge	.+82     	; 0x6632 <CheckUser+0x3fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    65e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    65e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    65e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    65e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    65e8:	20 e0       	ldi	r18, 0x00	; 0
    65ea:	30 e0       	ldi	r19, 0x00	; 0
    65ec:	40 e2       	ldi	r20, 0x20	; 32
    65ee:	51 e4       	ldi	r21, 0x41	; 65
    65f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    65f4:	dc 01       	movw	r26, r24
    65f6:	cb 01       	movw	r24, r22
    65f8:	bc 01       	movw	r22, r24
    65fa:	cd 01       	movw	r24, r26
    65fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6600:	dc 01       	movw	r26, r24
    6602:	cb 01       	movw	r24, r22
    6604:	9e 83       	std	Y+6, r25	; 0x06
    6606:	8d 83       	std	Y+5, r24	; 0x05
    6608:	0f c0       	rjmp	.+30     	; 0x6628 <CheckUser+0x3f0>
    660a:	80 e9       	ldi	r24, 0x90	; 144
    660c:	91 e0       	ldi	r25, 0x01	; 1
    660e:	9c 83       	std	Y+4, r25	; 0x04
    6610:	8b 83       	std	Y+3, r24	; 0x03
    6612:	8b 81       	ldd	r24, Y+3	; 0x03
    6614:	9c 81       	ldd	r25, Y+4	; 0x04
    6616:	01 97       	sbiw	r24, 0x01	; 1
    6618:	f1 f7       	brne	.-4      	; 0x6616 <CheckUser+0x3de>
    661a:	9c 83       	std	Y+4, r25	; 0x04
    661c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    661e:	8d 81       	ldd	r24, Y+5	; 0x05
    6620:	9e 81       	ldd	r25, Y+6	; 0x06
    6622:	01 97       	sbiw	r24, 0x01	; 1
    6624:	9e 83       	std	Y+6, r25	; 0x06
    6626:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6628:	8d 81       	ldd	r24, Y+5	; 0x05
    662a:	9e 81       	ldd	r25, Y+6	; 0x06
    662c:	00 97       	sbiw	r24, 0x00	; 0
    662e:	69 f7       	brne	.-38     	; 0x660a <CheckUser+0x3d2>
    6630:	14 c0       	rjmp	.+40     	; 0x665a <CheckUser+0x422>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6632:	6f 81       	ldd	r22, Y+7	; 0x07
    6634:	78 85       	ldd	r23, Y+8	; 0x08
    6636:	89 85       	ldd	r24, Y+9	; 0x09
    6638:	9a 85       	ldd	r25, Y+10	; 0x0a
    663a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    663e:	dc 01       	movw	r26, r24
    6640:	cb 01       	movw	r24, r22
    6642:	9e 83       	std	Y+6, r25	; 0x06
    6644:	8d 83       	std	Y+5, r24	; 0x05
    6646:	8d 81       	ldd	r24, Y+5	; 0x05
    6648:	9e 81       	ldd	r25, Y+6	; 0x06
    664a:	9a 83       	std	Y+2, r25	; 0x02
    664c:	89 83       	std	Y+1, r24	; 0x01
    664e:	89 81       	ldd	r24, Y+1	; 0x01
    6650:	9a 81       	ldd	r25, Y+2	; 0x02
    6652:	01 97       	sbiw	r24, 0x01	; 1
    6654:	f1 f7       	brne	.-4      	; 0x6652 <CheckUser+0x41a>
    6656:	9a 83       	std	Y+2, r25	; 0x02
    6658:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
		}
	}
    665a:	e8 96       	adiw	r28, 0x38	; 56
    665c:	0f b6       	in	r0, 0x3f	; 63
    665e:	f8 94       	cli
    6660:	de bf       	out	0x3e, r29	; 62
    6662:	0f be       	out	0x3f, r0	; 63
    6664:	cd bf       	out	0x3d, r28	; 61
    6666:	cf 91       	pop	r28
    6668:	df 91       	pop	r29
    666a:	08 95       	ret

0000666c <DeleteUser>:
	void DeleteUser (u8 Copy_u8NumOfUsers, u8* Copy_u8Id){
    666c:	df 93       	push	r29
    666e:	cf 93       	push	r28
    6670:	cd b7       	in	r28, 0x3d	; 61
    6672:	de b7       	in	r29, 0x3e	; 62
    6674:	2d 97       	sbiw	r28, 0x0d	; 13
    6676:	0f b6       	in	r0, 0x3f	; 63
    6678:	f8 94       	cli
    667a:	de bf       	out	0x3e, r29	; 62
    667c:	0f be       	out	0x3f, r0	; 63
    667e:	cd bf       	out	0x3d, r28	; 61
    6680:	8b 87       	std	Y+11, r24	; 0x0b
    6682:	7d 87       	std	Y+13, r23	; 0x0d
    6684:	6c 87       	std	Y+12, r22	; 0x0c

			if (Copy_u8NumOfUsers>0){
    6686:	8b 85       	ldd	r24, Y+11	; 0x0b
    6688:	88 23       	and	r24, r24
    668a:	09 f4       	brne	.+2      	; 0x668e <DeleteUser+0x22>
    668c:	82 c0       	rjmp	.+260    	; 0x6792 <DeleteUser+0x126>
				u8 Counter=0; u8 Data=0; u8 Location =0; u8 Address=0; u8 Done=0;
    668e:	19 86       	std	Y+9, r1	; 0x09
    6690:	1a 86       	std	Y+10, r1	; 0x0a
    6692:	18 86       	std	Y+8, r1	; 0x08
    6694:	1f 82       	std	Y+7, r1	; 0x07
    6696:	1e 82       	std	Y+6, r1	; 0x06
    6698:	6c c0       	rjmp	.+216    	; 0x6772 <DeleteUser+0x106>
				for(;Counter<Copy_u8NumOfUsers;Counter++){
					Location=Counter*8;
    669a:	89 85       	ldd	r24, Y+9	; 0x09
    669c:	88 2f       	mov	r24, r24
    669e:	90 e0       	ldi	r25, 0x00	; 0
    66a0:	88 0f       	add	r24, r24
    66a2:	99 1f       	adc	r25, r25
    66a4:	88 0f       	add	r24, r24
    66a6:	99 1f       	adc	r25, r25
    66a8:	88 0f       	add	r24, r24
    66aa:	99 1f       	adc	r25, r25
    66ac:	88 87       	std	Y+8, r24	; 0x08
				   u8 Exist_UserName=0;
    66ae:	1d 82       	std	Y+5, r1	; 0x05
				   for(u8 Num_Digit=0;Num_Digit<4;Num_Digit++){
    66b0:	1c 82       	std	Y+4, r1	; 0x04
    66b2:	1c c0       	rjmp	.+56     	; 0x66ec <DeleteUser+0x80>
					   Address=Location+Num_Digit;
    66b4:	98 85       	ldd	r25, Y+8	; 0x08
    66b6:	8c 81       	ldd	r24, Y+4	; 0x04
    66b8:	89 0f       	add	r24, r25
    66ba:	8f 83       	std	Y+7, r24	; 0x07
					   EEPROM_enuRead(&Data,0,Address);
    66bc:	ce 01       	movw	r24, r28
    66be:	0a 96       	adiw	r24, 0x0a	; 10
    66c0:	60 e0       	ldi	r22, 0x00	; 0
    66c2:	4f 81       	ldd	r20, Y+7	; 0x07
    66c4:	0e 94 01 21 	call	0x4202	; 0x4202 <EEPROM_enuRead>
					   if(Data==Copy_u8Id[Num_Digit]){
    66c8:	8c 81       	ldd	r24, Y+4	; 0x04
    66ca:	28 2f       	mov	r18, r24
    66cc:	30 e0       	ldi	r19, 0x00	; 0
    66ce:	8c 85       	ldd	r24, Y+12	; 0x0c
    66d0:	9d 85       	ldd	r25, Y+13	; 0x0d
    66d2:	fc 01       	movw	r30, r24
    66d4:	e2 0f       	add	r30, r18
    66d6:	f3 1f       	adc	r31, r19
    66d8:	90 81       	ld	r25, Z
    66da:	8a 85       	ldd	r24, Y+10	; 0x0a
    66dc:	98 17       	cp	r25, r24
    66de:	19 f4       	brne	.+6      	; 0x66e6 <DeleteUser+0x7a>
						   Exist_UserName++;
    66e0:	8d 81       	ldd	r24, Y+5	; 0x05
    66e2:	8f 5f       	subi	r24, 0xFF	; 255
    66e4:	8d 83       	std	Y+5, r24	; 0x05
			if (Copy_u8NumOfUsers>0){
				u8 Counter=0; u8 Data=0; u8 Location =0; u8 Address=0; u8 Done=0;
				for(;Counter<Copy_u8NumOfUsers;Counter++){
					Location=Counter*8;
				   u8 Exist_UserName=0;
				   for(u8 Num_Digit=0;Num_Digit<4;Num_Digit++){
    66e6:	8c 81       	ldd	r24, Y+4	; 0x04
    66e8:	8f 5f       	subi	r24, 0xFF	; 255
    66ea:	8c 83       	std	Y+4, r24	; 0x04
    66ec:	8c 81       	ldd	r24, Y+4	; 0x04
    66ee:	84 30       	cpi	r24, 0x04	; 4
    66f0:	08 f3       	brcs	.-62     	; 0x66b4 <DeleteUser+0x48>
					   EEPROM_enuRead(&Data,0,Address);
					   if(Data==Copy_u8Id[Num_Digit]){
						   Exist_UserName++;
					   }
				   }
				   if(Exist_UserName==4){
    66f2:	8d 81       	ldd	r24, Y+5	; 0x05
    66f4:	84 30       	cpi	r24, 0x04	; 4
    66f6:	11 f4       	brne	.+4      	; 0x66fc <DeleteUser+0x90>

					   Done=1;
    66f8:	81 e0       	ldi	r24, 0x01	; 1
    66fa:	8e 83       	std	Y+6, r24	; 0x06
				   }
				   if(Done==1){
    66fc:	8e 81       	ldd	r24, Y+6	; 0x06
    66fe:	81 30       	cpi	r24, 0x01	; 1
    6700:	a9 f5       	brne	.+106    	; 0x676c <DeleteUser+0x100>
					   u8 Num_Digit=0;
    6702:	1b 82       	std	Y+3, r1	; 0x03
    6704:	15 c0       	rjmp	.+42     	; 0x6730 <DeleteUser+0xc4>
					   for(;Num_Digit<4;Num_Digit++){
						   Address=Location+Num_Digit;
    6706:	98 85       	ldd	r25, Y+8	; 0x08
    6708:	8b 81       	ldd	r24, Y+3	; 0x03
    670a:	89 0f       	add	r24, r25
    670c:	8f 83       	std	Y+7, r24	; 0x07
						   u8 Next_Address=Address+8;
    670e:	8f 81       	ldd	r24, Y+7	; 0x07
    6710:	88 5f       	subi	r24, 0xF8	; 248
    6712:	8a 83       	std	Y+2, r24	; 0x02
						   EEPROM_enuRead(&Data,0,Next_Address);
    6714:	ce 01       	movw	r24, r28
    6716:	0a 96       	adiw	r24, 0x0a	; 10
    6718:	60 e0       	ldi	r22, 0x00	; 0
    671a:	4a 81       	ldd	r20, Y+2	; 0x02
    671c:	0e 94 01 21 	call	0x4202	; 0x4202 <EEPROM_enuRead>
						   EEPROM_enuWrite(Data,0,Address);
    6720:	8a 85       	ldd	r24, Y+10	; 0x0a
    6722:	60 e0       	ldi	r22, 0x00	; 0
    6724:	4f 81       	ldd	r20, Y+7	; 0x07
    6726:	0e 94 db 20 	call	0x41b6	; 0x41b6 <EEPROM_enuWrite>

					   Done=1;
				   }
				   if(Done==1){
					   u8 Num_Digit=0;
					   for(;Num_Digit<4;Num_Digit++){
    672a:	8b 81       	ldd	r24, Y+3	; 0x03
    672c:	8f 5f       	subi	r24, 0xFF	; 255
    672e:	8b 83       	std	Y+3, r24	; 0x03
    6730:	8b 81       	ldd	r24, Y+3	; 0x03
    6732:	84 30       	cpi	r24, 0x04	; 4
    6734:	40 f3       	brcs	.-48     	; 0x6706 <DeleteUser+0x9a>
						   Address=Location+Num_Digit;
						   u8 Next_Address=Address+8;
						   EEPROM_enuRead(&Data,0,Next_Address);
						   EEPROM_enuWrite(Data,0,Address);
					   }
					    Num_Digit=0;
    6736:	1b 82       	std	Y+3, r1	; 0x03
    6738:	16 c0       	rjmp	.+44     	; 0x6766 <DeleteUser+0xfa>
					   for(;Num_Digit<4;Num_Digit++){
						   Address=Location+Num_Digit+4;
    673a:	98 85       	ldd	r25, Y+8	; 0x08
    673c:	8b 81       	ldd	r24, Y+3	; 0x03
    673e:	89 0f       	add	r24, r25
    6740:	8c 5f       	subi	r24, 0xFC	; 252
    6742:	8f 83       	std	Y+7, r24	; 0x07
						  	u8 Next_Address=Address+8;
    6744:	8f 81       	ldd	r24, Y+7	; 0x07
    6746:	88 5f       	subi	r24, 0xF8	; 248
    6748:	89 83       	std	Y+1, r24	; 0x01
						    EEPROM_enuRead(&Data,0,Next_Address);
    674a:	ce 01       	movw	r24, r28
    674c:	0a 96       	adiw	r24, 0x0a	; 10
    674e:	60 e0       	ldi	r22, 0x00	; 0
    6750:	49 81       	ldd	r20, Y+1	; 0x01
    6752:	0e 94 01 21 	call	0x4202	; 0x4202 <EEPROM_enuRead>
						  	EEPROM_enuWrite(Data,0,Address);
    6756:	8a 85       	ldd	r24, Y+10	; 0x0a
    6758:	60 e0       	ldi	r22, 0x00	; 0
    675a:	4f 81       	ldd	r20, Y+7	; 0x07
    675c:	0e 94 db 20 	call	0x41b6	; 0x41b6 <EEPROM_enuWrite>
						   u8 Next_Address=Address+8;
						   EEPROM_enuRead(&Data,0,Next_Address);
						   EEPROM_enuWrite(Data,0,Address);
					   }
					    Num_Digit=0;
					   for(;Num_Digit<4;Num_Digit++){
    6760:	8b 81       	ldd	r24, Y+3	; 0x03
    6762:	8f 5f       	subi	r24, 0xFF	; 255
    6764:	8b 83       	std	Y+3, r24	; 0x03
    6766:	8b 81       	ldd	r24, Y+3	; 0x03
    6768:	84 30       	cpi	r24, 0x04	; 4
    676a:	38 f3       	brcs	.-50     	; 0x673a <DeleteUser+0xce>
	}
	void DeleteUser (u8 Copy_u8NumOfUsers, u8* Copy_u8Id){

			if (Copy_u8NumOfUsers>0){
				u8 Counter=0; u8 Data=0; u8 Location =0; u8 Address=0; u8 Done=0;
				for(;Counter<Copy_u8NumOfUsers;Counter++){
    676c:	89 85       	ldd	r24, Y+9	; 0x09
    676e:	8f 5f       	subi	r24, 0xFF	; 255
    6770:	89 87       	std	Y+9, r24	; 0x09
    6772:	99 85       	ldd	r25, Y+9	; 0x09
    6774:	8b 85       	ldd	r24, Y+11	; 0x0b
    6776:	98 17       	cp	r25, r24
    6778:	08 f4       	brcc	.+2      	; 0x677c <DeleteUser+0x110>
    677a:	8f cf       	rjmp	.-226    	; 0x669a <DeleteUser+0x2e>
						    EEPROM_enuRead(&Data,0,Next_Address);
						  	EEPROM_enuWrite(Data,0,Address);
					   }
				   }
				}
				if (Done==1){
    677c:	8e 81       	ldd	r24, Y+6	; 0x06
    677e:	81 30       	cpi	r24, 0x01	; 1
    6780:	41 f4       	brne	.+16     	; 0x6792 <DeleteUser+0x126>
					Copy_u8NumOfUsers--;
    6782:	8b 85       	ldd	r24, Y+11	; 0x0b
    6784:	81 50       	subi	r24, 0x01	; 1
    6786:	8b 87       	std	Y+11, r24	; 0x0b
					EEPROM_enuWrite(Copy_u8NumOfUsers,0,90);
    6788:	8b 85       	ldd	r24, Y+11	; 0x0b
    678a:	60 e0       	ldi	r22, 0x00	; 0
    678c:	4a e5       	ldi	r20, 0x5A	; 90
    678e:	0e 94 db 20 	call	0x41b6	; 0x41b6 <EEPROM_enuWrite>

				}
			}

		}
    6792:	2d 96       	adiw	r28, 0x0d	; 13
    6794:	0f b6       	in	r0, 0x3f	; 63
    6796:	f8 94       	cli
    6798:	de bf       	out	0x3e, r29	; 62
    679a:	0f be       	out	0x3f, r0	; 63
    679c:	cd bf       	out	0x3d, r28	; 61
    679e:	cf 91       	pop	r28
    67a0:	df 91       	pop	r29
    67a2:	08 95       	ret

000067a4 <DeleteAll>:

	void DeleteAll (void){
    67a4:	df 93       	push	r29
    67a6:	cf 93       	push	r28
    67a8:	00 d0       	rcall	.+0      	; 0x67aa <DeleteAll+0x6>
    67aa:	cd b7       	in	r28, 0x3d	; 61
    67ac:	de b7       	in	r29, 0x3e	; 62

		  for (u16 Counter = 0; Counter <= 0xFF; Counter++)
    67ae:	1a 82       	std	Y+2, r1	; 0x02
    67b0:	19 82       	std	Y+1, r1	; 0x01
    67b2:	0b c0       	rjmp	.+22     	; 0x67ca <DeleteAll+0x26>
		  {
		    EEPROM_enuWrite(0xFF, 0, Counter);
    67b4:	99 81       	ldd	r25, Y+1	; 0x01
    67b6:	8f ef       	ldi	r24, 0xFF	; 255
    67b8:	60 e0       	ldi	r22, 0x00	; 0
    67ba:	49 2f       	mov	r20, r25
    67bc:	0e 94 db 20 	call	0x41b6	; 0x41b6 <EEPROM_enuWrite>

		}

	void DeleteAll (void){

		  for (u16 Counter = 0; Counter <= 0xFF; Counter++)
    67c0:	89 81       	ldd	r24, Y+1	; 0x01
    67c2:	9a 81       	ldd	r25, Y+2	; 0x02
    67c4:	01 96       	adiw	r24, 0x01	; 1
    67c6:	9a 83       	std	Y+2, r25	; 0x02
    67c8:	89 83       	std	Y+1, r24	; 0x01
    67ca:	89 81       	ldd	r24, Y+1	; 0x01
    67cc:	9a 81       	ldd	r25, Y+2	; 0x02
    67ce:	8f 3f       	cpi	r24, 0xFF	; 255
    67d0:	91 05       	cpc	r25, r1
    67d2:	81 f3       	breq	.-32     	; 0x67b4 <DeleteAll+0x10>
    67d4:	78 f3       	brcs	.-34     	; 0x67b4 <DeleteAll+0x10>
		  {
		    EEPROM_enuWrite(0xFF, 0, Counter);
		  }

		  EEPROM_enuWrite(0, 0, 90);
    67d6:	80 e0       	ldi	r24, 0x00	; 0
    67d8:	60 e0       	ldi	r22, 0x00	; 0
    67da:	4a e5       	ldi	r20, 0x5A	; 90
    67dc:	0e 94 db 20 	call	0x41b6	; 0x41b6 <EEPROM_enuWrite>

	}
    67e0:	0f 90       	pop	r0
    67e2:	0f 90       	pop	r0
    67e4:	cf 91       	pop	r28
    67e6:	df 91       	pop	r29
    67e8:	08 95       	ret

000067ea <SensorControl>:
	void SensorControl (u8* Copy_u8State){
    67ea:	df 93       	push	r29
    67ec:	cf 93       	push	r28
    67ee:	00 d0       	rcall	.+0      	; 0x67f0 <SensorControl+0x6>
    67f0:	00 d0       	rcall	.+0      	; 0x67f2 <SensorControl+0x8>
    67f2:	cd b7       	in	r28, 0x3d	; 61
    67f4:	de b7       	in	r29, 0x3e	; 62
    67f6:	9c 83       	std	Y+4, r25	; 0x04
    67f8:	8b 83       	std	Y+3, r24	; 0x03
            if (*Copy_u8State==0){
    67fa:	eb 81       	ldd	r30, Y+3	; 0x03
    67fc:	fc 81       	ldd	r31, Y+4	; 0x04
    67fe:	80 81       	ld	r24, Z
    6800:	88 23       	and	r24, r24
    6802:	21 f5       	brne	.+72     	; 0x684c <SensorControl+0x62>
            	u16 Temperature=0;
    6804:	1a 82       	std	Y+2, r1	; 0x02
    6806:	19 82       	std	Y+1, r1	; 0x01
            	Temperature=TEMP_SENSOR_enuRead();
    6808:	0e 94 56 17 	call	0x2eac	; 0x2eac <TEMP_SENSOR_enuRead>
    680c:	9a 83       	std	Y+2, r25	; 0x02
    680e:	89 83       	std	Y+1, r24	; 0x01
            	LCD_enuWritInteger(Temperature);
    6810:	89 81       	ldd	r24, Y+1	; 0x01
    6812:	9a 81       	ldd	r25, Y+2	; 0x02
    6814:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <LCD_enuWritInteger>
            	if(Temperature>28){
    6818:	89 81       	ldd	r24, Y+1	; 0x01
    681a:	9a 81       	ldd	r25, Y+2	; 0x02
    681c:	8d 31       	cpi	r24, 0x1D	; 29
    681e:	91 05       	cpc	r25, r1
    6820:	48 f0       	brcs	.+18     	; 0x6834 <SensorControl+0x4a>
            		DC_MOTOR_enuSetDirection(CLOCKWISE);
    6822:	81 e0       	ldi	r24, 0x01	; 1
    6824:	0e 94 8d 21 	call	0x431a	; 0x431a <DC_MOTOR_enuSetDirection>
            		DC_MOTOR_enuSetSpeed(100);
    6828:	84 e6       	ldi	r24, 0x64	; 100
    682a:	0e 94 b8 21 	call	0x4370	; 0x4370 <DC_MOTOR_enuSetSpeed>
            		DC_MOTOR_enuStart();
    682e:	0e 94 c8 21 	call	0x4390	; 0x4390 <DC_MOTOR_enuStart>
    6832:	07 c0       	rjmp	.+14     	; 0x6842 <SensorControl+0x58>
            		//LCD_enuClearScreen();

            	}
            	else if(Temperature<21){
    6834:	89 81       	ldd	r24, Y+1	; 0x01
    6836:	9a 81       	ldd	r25, Y+2	; 0x02
    6838:	85 31       	cpi	r24, 0x15	; 21
    683a:	91 05       	cpc	r25, r1
    683c:	10 f4       	brcc	.+4      	; 0x6842 <SensorControl+0x58>
            		DC_MOTORenuStop();
    683e:	0e 94 d5 21 	call	0x43aa	; 0x43aa <DC_MOTORenuStop>
            	}
            	*Copy_u8State=1;
    6842:	eb 81       	ldd	r30, Y+3	; 0x03
    6844:	fc 81       	ldd	r31, Y+4	; 0x04
    6846:	81 e0       	ldi	r24, 0x01	; 1
    6848:	80 83       	st	Z, r24
    684a:	0a c0       	rjmp	.+20     	; 0x6860 <SensorControl+0x76>

            }
            else if(*Copy_u8State==1){
    684c:	eb 81       	ldd	r30, Y+3	; 0x03
    684e:	fc 81       	ldd	r31, Y+4	; 0x04
    6850:	80 81       	ld	r24, Z
    6852:	81 30       	cpi	r24, 0x01	; 1
    6854:	29 f4       	brne	.+10     	; 0x6860 <SensorControl+0x76>
            	DC_MOTORenuStop();
    6856:	0e 94 d5 21 	call	0x43aa	; 0x43aa <DC_MOTORenuStop>
            	*Copy_u8State=0;
    685a:	eb 81       	ldd	r30, Y+3	; 0x03
    685c:	fc 81       	ldd	r31, Y+4	; 0x04
    685e:	10 82       	st	Z, r1
            }
	}
    6860:	0f 90       	pop	r0
    6862:	0f 90       	pop	r0
    6864:	0f 90       	pop	r0
    6866:	0f 90       	pop	r0
    6868:	cf 91       	pop	r28
    686a:	df 91       	pop	r29
    686c:	08 95       	ret

0000686e <DoorControl>:
	void DoorControl (u8* Copy_u8State){
    686e:	df 93       	push	r29
    6870:	cf 93       	push	r28
    6872:	cd b7       	in	r28, 0x3d	; 61
    6874:	de b7       	in	r29, 0x3e	; 62
    6876:	6e 97       	sbiw	r28, 0x1e	; 30
    6878:	0f b6       	in	r0, 0x3f	; 63
    687a:	f8 94       	cli
    687c:	de bf       	out	0x3e, r29	; 62
    687e:	0f be       	out	0x3f, r0	; 63
    6880:	cd bf       	out	0x3d, r28	; 61
    6882:	9e 8f       	std	Y+30, r25	; 0x1e
    6884:	8d 8f       	std	Y+29, r24	; 0x1d
		if(*Copy_u8State==CLOSE){
    6886:	ed 8d       	ldd	r30, Y+29	; 0x1d
    6888:	fe 8d       	ldd	r31, Y+30	; 0x1e
    688a:	80 81       	ld	r24, Z
    688c:	85 30       	cpi	r24, 0x05	; 5
    688e:	09 f0       	breq	.+2      	; 0x6892 <DoorControl+0x24>
    6890:	84 c0       	rjmp	.+264    	; 0x699a <DoorControl+0x12c>
			LCD_enuClearScreen();
    6892:	0e 94 df 1c 	call	0x39be	; 0x39be <LCD_enuClearScreen>
			SERVO_MOTOR_enuSetPosition(OPEN);
    6896:	8a e0       	ldi	r24, 0x0A	; 10
    6898:	0e 94 93 17 	call	0x2f26	; 0x2f26 <SERVO_MOTOR_enuSetPosition>
			LCD_enuWriteString("DOOR is OPEN");
    689c:	88 ec       	ldi	r24, 0xC8	; 200
    689e:	94 e0       	ldi	r25, 0x04	; 4
    68a0:	0e 94 b9 1c 	call	0x3972	; 0x3972 <LCD_enuWriteString>
			HC05_enuSendString("DOOR is OPEN\r\n");
    68a4:	85 ed       	ldi	r24, 0xD5	; 213
    68a6:	94 e0       	ldi	r25, 0x04	; 4
    68a8:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
			*Copy_u8State=OPEN;
    68ac:	ed 8d       	ldd	r30, Y+29	; 0x1d
    68ae:	fe 8d       	ldd	r31, Y+30	; 0x1e
    68b0:	8a e0       	ldi	r24, 0x0A	; 10
    68b2:	80 83       	st	Z, r24
    68b4:	80 e0       	ldi	r24, 0x00	; 0
    68b6:	90 e0       	ldi	r25, 0x00	; 0
    68b8:	aa e7       	ldi	r26, 0x7A	; 122
    68ba:	b4 e4       	ldi	r27, 0x44	; 68
    68bc:	89 8f       	std	Y+25, r24	; 0x19
    68be:	9a 8f       	std	Y+26, r25	; 0x1a
    68c0:	ab 8f       	std	Y+27, r26	; 0x1b
    68c2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    68c4:	69 8d       	ldd	r22, Y+25	; 0x19
    68c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    68c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    68ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    68cc:	20 e0       	ldi	r18, 0x00	; 0
    68ce:	30 e0       	ldi	r19, 0x00	; 0
    68d0:	4a e7       	ldi	r20, 0x7A	; 122
    68d2:	55 e4       	ldi	r21, 0x45	; 69
    68d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    68d8:	dc 01       	movw	r26, r24
    68da:	cb 01       	movw	r24, r22
    68dc:	8d 8b       	std	Y+21, r24	; 0x15
    68de:	9e 8b       	std	Y+22, r25	; 0x16
    68e0:	af 8b       	std	Y+23, r26	; 0x17
    68e2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    68e4:	6d 89       	ldd	r22, Y+21	; 0x15
    68e6:	7e 89       	ldd	r23, Y+22	; 0x16
    68e8:	8f 89       	ldd	r24, Y+23	; 0x17
    68ea:	98 8d       	ldd	r25, Y+24	; 0x18
    68ec:	20 e0       	ldi	r18, 0x00	; 0
    68ee:	30 e0       	ldi	r19, 0x00	; 0
    68f0:	40 e8       	ldi	r20, 0x80	; 128
    68f2:	5f e3       	ldi	r21, 0x3F	; 63
    68f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    68f8:	88 23       	and	r24, r24
    68fa:	2c f4       	brge	.+10     	; 0x6906 <DoorControl+0x98>
		__ticks = 1;
    68fc:	81 e0       	ldi	r24, 0x01	; 1
    68fe:	90 e0       	ldi	r25, 0x00	; 0
    6900:	9c 8b       	std	Y+20, r25	; 0x14
    6902:	8b 8b       	std	Y+19, r24	; 0x13
    6904:	3f c0       	rjmp	.+126    	; 0x6984 <DoorControl+0x116>
	else if (__tmp > 65535)
    6906:	6d 89       	ldd	r22, Y+21	; 0x15
    6908:	7e 89       	ldd	r23, Y+22	; 0x16
    690a:	8f 89       	ldd	r24, Y+23	; 0x17
    690c:	98 8d       	ldd	r25, Y+24	; 0x18
    690e:	20 e0       	ldi	r18, 0x00	; 0
    6910:	3f ef       	ldi	r19, 0xFF	; 255
    6912:	4f e7       	ldi	r20, 0x7F	; 127
    6914:	57 e4       	ldi	r21, 0x47	; 71
    6916:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    691a:	18 16       	cp	r1, r24
    691c:	4c f5       	brge	.+82     	; 0x6970 <DoorControl+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    691e:	69 8d       	ldd	r22, Y+25	; 0x19
    6920:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6922:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6924:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6926:	20 e0       	ldi	r18, 0x00	; 0
    6928:	30 e0       	ldi	r19, 0x00	; 0
    692a:	40 e2       	ldi	r20, 0x20	; 32
    692c:	51 e4       	ldi	r21, 0x41	; 65
    692e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6932:	dc 01       	movw	r26, r24
    6934:	cb 01       	movw	r24, r22
    6936:	bc 01       	movw	r22, r24
    6938:	cd 01       	movw	r24, r26
    693a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    693e:	dc 01       	movw	r26, r24
    6940:	cb 01       	movw	r24, r22
    6942:	9c 8b       	std	Y+20, r25	; 0x14
    6944:	8b 8b       	std	Y+19, r24	; 0x13
    6946:	0f c0       	rjmp	.+30     	; 0x6966 <DoorControl+0xf8>
    6948:	80 e9       	ldi	r24, 0x90	; 144
    694a:	91 e0       	ldi	r25, 0x01	; 1
    694c:	9a 8b       	std	Y+18, r25	; 0x12
    694e:	89 8b       	std	Y+17, r24	; 0x11
    6950:	89 89       	ldd	r24, Y+17	; 0x11
    6952:	9a 89       	ldd	r25, Y+18	; 0x12
    6954:	01 97       	sbiw	r24, 0x01	; 1
    6956:	f1 f7       	brne	.-4      	; 0x6954 <DoorControl+0xe6>
    6958:	9a 8b       	std	Y+18, r25	; 0x12
    695a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    695c:	8b 89       	ldd	r24, Y+19	; 0x13
    695e:	9c 89       	ldd	r25, Y+20	; 0x14
    6960:	01 97       	sbiw	r24, 0x01	; 1
    6962:	9c 8b       	std	Y+20, r25	; 0x14
    6964:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6966:	8b 89       	ldd	r24, Y+19	; 0x13
    6968:	9c 89       	ldd	r25, Y+20	; 0x14
    696a:	00 97       	sbiw	r24, 0x00	; 0
    696c:	69 f7       	brne	.-38     	; 0x6948 <DoorControl+0xda>
    696e:	98 c0       	rjmp	.+304    	; 0x6aa0 <DoorControl+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6970:	6d 89       	ldd	r22, Y+21	; 0x15
    6972:	7e 89       	ldd	r23, Y+22	; 0x16
    6974:	8f 89       	ldd	r24, Y+23	; 0x17
    6976:	98 8d       	ldd	r25, Y+24	; 0x18
    6978:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    697c:	dc 01       	movw	r26, r24
    697e:	cb 01       	movw	r24, r22
    6980:	9c 8b       	std	Y+20, r25	; 0x14
    6982:	8b 8b       	std	Y+19, r24	; 0x13
    6984:	8b 89       	ldd	r24, Y+19	; 0x13
    6986:	9c 89       	ldd	r25, Y+20	; 0x14
    6988:	98 8b       	std	Y+16, r25	; 0x10
    698a:	8f 87       	std	Y+15, r24	; 0x0f
    698c:	8f 85       	ldd	r24, Y+15	; 0x0f
    698e:	98 89       	ldd	r25, Y+16	; 0x10
    6990:	01 97       	sbiw	r24, 0x01	; 1
    6992:	f1 f7       	brne	.-4      	; 0x6990 <DoorControl+0x122>
    6994:	98 8b       	std	Y+16, r25	; 0x10
    6996:	8f 87       	std	Y+15, r24	; 0x0f
    6998:	83 c0       	rjmp	.+262    	; 0x6aa0 <DoorControl+0x232>
			_delay_ms(1000);
		}
		else{
			LCD_enuClearScreen();
    699a:	0e 94 df 1c 	call	0x39be	; 0x39be <LCD_enuClearScreen>
			SERVO_MOTOR_enuSetPosition(CLOSE);
    699e:	85 e0       	ldi	r24, 0x05	; 5
    69a0:	0e 94 93 17 	call	0x2f26	; 0x2f26 <SERVO_MOTOR_enuSetPosition>
			LCD_enuWriteString("DOOR is CLOSE");
    69a4:	84 ee       	ldi	r24, 0xE4	; 228
    69a6:	94 e0       	ldi	r25, 0x04	; 4
    69a8:	0e 94 b9 1c 	call	0x3972	; 0x3972 <LCD_enuWriteString>
			HC05_enuSendString("DOOR is Close\r\n");
    69ac:	82 ef       	ldi	r24, 0xF2	; 242
    69ae:	94 e0       	ldi	r25, 0x04	; 4
    69b0:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
			*Copy_u8State=CLOSE;
    69b4:	ed 8d       	ldd	r30, Y+29	; 0x1d
    69b6:	fe 8d       	ldd	r31, Y+30	; 0x1e
    69b8:	85 e0       	ldi	r24, 0x05	; 5
    69ba:	80 83       	st	Z, r24
    69bc:	80 e0       	ldi	r24, 0x00	; 0
    69be:	90 e0       	ldi	r25, 0x00	; 0
    69c0:	aa e7       	ldi	r26, 0x7A	; 122
    69c2:	b4 e4       	ldi	r27, 0x44	; 68
    69c4:	8b 87       	std	Y+11, r24	; 0x0b
    69c6:	9c 87       	std	Y+12, r25	; 0x0c
    69c8:	ad 87       	std	Y+13, r26	; 0x0d
    69ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    69cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    69ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    69d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    69d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    69d4:	20 e0       	ldi	r18, 0x00	; 0
    69d6:	30 e0       	ldi	r19, 0x00	; 0
    69d8:	4a e7       	ldi	r20, 0x7A	; 122
    69da:	55 e4       	ldi	r21, 0x45	; 69
    69dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    69e0:	dc 01       	movw	r26, r24
    69e2:	cb 01       	movw	r24, r22
    69e4:	8f 83       	std	Y+7, r24	; 0x07
    69e6:	98 87       	std	Y+8, r25	; 0x08
    69e8:	a9 87       	std	Y+9, r26	; 0x09
    69ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    69ec:	6f 81       	ldd	r22, Y+7	; 0x07
    69ee:	78 85       	ldd	r23, Y+8	; 0x08
    69f0:	89 85       	ldd	r24, Y+9	; 0x09
    69f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    69f4:	20 e0       	ldi	r18, 0x00	; 0
    69f6:	30 e0       	ldi	r19, 0x00	; 0
    69f8:	40 e8       	ldi	r20, 0x80	; 128
    69fa:	5f e3       	ldi	r21, 0x3F	; 63
    69fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6a00:	88 23       	and	r24, r24
    6a02:	2c f4       	brge	.+10     	; 0x6a0e <DoorControl+0x1a0>
		__ticks = 1;
    6a04:	81 e0       	ldi	r24, 0x01	; 1
    6a06:	90 e0       	ldi	r25, 0x00	; 0
    6a08:	9e 83       	std	Y+6, r25	; 0x06
    6a0a:	8d 83       	std	Y+5, r24	; 0x05
    6a0c:	3f c0       	rjmp	.+126    	; 0x6a8c <DoorControl+0x21e>
	else if (__tmp > 65535)
    6a0e:	6f 81       	ldd	r22, Y+7	; 0x07
    6a10:	78 85       	ldd	r23, Y+8	; 0x08
    6a12:	89 85       	ldd	r24, Y+9	; 0x09
    6a14:	9a 85       	ldd	r25, Y+10	; 0x0a
    6a16:	20 e0       	ldi	r18, 0x00	; 0
    6a18:	3f ef       	ldi	r19, 0xFF	; 255
    6a1a:	4f e7       	ldi	r20, 0x7F	; 127
    6a1c:	57 e4       	ldi	r21, 0x47	; 71
    6a1e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6a22:	18 16       	cp	r1, r24
    6a24:	4c f5       	brge	.+82     	; 0x6a78 <DoorControl+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6a26:	6b 85       	ldd	r22, Y+11	; 0x0b
    6a28:	7c 85       	ldd	r23, Y+12	; 0x0c
    6a2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    6a2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    6a2e:	20 e0       	ldi	r18, 0x00	; 0
    6a30:	30 e0       	ldi	r19, 0x00	; 0
    6a32:	40 e2       	ldi	r20, 0x20	; 32
    6a34:	51 e4       	ldi	r21, 0x41	; 65
    6a36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6a3a:	dc 01       	movw	r26, r24
    6a3c:	cb 01       	movw	r24, r22
    6a3e:	bc 01       	movw	r22, r24
    6a40:	cd 01       	movw	r24, r26
    6a42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6a46:	dc 01       	movw	r26, r24
    6a48:	cb 01       	movw	r24, r22
    6a4a:	9e 83       	std	Y+6, r25	; 0x06
    6a4c:	8d 83       	std	Y+5, r24	; 0x05
    6a4e:	0f c0       	rjmp	.+30     	; 0x6a6e <DoorControl+0x200>
    6a50:	80 e9       	ldi	r24, 0x90	; 144
    6a52:	91 e0       	ldi	r25, 0x01	; 1
    6a54:	9c 83       	std	Y+4, r25	; 0x04
    6a56:	8b 83       	std	Y+3, r24	; 0x03
    6a58:	8b 81       	ldd	r24, Y+3	; 0x03
    6a5a:	9c 81       	ldd	r25, Y+4	; 0x04
    6a5c:	01 97       	sbiw	r24, 0x01	; 1
    6a5e:	f1 f7       	brne	.-4      	; 0x6a5c <DoorControl+0x1ee>
    6a60:	9c 83       	std	Y+4, r25	; 0x04
    6a62:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6a64:	8d 81       	ldd	r24, Y+5	; 0x05
    6a66:	9e 81       	ldd	r25, Y+6	; 0x06
    6a68:	01 97       	sbiw	r24, 0x01	; 1
    6a6a:	9e 83       	std	Y+6, r25	; 0x06
    6a6c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6a6e:	8d 81       	ldd	r24, Y+5	; 0x05
    6a70:	9e 81       	ldd	r25, Y+6	; 0x06
    6a72:	00 97       	sbiw	r24, 0x00	; 0
    6a74:	69 f7       	brne	.-38     	; 0x6a50 <DoorControl+0x1e2>
    6a76:	14 c0       	rjmp	.+40     	; 0x6aa0 <DoorControl+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6a78:	6f 81       	ldd	r22, Y+7	; 0x07
    6a7a:	78 85       	ldd	r23, Y+8	; 0x08
    6a7c:	89 85       	ldd	r24, Y+9	; 0x09
    6a7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6a80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6a84:	dc 01       	movw	r26, r24
    6a86:	cb 01       	movw	r24, r22
    6a88:	9e 83       	std	Y+6, r25	; 0x06
    6a8a:	8d 83       	std	Y+5, r24	; 0x05
    6a8c:	8d 81       	ldd	r24, Y+5	; 0x05
    6a8e:	9e 81       	ldd	r25, Y+6	; 0x06
    6a90:	9a 83       	std	Y+2, r25	; 0x02
    6a92:	89 83       	std	Y+1, r24	; 0x01
    6a94:	89 81       	ldd	r24, Y+1	; 0x01
    6a96:	9a 81       	ldd	r25, Y+2	; 0x02
    6a98:	01 97       	sbiw	r24, 0x01	; 1
    6a9a:	f1 f7       	brne	.-4      	; 0x6a98 <DoorControl+0x22a>
    6a9c:	9a 83       	std	Y+2, r25	; 0x02
    6a9e:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
		}

	}
    6aa0:	6e 96       	adiw	r28, 0x1e	; 30
    6aa2:	0f b6       	in	r0, 0x3f	; 63
    6aa4:	f8 94       	cli
    6aa6:	de bf       	out	0x3e, r29	; 62
    6aa8:	0f be       	out	0x3f, r0	; 63
    6aaa:	cd bf       	out	0x3d, r28	; 61
    6aac:	cf 91       	pop	r28
    6aae:	df 91       	pop	r29
    6ab0:	08 95       	ret

00006ab2 <LedsControl>:
	void LedsControl(u8* Copy_u8State,u8 Copy_u8NumOfLed){
    6ab2:	df 93       	push	r29
    6ab4:	cf 93       	push	r28
    6ab6:	cd b7       	in	r28, 0x3d	; 61
    6ab8:	de b7       	in	r29, 0x3e	; 62
    6aba:	63 97       	sbiw	r28, 0x13	; 19
    6abc:	0f b6       	in	r0, 0x3f	; 63
    6abe:	f8 94       	cli
    6ac0:	de bf       	out	0x3e, r29	; 62
    6ac2:	0f be       	out	0x3f, r0	; 63
    6ac4:	cd bf       	out	0x3d, r28	; 61
    6ac6:	98 8b       	std	Y+16, r25	; 0x10
    6ac8:	8f 87       	std	Y+15, r24	; 0x0f
    6aca:	69 8b       	std	Y+17, r22	; 0x11
		LCD_enuClearScreen();
    6acc:	0e 94 df 1c 	call	0x39be	; 0x39be <LCD_enuClearScreen>
          switch(Copy_u8NumOfLed){
    6ad0:	89 89       	ldd	r24, Y+17	; 0x11
    6ad2:	28 2f       	mov	r18, r24
    6ad4:	30 e0       	ldi	r19, 0x00	; 0
    6ad6:	3b 8b       	std	Y+19, r19	; 0x13
    6ad8:	2a 8b       	std	Y+18, r18	; 0x12
    6ada:	8a 89       	ldd	r24, Y+18	; 0x12
    6adc:	9b 89       	ldd	r25, Y+19	; 0x13
    6ade:	83 33       	cpi	r24, 0x33	; 51
    6ae0:	91 05       	cpc	r25, r1
    6ae2:	09 f4       	brne	.+2      	; 0x6ae6 <LedsControl+0x34>
    6ae4:	65 c0       	rjmp	.+202    	; 0x6bb0 <LedsControl+0xfe>
    6ae6:	2a 89       	ldd	r18, Y+18	; 0x12
    6ae8:	3b 89       	ldd	r19, Y+19	; 0x13
    6aea:	24 33       	cpi	r18, 0x34	; 52
    6aec:	31 05       	cpc	r19, r1
    6aee:	5c f4       	brge	.+22     	; 0x6b06 <LedsControl+0x54>
    6af0:	8a 89       	ldd	r24, Y+18	; 0x12
    6af2:	9b 89       	ldd	r25, Y+19	; 0x13
    6af4:	81 33       	cpi	r24, 0x31	; 49
    6af6:	91 05       	cpc	r25, r1
    6af8:	99 f0       	breq	.+38     	; 0x6b20 <LedsControl+0x6e>
    6afa:	2a 89       	ldd	r18, Y+18	; 0x12
    6afc:	3b 89       	ldd	r19, Y+19	; 0x13
    6afe:	22 33       	cpi	r18, 0x32	; 50
    6b00:	31 05       	cpc	r19, r1
    6b02:	79 f1       	breq	.+94     	; 0x6b62 <LedsControl+0xb0>
    6b04:	c9 c0       	rjmp	.+402    	; 0x6c98 <LedsControl+0x1e6>
    6b06:	8a 89       	ldd	r24, Y+18	; 0x12
    6b08:	9b 89       	ldd	r25, Y+19	; 0x13
    6b0a:	84 33       	cpi	r24, 0x34	; 52
    6b0c:	91 05       	cpc	r25, r1
    6b0e:	09 f4       	brne	.+2      	; 0x6b12 <LedsControl+0x60>
    6b10:	76 c0       	rjmp	.+236    	; 0x6bfe <LedsControl+0x14c>
    6b12:	2a 89       	ldd	r18, Y+18	; 0x12
    6b14:	3b 89       	ldd	r19, Y+19	; 0x13
    6b16:	25 33       	cpi	r18, 0x35	; 53
    6b18:	31 05       	cpc	r19, r1
    6b1a:	09 f4       	brne	.+2      	; 0x6b1e <LedsControl+0x6c>
    6b1c:	97 c0       	rjmp	.+302    	; 0x6c4c <LedsControl+0x19a>
    6b1e:	bc c0       	rjmp	.+376    	; 0x6c98 <LedsControl+0x1e6>
          case'1':
        	  RELAY_enuToggle(LED_1);
    6b20:	81 e0       	ldi	r24, 0x01	; 1
    6b22:	0e 94 98 18 	call	0x3130	; 0x3130 <RELAY_enuToggle>
        	  if(Copy_u8State[0]==0){
    6b26:	ef 85       	ldd	r30, Y+15	; 0x0f
    6b28:	f8 89       	ldd	r31, Y+16	; 0x10
    6b2a:	80 81       	ld	r24, Z
    6b2c:	88 23       	and	r24, r24
    6b2e:	69 f4       	brne	.+26     	; 0x6b4a <LedsControl+0x98>
        		  Copy_u8State[0]=1;
    6b30:	ef 85       	ldd	r30, Y+15	; 0x0f
    6b32:	f8 89       	ldd	r31, Y+16	; 0x10
    6b34:	81 e0       	ldi	r24, 0x01	; 1
    6b36:	80 83       	st	Z, r24
        		  LCD_enuWriteString("LED1 ON");
    6b38:	82 e0       	ldi	r24, 0x02	; 2
    6b3a:	95 e0       	ldi	r25, 0x05	; 5
    6b3c:	0e 94 b9 1c 	call	0x3972	; 0x3972 <LCD_enuWriteString>
        		  HC05_enuSendString("LED1 ON\r\n");
    6b40:	8a e0       	ldi	r24, 0x0A	; 10
    6b42:	95 e0       	ldi	r25, 0x05	; 5
    6b44:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
    6b48:	a7 c0       	rjmp	.+334    	; 0x6c98 <LedsControl+0x1e6>
        	  }
        	  else{
        		  Copy_u8State[0]=0;
    6b4a:	ef 85       	ldd	r30, Y+15	; 0x0f
    6b4c:	f8 89       	ldd	r31, Y+16	; 0x10
    6b4e:	10 82       	st	Z, r1
        		  LCD_enuWriteString("LED1 OFF");
    6b50:	84 e1       	ldi	r24, 0x14	; 20
    6b52:	95 e0       	ldi	r25, 0x05	; 5
    6b54:	0e 94 b9 1c 	call	0x3972	; 0x3972 <LCD_enuWriteString>
        		  HC05_enuSendString("LED1 OFF\r\n");
    6b58:	8d e1       	ldi	r24, 0x1D	; 29
    6b5a:	95 e0       	ldi	r25, 0x05	; 5
    6b5c:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
    6b60:	9b c0       	rjmp	.+310    	; 0x6c98 <LedsControl+0x1e6>
        	  }
        	  break;
        	 case'2':
        	  RELAY_enuToggle(LED_2);
    6b62:	82 e0       	ldi	r24, 0x02	; 2
    6b64:	0e 94 98 18 	call	0x3130	; 0x3130 <RELAY_enuToggle>
        	  if(Copy_u8State[1]==0){
    6b68:	8f 85       	ldd	r24, Y+15	; 0x0f
    6b6a:	98 89       	ldd	r25, Y+16	; 0x10
    6b6c:	fc 01       	movw	r30, r24
    6b6e:	31 96       	adiw	r30, 0x01	; 1
    6b70:	80 81       	ld	r24, Z
    6b72:	88 23       	and	r24, r24
    6b74:	79 f4       	brne	.+30     	; 0x6b94 <LedsControl+0xe2>
        	     Copy_u8State[1]=1;
    6b76:	8f 85       	ldd	r24, Y+15	; 0x0f
    6b78:	98 89       	ldd	r25, Y+16	; 0x10
    6b7a:	fc 01       	movw	r30, r24
    6b7c:	31 96       	adiw	r30, 0x01	; 1
    6b7e:	81 e0       	ldi	r24, 0x01	; 1
    6b80:	80 83       	st	Z, r24
       		  LCD_enuWriteString("LED2 ON");
    6b82:	88 e2       	ldi	r24, 0x28	; 40
    6b84:	95 e0       	ldi	r25, 0x05	; 5
    6b86:	0e 94 b9 1c 	call	0x3972	; 0x3972 <LCD_enuWriteString>
       		  HC05_enuSendString("LED2 ON\r\n");
    6b8a:	80 e3       	ldi	r24, 0x30	; 48
    6b8c:	95 e0       	ldi	r25, 0x05	; 5
    6b8e:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
    6b92:	82 c0       	rjmp	.+260    	; 0x6c98 <LedsControl+0x1e6>
        	  }
        	   else{
        	     Copy_u8State[1]=0;
    6b94:	8f 85       	ldd	r24, Y+15	; 0x0f
    6b96:	98 89       	ldd	r25, Y+16	; 0x10
    6b98:	fc 01       	movw	r30, r24
    6b9a:	31 96       	adiw	r30, 0x01	; 1
    6b9c:	10 82       	st	Z, r1
       		  LCD_enuWriteString("LED2 OFF");
    6b9e:	8a e3       	ldi	r24, 0x3A	; 58
    6ba0:	95 e0       	ldi	r25, 0x05	; 5
    6ba2:	0e 94 b9 1c 	call	0x3972	; 0x3972 <LCD_enuWriteString>
       		  HC05_enuSendString("LED2 OFF\r\n");
    6ba6:	83 e4       	ldi	r24, 0x43	; 67
    6ba8:	95 e0       	ldi	r25, 0x05	; 5
    6baa:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
    6bae:	74 c0       	rjmp	.+232    	; 0x6c98 <LedsControl+0x1e6>
        	   }
        	          	  break;
             case'3':
           	  RELAY_enuToggle(LED_3);
    6bb0:	83 e0       	ldi	r24, 0x03	; 3
    6bb2:	0e 94 98 18 	call	0x3130	; 0x3130 <RELAY_enuToggle>
           	  if(Copy_u8State[2]==0){
    6bb6:	8f 85       	ldd	r24, Y+15	; 0x0f
    6bb8:	98 89       	ldd	r25, Y+16	; 0x10
    6bba:	fc 01       	movw	r30, r24
    6bbc:	32 96       	adiw	r30, 0x02	; 2
    6bbe:	80 81       	ld	r24, Z
    6bc0:	88 23       	and	r24, r24
    6bc2:	79 f4       	brne	.+30     	; 0x6be2 <LedsControl+0x130>
           		  Copy_u8State[2]=1;
    6bc4:	8f 85       	ldd	r24, Y+15	; 0x0f
    6bc6:	98 89       	ldd	r25, Y+16	; 0x10
    6bc8:	fc 01       	movw	r30, r24
    6bca:	32 96       	adiw	r30, 0x02	; 2
    6bcc:	81 e0       	ldi	r24, 0x01	; 1
    6bce:	80 83       	st	Z, r24
        		  LCD_enuWriteString("LED3 ON");
    6bd0:	8e e4       	ldi	r24, 0x4E	; 78
    6bd2:	95 e0       	ldi	r25, 0x05	; 5
    6bd4:	0e 94 b9 1c 	call	0x3972	; 0x3972 <LCD_enuWriteString>
        		  HC05_enuSendString("LED3 ON\r\n");
    6bd8:	86 e5       	ldi	r24, 0x56	; 86
    6bda:	95 e0       	ldi	r25, 0x05	; 5
    6bdc:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
    6be0:	5b c0       	rjmp	.+182    	; 0x6c98 <LedsControl+0x1e6>
           	  }
           	  else{
           		  Copy_u8State[2]=0;
    6be2:	8f 85       	ldd	r24, Y+15	; 0x0f
    6be4:	98 89       	ldd	r25, Y+16	; 0x10
    6be6:	fc 01       	movw	r30, r24
    6be8:	32 96       	adiw	r30, 0x02	; 2
    6bea:	10 82       	st	Z, r1
        		  LCD_enuWriteString("LED3 OFF");
    6bec:	80 e6       	ldi	r24, 0x60	; 96
    6bee:	95 e0       	ldi	r25, 0x05	; 5
    6bf0:	0e 94 b9 1c 	call	0x3972	; 0x3972 <LCD_enuWriteString>
        		  HC05_enuSendString("LED3 OFF\r\n");
    6bf4:	89 e6       	ldi	r24, 0x69	; 105
    6bf6:	95 e0       	ldi	r25, 0x05	; 5
    6bf8:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
    6bfc:	4d c0       	rjmp	.+154    	; 0x6c98 <LedsControl+0x1e6>
           	  }
           	       break;
             case'4':
           	  RELAY_enuToggle(LED_4);
    6bfe:	84 e0       	ldi	r24, 0x04	; 4
    6c00:	0e 94 98 18 	call	0x3130	; 0x3130 <RELAY_enuToggle>
           	  if(Copy_u8State[3]==0){
    6c04:	8f 85       	ldd	r24, Y+15	; 0x0f
    6c06:	98 89       	ldd	r25, Y+16	; 0x10
    6c08:	fc 01       	movw	r30, r24
    6c0a:	33 96       	adiw	r30, 0x03	; 3
    6c0c:	80 81       	ld	r24, Z
    6c0e:	88 23       	and	r24, r24
    6c10:	79 f4       	brne	.+30     	; 0x6c30 <LedsControl+0x17e>
           		  Copy_u8State[3]=1;
    6c12:	8f 85       	ldd	r24, Y+15	; 0x0f
    6c14:	98 89       	ldd	r25, Y+16	; 0x10
    6c16:	fc 01       	movw	r30, r24
    6c18:	33 96       	adiw	r30, 0x03	; 3
    6c1a:	81 e0       	ldi	r24, 0x01	; 1
    6c1c:	80 83       	st	Z, r24
        		  LCD_enuWriteString("LED4 ON");
    6c1e:	84 e7       	ldi	r24, 0x74	; 116
    6c20:	95 e0       	ldi	r25, 0x05	; 5
    6c22:	0e 94 b9 1c 	call	0x3972	; 0x3972 <LCD_enuWriteString>
        		  HC05_enuSendString("LED4 ON\r\n");
    6c26:	8c e7       	ldi	r24, 0x7C	; 124
    6c28:	95 e0       	ldi	r25, 0x05	; 5
    6c2a:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
    6c2e:	34 c0       	rjmp	.+104    	; 0x6c98 <LedsControl+0x1e6>
           	  }
           	  else{
           		  Copy_u8State[3]=0;
    6c30:	8f 85       	ldd	r24, Y+15	; 0x0f
    6c32:	98 89       	ldd	r25, Y+16	; 0x10
    6c34:	fc 01       	movw	r30, r24
    6c36:	33 96       	adiw	r30, 0x03	; 3
    6c38:	10 82       	st	Z, r1
        		  LCD_enuWriteString("LED4 OFF");
    6c3a:	86 e8       	ldi	r24, 0x86	; 134
    6c3c:	95 e0       	ldi	r25, 0x05	; 5
    6c3e:	0e 94 b9 1c 	call	0x3972	; 0x3972 <LCD_enuWriteString>
        		  HC05_enuSendString("LED4 OFF\r\n");
    6c42:	8f e8       	ldi	r24, 0x8F	; 143
    6c44:	95 e0       	ldi	r25, 0x05	; 5
    6c46:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
    6c4a:	26 c0       	rjmp	.+76     	; 0x6c98 <LedsControl+0x1e6>
           	  }
           	  break;
             case'5':
           	  RELAY_enuToggle(LED_5);
    6c4c:	85 e0       	ldi	r24, 0x05	; 5
    6c4e:	0e 94 98 18 	call	0x3130	; 0x3130 <RELAY_enuToggle>
           	  if(Copy_u8State[4]==0){
    6c52:	8f 85       	ldd	r24, Y+15	; 0x0f
    6c54:	98 89       	ldd	r25, Y+16	; 0x10
    6c56:	fc 01       	movw	r30, r24
    6c58:	34 96       	adiw	r30, 0x04	; 4
    6c5a:	80 81       	ld	r24, Z
    6c5c:	88 23       	and	r24, r24
    6c5e:	79 f4       	brne	.+30     	; 0x6c7e <LedsControl+0x1cc>
           		  Copy_u8State[4]=1;
    6c60:	8f 85       	ldd	r24, Y+15	; 0x0f
    6c62:	98 89       	ldd	r25, Y+16	; 0x10
    6c64:	fc 01       	movw	r30, r24
    6c66:	34 96       	adiw	r30, 0x04	; 4
    6c68:	81 e0       	ldi	r24, 0x01	; 1
    6c6a:	80 83       	st	Z, r24
        		  LCD_enuWriteString("LED5 ON");
    6c6c:	8a e9       	ldi	r24, 0x9A	; 154
    6c6e:	95 e0       	ldi	r25, 0x05	; 5
    6c70:	0e 94 b9 1c 	call	0x3972	; 0x3972 <LCD_enuWriteString>
        		  HC05_enuSendString("LED5 ON\r\n");
    6c74:	82 ea       	ldi	r24, 0xA2	; 162
    6c76:	95 e0       	ldi	r25, 0x05	; 5
    6c78:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
    6c7c:	0d c0       	rjmp	.+26     	; 0x6c98 <LedsControl+0x1e6>
           	  }
           	  else{
           		  Copy_u8State[4]=0;
    6c7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    6c80:	98 89       	ldd	r25, Y+16	; 0x10
    6c82:	fc 01       	movw	r30, r24
    6c84:	34 96       	adiw	r30, 0x04	; 4
    6c86:	10 82       	st	Z, r1
        		  LCD_enuWriteString("LED5 OFF");
    6c88:	8c ea       	ldi	r24, 0xAC	; 172
    6c8a:	95 e0       	ldi	r25, 0x05	; 5
    6c8c:	0e 94 b9 1c 	call	0x3972	; 0x3972 <LCD_enuWriteString>
        		  HC05_enuSendString("LED5 OFF\r\n");
    6c90:	85 eb       	ldi	r24, 0xB5	; 181
    6c92:	95 e0       	ldi	r25, 0x05	; 5
    6c94:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
    6c98:	80 e0       	ldi	r24, 0x00	; 0
    6c9a:	90 e0       	ldi	r25, 0x00	; 0
    6c9c:	aa ef       	ldi	r26, 0xFA	; 250
    6c9e:	b3 e4       	ldi	r27, 0x43	; 67
    6ca0:	8b 87       	std	Y+11, r24	; 0x0b
    6ca2:	9c 87       	std	Y+12, r25	; 0x0c
    6ca4:	ad 87       	std	Y+13, r26	; 0x0d
    6ca6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6ca8:	6b 85       	ldd	r22, Y+11	; 0x0b
    6caa:	7c 85       	ldd	r23, Y+12	; 0x0c
    6cac:	8d 85       	ldd	r24, Y+13	; 0x0d
    6cae:	9e 85       	ldd	r25, Y+14	; 0x0e
    6cb0:	20 e0       	ldi	r18, 0x00	; 0
    6cb2:	30 e0       	ldi	r19, 0x00	; 0
    6cb4:	4a e7       	ldi	r20, 0x7A	; 122
    6cb6:	55 e4       	ldi	r21, 0x45	; 69
    6cb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6cbc:	dc 01       	movw	r26, r24
    6cbe:	cb 01       	movw	r24, r22
    6cc0:	8f 83       	std	Y+7, r24	; 0x07
    6cc2:	98 87       	std	Y+8, r25	; 0x08
    6cc4:	a9 87       	std	Y+9, r26	; 0x09
    6cc6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6cc8:	6f 81       	ldd	r22, Y+7	; 0x07
    6cca:	78 85       	ldd	r23, Y+8	; 0x08
    6ccc:	89 85       	ldd	r24, Y+9	; 0x09
    6cce:	9a 85       	ldd	r25, Y+10	; 0x0a
    6cd0:	20 e0       	ldi	r18, 0x00	; 0
    6cd2:	30 e0       	ldi	r19, 0x00	; 0
    6cd4:	40 e8       	ldi	r20, 0x80	; 128
    6cd6:	5f e3       	ldi	r21, 0x3F	; 63
    6cd8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6cdc:	88 23       	and	r24, r24
    6cde:	2c f4       	brge	.+10     	; 0x6cea <LedsControl+0x238>
		__ticks = 1;
    6ce0:	81 e0       	ldi	r24, 0x01	; 1
    6ce2:	90 e0       	ldi	r25, 0x00	; 0
    6ce4:	9e 83       	std	Y+6, r25	; 0x06
    6ce6:	8d 83       	std	Y+5, r24	; 0x05
    6ce8:	3f c0       	rjmp	.+126    	; 0x6d68 <LedsControl+0x2b6>
	else if (__tmp > 65535)
    6cea:	6f 81       	ldd	r22, Y+7	; 0x07
    6cec:	78 85       	ldd	r23, Y+8	; 0x08
    6cee:	89 85       	ldd	r24, Y+9	; 0x09
    6cf0:	9a 85       	ldd	r25, Y+10	; 0x0a
    6cf2:	20 e0       	ldi	r18, 0x00	; 0
    6cf4:	3f ef       	ldi	r19, 0xFF	; 255
    6cf6:	4f e7       	ldi	r20, 0x7F	; 127
    6cf8:	57 e4       	ldi	r21, 0x47	; 71
    6cfa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6cfe:	18 16       	cp	r1, r24
    6d00:	4c f5       	brge	.+82     	; 0x6d54 <LedsControl+0x2a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6d02:	6b 85       	ldd	r22, Y+11	; 0x0b
    6d04:	7c 85       	ldd	r23, Y+12	; 0x0c
    6d06:	8d 85       	ldd	r24, Y+13	; 0x0d
    6d08:	9e 85       	ldd	r25, Y+14	; 0x0e
    6d0a:	20 e0       	ldi	r18, 0x00	; 0
    6d0c:	30 e0       	ldi	r19, 0x00	; 0
    6d0e:	40 e2       	ldi	r20, 0x20	; 32
    6d10:	51 e4       	ldi	r21, 0x41	; 65
    6d12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6d16:	dc 01       	movw	r26, r24
    6d18:	cb 01       	movw	r24, r22
    6d1a:	bc 01       	movw	r22, r24
    6d1c:	cd 01       	movw	r24, r26
    6d1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6d22:	dc 01       	movw	r26, r24
    6d24:	cb 01       	movw	r24, r22
    6d26:	9e 83       	std	Y+6, r25	; 0x06
    6d28:	8d 83       	std	Y+5, r24	; 0x05
    6d2a:	0f c0       	rjmp	.+30     	; 0x6d4a <LedsControl+0x298>
    6d2c:	80 e9       	ldi	r24, 0x90	; 144
    6d2e:	91 e0       	ldi	r25, 0x01	; 1
    6d30:	9c 83       	std	Y+4, r25	; 0x04
    6d32:	8b 83       	std	Y+3, r24	; 0x03
    6d34:	8b 81       	ldd	r24, Y+3	; 0x03
    6d36:	9c 81       	ldd	r25, Y+4	; 0x04
    6d38:	01 97       	sbiw	r24, 0x01	; 1
    6d3a:	f1 f7       	brne	.-4      	; 0x6d38 <LedsControl+0x286>
    6d3c:	9c 83       	std	Y+4, r25	; 0x04
    6d3e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6d40:	8d 81       	ldd	r24, Y+5	; 0x05
    6d42:	9e 81       	ldd	r25, Y+6	; 0x06
    6d44:	01 97       	sbiw	r24, 0x01	; 1
    6d46:	9e 83       	std	Y+6, r25	; 0x06
    6d48:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6d4a:	8d 81       	ldd	r24, Y+5	; 0x05
    6d4c:	9e 81       	ldd	r25, Y+6	; 0x06
    6d4e:	00 97       	sbiw	r24, 0x00	; 0
    6d50:	69 f7       	brne	.-38     	; 0x6d2c <LedsControl+0x27a>
    6d52:	14 c0       	rjmp	.+40     	; 0x6d7c <LedsControl+0x2ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6d54:	6f 81       	ldd	r22, Y+7	; 0x07
    6d56:	78 85       	ldd	r23, Y+8	; 0x08
    6d58:	89 85       	ldd	r24, Y+9	; 0x09
    6d5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    6d5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6d60:	dc 01       	movw	r26, r24
    6d62:	cb 01       	movw	r24, r22
    6d64:	9e 83       	std	Y+6, r25	; 0x06
    6d66:	8d 83       	std	Y+5, r24	; 0x05
    6d68:	8d 81       	ldd	r24, Y+5	; 0x05
    6d6a:	9e 81       	ldd	r25, Y+6	; 0x06
    6d6c:	9a 83       	std	Y+2, r25	; 0x02
    6d6e:	89 83       	std	Y+1, r24	; 0x01
    6d70:	89 81       	ldd	r24, Y+1	; 0x01
    6d72:	9a 81       	ldd	r25, Y+2	; 0x02
    6d74:	01 97       	sbiw	r24, 0x01	; 1
    6d76:	f1 f7       	brne	.-4      	; 0x6d74 <LedsControl+0x2c2>
    6d78:	9a 83       	std	Y+2, r25	; 0x02
    6d7a:	89 83       	std	Y+1, r24	; 0x01
           	  break;

          }
          _delay_ms(500);

	}
    6d7c:	63 96       	adiw	r28, 0x13	; 19
    6d7e:	0f b6       	in	r0, 0x3f	; 63
    6d80:	f8 94       	cli
    6d82:	de bf       	out	0x3e, r29	; 62
    6d84:	0f be       	out	0x3f, r0	; 63
    6d86:	cd bf       	out	0x3d, r28	; 61
    6d88:	cf 91       	pop	r28
    6d8a:	df 91       	pop	r29
    6d8c:	08 95       	ret

00006d8e <DimmmerControl>:
	void DimmmerControl(u8 *Copy_u8State,u8 copy_u8Intensity){
    6d8e:	df 93       	push	r29
    6d90:	cf 93       	push	r28
    6d92:	cd b7       	in	r28, 0x3d	; 61
    6d94:	de b7       	in	r29, 0x3e	; 62
    6d96:	63 97       	sbiw	r28, 0x13	; 19
    6d98:	0f b6       	in	r0, 0x3f	; 63
    6d9a:	f8 94       	cli
    6d9c:	de bf       	out	0x3e, r29	; 62
    6d9e:	0f be       	out	0x3f, r0	; 63
    6da0:	cd bf       	out	0x3d, r28	; 61
    6da2:	9a 8b       	std	Y+18, r25	; 0x12
    6da4:	89 8b       	std	Y+17, r24	; 0x11
    6da6:	6b 8b       	std	Y+19, r22	; 0x13
			LCD_enuClearScreen();
    6da8:	0e 94 df 1c 	call	0x39be	; 0x39be <LCD_enuClearScreen>
			//LCD_enuWritInteger(copy_u8Intensity);
	        if(copy_u8Intensity=='0'){
    6dac:	8b 89       	ldd	r24, Y+19	; 0x13
    6dae:	80 33       	cpi	r24, 0x30	; 48
    6db0:	39 f4       	brne	.+14     	; 0x6dc0 <DimmmerControl+0x32>
	        	DIMMER_LAMP_enuSetIntensity(0);
    6db2:	80 e0       	ldi	r24, 0x00	; 0
    6db4:	0e 94 48 21 	call	0x4290	; 0x4290 <DIMMER_LAMP_enuSetIntensity>
	        	*Copy_u8State=0;
    6db8:	e9 89       	ldd	r30, Y+17	; 0x11
    6dba:	fa 89       	ldd	r31, Y+18	; 0x12
    6dbc:	10 82       	st	Z, r1
    6dbe:	a9 c0       	rjmp	.+338    	; 0x6f12 <DimmmerControl+0x184>
	        }
	        else {
				DIMMER_LAMP_enuInit();
    6dc0:	0e 94 37 21 	call	0x426e	; 0x426e <DIMMER_LAMP_enuInit>

			u16 intensity=copy_u8Intensity;
    6dc4:	8b 89       	ldd	r24, Y+19	; 0x13
    6dc6:	88 2f       	mov	r24, r24
    6dc8:	90 e0       	ldi	r25, 0x00	; 0
    6dca:	98 8b       	std	Y+16, r25	; 0x10
    6dcc:	8f 87       	std	Y+15, r24	; 0x0f
			intensity-=48;
    6dce:	8f 85       	ldd	r24, Y+15	; 0x0f
    6dd0:	98 89       	ldd	r25, Y+16	; 0x10
    6dd2:	c0 97       	sbiw	r24, 0x30	; 48
    6dd4:	98 8b       	std	Y+16, r25	; 0x10
    6dd6:	8f 87       	std	Y+15, r24	; 0x0f
			intensity*=100;
    6dd8:	2f 85       	ldd	r18, Y+15	; 0x0f
    6dda:	38 89       	ldd	r19, Y+16	; 0x10
    6ddc:	84 e6       	ldi	r24, 0x64	; 100
    6dde:	90 e0       	ldi	r25, 0x00	; 0
    6de0:	ac 01       	movw	r20, r24
    6de2:	24 9f       	mul	r18, r20
    6de4:	c0 01       	movw	r24, r0
    6de6:	25 9f       	mul	r18, r21
    6de8:	90 0d       	add	r25, r0
    6dea:	34 9f       	mul	r19, r20
    6dec:	90 0d       	add	r25, r0
    6dee:	11 24       	eor	r1, r1
    6df0:	98 8b       	std	Y+16, r25	; 0x10
    6df2:	8f 87       	std	Y+15, r24	; 0x0f
			intensity/=9;
    6df4:	8f 85       	ldd	r24, Y+15	; 0x0f
    6df6:	98 89       	ldd	r25, Y+16	; 0x10
    6df8:	29 e0       	ldi	r18, 0x09	; 9
    6dfa:	30 e0       	ldi	r19, 0x00	; 0
    6dfc:	b9 01       	movw	r22, r18
    6dfe:	0e 94 4e 3a 	call	0x749c	; 0x749c <__udivmodhi4>
    6e02:	cb 01       	movw	r24, r22
    6e04:	98 8b       	std	Y+16, r25	; 0x10
    6e06:	8f 87       	std	Y+15, r24	; 0x0f

			DIMMER_LAMP_enuSetIntensity(intensity);
    6e08:	8f 85       	ldd	r24, Y+15	; 0x0f
    6e0a:	0e 94 48 21 	call	0x4290	; 0x4290 <DIMMER_LAMP_enuSetIntensity>
		    DIMMER_LAMP_enuStart();
    6e0e:	0e 94 5f 21 	call	0x42be	; 0x42be <DIMMER_LAMP_enuStart>
		    LCD_enuWriteString("DIMMER is On");
    6e12:	80 ec       	ldi	r24, 0xC0	; 192
    6e14:	95 e0       	ldi	r25, 0x05	; 5
    6e16:	0e 94 b9 1c 	call	0x3972	; 0x3972 <LCD_enuWriteString>
		    HC05_enuSendString("DIMMER IS ON\r\n");
    6e1a:	8d ec       	ldi	r24, 0xCD	; 205
    6e1c:	95 e0       	ldi	r25, 0x05	; 5
    6e1e:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
		    DIMMER_LAMP_enuStart();
    6e22:	0e 94 5f 21 	call	0x42be	; 0x42be <DIMMER_LAMP_enuStart>
    6e26:	80 e0       	ldi	r24, 0x00	; 0
    6e28:	90 e0       	ldi	r25, 0x00	; 0
    6e2a:	aa ef       	ldi	r26, 0xFA	; 250
    6e2c:	b3 e4       	ldi	r27, 0x43	; 67
    6e2e:	8b 87       	std	Y+11, r24	; 0x0b
    6e30:	9c 87       	std	Y+12, r25	; 0x0c
    6e32:	ad 87       	std	Y+13, r26	; 0x0d
    6e34:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6e36:	6b 85       	ldd	r22, Y+11	; 0x0b
    6e38:	7c 85       	ldd	r23, Y+12	; 0x0c
    6e3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    6e3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    6e3e:	20 e0       	ldi	r18, 0x00	; 0
    6e40:	30 e0       	ldi	r19, 0x00	; 0
    6e42:	4a e7       	ldi	r20, 0x7A	; 122
    6e44:	55 e4       	ldi	r21, 0x45	; 69
    6e46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6e4a:	dc 01       	movw	r26, r24
    6e4c:	cb 01       	movw	r24, r22
    6e4e:	8f 83       	std	Y+7, r24	; 0x07
    6e50:	98 87       	std	Y+8, r25	; 0x08
    6e52:	a9 87       	std	Y+9, r26	; 0x09
    6e54:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6e56:	6f 81       	ldd	r22, Y+7	; 0x07
    6e58:	78 85       	ldd	r23, Y+8	; 0x08
    6e5a:	89 85       	ldd	r24, Y+9	; 0x09
    6e5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    6e5e:	20 e0       	ldi	r18, 0x00	; 0
    6e60:	30 e0       	ldi	r19, 0x00	; 0
    6e62:	40 e8       	ldi	r20, 0x80	; 128
    6e64:	5f e3       	ldi	r21, 0x3F	; 63
    6e66:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6e6a:	88 23       	and	r24, r24
    6e6c:	2c f4       	brge	.+10     	; 0x6e78 <DimmmerControl+0xea>
		__ticks = 1;
    6e6e:	81 e0       	ldi	r24, 0x01	; 1
    6e70:	90 e0       	ldi	r25, 0x00	; 0
    6e72:	9e 83       	std	Y+6, r25	; 0x06
    6e74:	8d 83       	std	Y+5, r24	; 0x05
    6e76:	3f c0       	rjmp	.+126    	; 0x6ef6 <DimmmerControl+0x168>
	else if (__tmp > 65535)
    6e78:	6f 81       	ldd	r22, Y+7	; 0x07
    6e7a:	78 85       	ldd	r23, Y+8	; 0x08
    6e7c:	89 85       	ldd	r24, Y+9	; 0x09
    6e7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6e80:	20 e0       	ldi	r18, 0x00	; 0
    6e82:	3f ef       	ldi	r19, 0xFF	; 255
    6e84:	4f e7       	ldi	r20, 0x7F	; 127
    6e86:	57 e4       	ldi	r21, 0x47	; 71
    6e88:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6e8c:	18 16       	cp	r1, r24
    6e8e:	4c f5       	brge	.+82     	; 0x6ee2 <DimmmerControl+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6e90:	6b 85       	ldd	r22, Y+11	; 0x0b
    6e92:	7c 85       	ldd	r23, Y+12	; 0x0c
    6e94:	8d 85       	ldd	r24, Y+13	; 0x0d
    6e96:	9e 85       	ldd	r25, Y+14	; 0x0e
    6e98:	20 e0       	ldi	r18, 0x00	; 0
    6e9a:	30 e0       	ldi	r19, 0x00	; 0
    6e9c:	40 e2       	ldi	r20, 0x20	; 32
    6e9e:	51 e4       	ldi	r21, 0x41	; 65
    6ea0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6ea4:	dc 01       	movw	r26, r24
    6ea6:	cb 01       	movw	r24, r22
    6ea8:	bc 01       	movw	r22, r24
    6eaa:	cd 01       	movw	r24, r26
    6eac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6eb0:	dc 01       	movw	r26, r24
    6eb2:	cb 01       	movw	r24, r22
    6eb4:	9e 83       	std	Y+6, r25	; 0x06
    6eb6:	8d 83       	std	Y+5, r24	; 0x05
    6eb8:	0f c0       	rjmp	.+30     	; 0x6ed8 <DimmmerControl+0x14a>
    6eba:	80 e9       	ldi	r24, 0x90	; 144
    6ebc:	91 e0       	ldi	r25, 0x01	; 1
    6ebe:	9c 83       	std	Y+4, r25	; 0x04
    6ec0:	8b 83       	std	Y+3, r24	; 0x03
    6ec2:	8b 81       	ldd	r24, Y+3	; 0x03
    6ec4:	9c 81       	ldd	r25, Y+4	; 0x04
    6ec6:	01 97       	sbiw	r24, 0x01	; 1
    6ec8:	f1 f7       	brne	.-4      	; 0x6ec6 <DimmmerControl+0x138>
    6eca:	9c 83       	std	Y+4, r25	; 0x04
    6ecc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6ece:	8d 81       	ldd	r24, Y+5	; 0x05
    6ed0:	9e 81       	ldd	r25, Y+6	; 0x06
    6ed2:	01 97       	sbiw	r24, 0x01	; 1
    6ed4:	9e 83       	std	Y+6, r25	; 0x06
    6ed6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6ed8:	8d 81       	ldd	r24, Y+5	; 0x05
    6eda:	9e 81       	ldd	r25, Y+6	; 0x06
    6edc:	00 97       	sbiw	r24, 0x00	; 0
    6ede:	69 f7       	brne	.-38     	; 0x6eba <DimmmerControl+0x12c>
    6ee0:	14 c0       	rjmp	.+40     	; 0x6f0a <DimmmerControl+0x17c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6ee2:	6f 81       	ldd	r22, Y+7	; 0x07
    6ee4:	78 85       	ldd	r23, Y+8	; 0x08
    6ee6:	89 85       	ldd	r24, Y+9	; 0x09
    6ee8:	9a 85       	ldd	r25, Y+10	; 0x0a
    6eea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6eee:	dc 01       	movw	r26, r24
    6ef0:	cb 01       	movw	r24, r22
    6ef2:	9e 83       	std	Y+6, r25	; 0x06
    6ef4:	8d 83       	std	Y+5, r24	; 0x05
    6ef6:	8d 81       	ldd	r24, Y+5	; 0x05
    6ef8:	9e 81       	ldd	r25, Y+6	; 0x06
    6efa:	9a 83       	std	Y+2, r25	; 0x02
    6efc:	89 83       	std	Y+1, r24	; 0x01
    6efe:	89 81       	ldd	r24, Y+1	; 0x01
    6f00:	9a 81       	ldd	r25, Y+2	; 0x02
    6f02:	01 97       	sbiw	r24, 0x01	; 1
    6f04:	f1 f7       	brne	.-4      	; 0x6f02 <DimmmerControl+0x174>
    6f06:	9a 83       	std	Y+2, r25	; 0x02
    6f08:	89 83       	std	Y+1, r24	; 0x01
		    _delay_ms(500);
		    *Copy_u8State=1;
    6f0a:	e9 89       	ldd	r30, Y+17	; 0x11
    6f0c:	fa 89       	ldd	r31, Y+18	; 0x12
    6f0e:	81 e0       	ldi	r24, 0x01	; 1
    6f10:	80 83       	st	Z, r24
			}

		}
    6f12:	63 96       	adiw	r28, 0x13	; 19
    6f14:	0f b6       	in	r0, 0x3f	; 63
    6f16:	f8 94       	cli
    6f18:	de bf       	out	0x3e, r29	; 62
    6f1a:	0f be       	out	0x3f, r0	; 63
    6f1c:	cd bf       	out	0x3d, r28	; 61
    6f1e:	cf 91       	pop	r28
    6f20:	df 91       	pop	r29
    6f22:	08 95       	ret

00006f24 <AppInit>:

	void AppInit(void){
    6f24:	df 93       	push	r29
    6f26:	cf 93       	push	r28
    6f28:	cd b7       	in	r28, 0x3d	; 61
    6f2a:	de b7       	in	r29, 0x3e	; 62
      // Num OF users
		EEPROM_enuWrite(0,0,90);
    6f2c:	80 e0       	ldi	r24, 0x00	; 0
    6f2e:	60 e0       	ldi	r22, 0x00	; 0
    6f30:	4a e5       	ldi	r20, 0x5A	; 90
    6f32:	0e 94 db 20 	call	0x41b6	; 0x41b6 <EEPROM_enuWrite>
	// Admin information
		EEPROM_enuWrite('1',0,91);
    6f36:	81 e3       	ldi	r24, 0x31	; 49
    6f38:	60 e0       	ldi	r22, 0x00	; 0
    6f3a:	4b e5       	ldi	r20, 0x5B	; 91
    6f3c:	0e 94 db 20 	call	0x41b6	; 0x41b6 <EEPROM_enuWrite>
		EEPROM_enuWrite('1',0,92);
    6f40:	81 e3       	ldi	r24, 0x31	; 49
    6f42:	60 e0       	ldi	r22, 0x00	; 0
    6f44:	4c e5       	ldi	r20, 0x5C	; 92
    6f46:	0e 94 db 20 	call	0x41b6	; 0x41b6 <EEPROM_enuWrite>
		EEPROM_enuWrite('2',0,93);
    6f4a:	82 e3       	ldi	r24, 0x32	; 50
    6f4c:	60 e0       	ldi	r22, 0x00	; 0
    6f4e:	4d e5       	ldi	r20, 0x5D	; 93
    6f50:	0e 94 db 20 	call	0x41b6	; 0x41b6 <EEPROM_enuWrite>
		EEPROM_enuWrite('2',0,94);
    6f54:	82 e3       	ldi	r24, 0x32	; 50
    6f56:	60 e0       	ldi	r22, 0x00	; 0
    6f58:	4e e5       	ldi	r20, 0x5E	; 94
    6f5a:	0e 94 db 20 	call	0x41b6	; 0x41b6 <EEPROM_enuWrite>
    //Admin Password
		EEPROM_enuWrite('1',0,95);
    6f5e:	81 e3       	ldi	r24, 0x31	; 49
    6f60:	60 e0       	ldi	r22, 0x00	; 0
    6f62:	4f e5       	ldi	r20, 0x5F	; 95
    6f64:	0e 94 db 20 	call	0x41b6	; 0x41b6 <EEPROM_enuWrite>
		EEPROM_enuWrite('2',0,96);
    6f68:	82 e3       	ldi	r24, 0x32	; 50
    6f6a:	60 e0       	ldi	r22, 0x00	; 0
    6f6c:	40 e6       	ldi	r20, 0x60	; 96
    6f6e:	0e 94 db 20 	call	0x41b6	; 0x41b6 <EEPROM_enuWrite>
		EEPROM_enuWrite('3',0,97);
    6f72:	83 e3       	ldi	r24, 0x33	; 51
    6f74:	60 e0       	ldi	r22, 0x00	; 0
    6f76:	41 e6       	ldi	r20, 0x61	; 97
    6f78:	0e 94 db 20 	call	0x41b6	; 0x41b6 <EEPROM_enuWrite>
		EEPROM_enuWrite('4',0,98);
    6f7c:	84 e3       	ldi	r24, 0x34	; 52
    6f7e:	60 e0       	ldi	r22, 0x00	; 0
    6f80:	42 e6       	ldi	r20, 0x62	; 98
    6f82:	0e 94 db 20 	call	0x41b6	; 0x41b6 <EEPROM_enuWrite>
				EEPROM_enuWrite('2',0,5);
			    EEPROM_enuWrite('3',0,6);
				EEPROM_enuWrite('4',0,7);
				*/

	}
    6f86:	cf 91       	pop	r28
    6f88:	df 91       	pop	r29
    6f8a:	08 95       	ret

00006f8c <CheckSensor>:


	void CheckSensor(u8 Copy_u8State)
		 {
    6f8c:	df 93       	push	r29
    6f8e:	cf 93       	push	r28
    6f90:	00 d0       	rcall	.+0      	; 0x6f92 <CheckSensor+0x6>
    6f92:	0f 92       	push	r0
    6f94:	cd b7       	in	r28, 0x3d	; 61
    6f96:	de b7       	in	r29, 0x3e	; 62
    6f98:	8b 83       	std	Y+3, r24	; 0x03
			 if(Copy_u8State==1){
    6f9a:	8b 81       	ldd	r24, Y+3	; 0x03
    6f9c:	81 30       	cpi	r24, 0x01	; 1
    6f9e:	61 f5       	brne	.+88     	; 0x6ff8 <CheckSensor+0x6c>
		            	u16 Temperature=0;
    6fa0:	1a 82       	std	Y+2, r1	; 0x02
    6fa2:	19 82       	std	Y+1, r1	; 0x01
		           Temperature=TEMP_SENSOR_enuRead();
    6fa4:	0e 94 56 17 	call	0x2eac	; 0x2eac <TEMP_SENSOR_enuRead>
    6fa8:	9a 83       	std	Y+2, r25	; 0x02
    6faa:	89 83       	std	Y+1, r24	; 0x01
		            	if(Temperature>28){
    6fac:	89 81       	ldd	r24, Y+1	; 0x01
    6fae:	9a 81       	ldd	r25, Y+2	; 0x02
    6fb0:	8d 31       	cpi	r24, 0x1D	; 29
    6fb2:	91 05       	cpc	r25, r1
    6fb4:	88 f0       	brcs	.+34     	; 0x6fd8 <CheckSensor+0x4c>
		            		DC_MOTOR_enuSetDirection(CLOCKWISE);
    6fb6:	81 e0       	ldi	r24, 0x01	; 1
    6fb8:	0e 94 8d 21 	call	0x431a	; 0x431a <DC_MOTOR_enuSetDirection>
		            		DC_MOTOR_enuSetSpeed(100);
    6fbc:	84 e6       	ldi	r24, 0x64	; 100
    6fbe:	0e 94 b8 21 	call	0x4370	; 0x4370 <DC_MOTOR_enuSetSpeed>
		            		DC_MOTOR_enuStart();
    6fc2:	0e 94 c8 21 	call	0x4390	; 0x4390 <DC_MOTOR_enuStart>

		            		LCD_enuWriteString(" AC ON");
    6fc6:	8c ed       	ldi	r24, 0xDC	; 220
    6fc8:	95 e0       	ldi	r25, 0x05	; 5
    6fca:	0e 94 b9 1c 	call	0x3972	; 0x3972 <LCD_enuWriteString>
		            		HC05_enuSendString("AC MOTOR ON \r\n");
    6fce:	83 ee       	ldi	r24, 0xE3	; 227
    6fd0:	95 e0       	ldi	r25, 0x05	; 5
    6fd2:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
    6fd6:	1a c0       	rjmp	.+52     	; 0x700c <CheckSensor+0x80>


		            	}
		            	else if(Temperature<21){
    6fd8:	89 81       	ldd	r24, Y+1	; 0x01
    6fda:	9a 81       	ldd	r25, Y+2	; 0x02
    6fdc:	85 31       	cpi	r24, 0x15	; 21
    6fde:	91 05       	cpc	r25, r1
    6fe0:	a8 f4       	brcc	.+42     	; 0x700c <CheckSensor+0x80>
		            		DC_MOTORenuStop();
    6fe2:	0e 94 d5 21 	call	0x43aa	; 0x43aa <DC_MOTORenuStop>

		            		LCD_enuWriteString("AC OFF");
    6fe6:	82 ef       	ldi	r24, 0xF2	; 242
    6fe8:	95 e0       	ldi	r25, 0x05	; 5
    6fea:	0e 94 b9 1c 	call	0x3972	; 0x3972 <LCD_enuWriteString>
		            		HC05_enuSendString("AC OFF\r\n");
    6fee:	89 ef       	ldi	r24, 0xF9	; 249
    6ff0:	95 e0       	ldi	r25, 0x05	; 5
    6ff2:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
    6ff6:	0a c0       	rjmp	.+20     	; 0x700c <CheckSensor+0x80>
		            	}


		            }
		            else {
		            	DC_MOTORenuStop();
    6ff8:	0e 94 d5 21 	call	0x43aa	; 0x43aa <DC_MOTORenuStop>
		            	LCD_enuWriteString(" AC Of");
    6ffc:	82 e0       	ldi	r24, 0x02	; 2
    6ffe:	96 e0       	ldi	r25, 0x06	; 6
    7000:	0e 94 b9 1c 	call	0x3972	; 0x3972 <LCD_enuWriteString>
		            	HC05_enuSendString("AC OFF\r\n");
    7004:	89 ef       	ldi	r24, 0xF9	; 249
    7006:	95 e0       	ldi	r25, 0x05	; 5
    7008:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
		            }
//_delay_ms(1000);
	}
    700c:	0f 90       	pop	r0
    700e:	0f 90       	pop	r0
    7010:	0f 90       	pop	r0
    7012:	cf 91       	pop	r28
    7014:	df 91       	pop	r29
    7016:	08 95       	ret

00007018 <CheckDoor>:
	void CheckDoor(u8 Copy_u8State){
    7018:	df 93       	push	r29
    701a:	cf 93       	push	r28
    701c:	0f 92       	push	r0
    701e:	cd b7       	in	r28, 0x3d	; 61
    7020:	de b7       	in	r29, 0x3e	; 62
    7022:	89 83       	std	Y+1, r24	; 0x01
              if(Copy_u8State==OPEN){
    7024:	89 81       	ldd	r24, Y+1	; 0x01
    7026:	8a 30       	cpi	r24, 0x0A	; 10
    7028:	49 f4       	brne	.+18     	; 0x703c <CheckDoor+0x24>
            	  LCD_enuWriteString("DOOR OPEN");
    702a:	89 e0       	ldi	r24, 0x09	; 9
    702c:	96 e0       	ldi	r25, 0x06	; 6
    702e:	0e 94 b9 1c 	call	0x3972	; 0x3972 <LCD_enuWriteString>
            	  HC05_enuSendString("DOOR OPEN\r\n");
    7032:	83 e1       	ldi	r24, 0x13	; 19
    7034:	96 e0       	ldi	r25, 0x06	; 6
    7036:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
    703a:	08 c0       	rjmp	.+16     	; 0x704c <CheckDoor+0x34>
              }
              else{
            	  LCD_enuWriteString("DOOR CLOSE");
    703c:	8f e1       	ldi	r24, 0x1F	; 31
    703e:	96 e0       	ldi	r25, 0x06	; 6
    7040:	0e 94 b9 1c 	call	0x3972	; 0x3972 <LCD_enuWriteString>
            	   HC05_enuSendString("DOOR CLOSE\r\n");
    7044:	8a e2       	ldi	r24, 0x2A	; 42
    7046:	96 e0       	ldi	r25, 0x06	; 6
    7048:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
              }
	}
    704c:	0f 90       	pop	r0
    704e:	cf 91       	pop	r28
    7050:	df 91       	pop	r29
    7052:	08 95       	ret

00007054 <CheckLeds>:

	void CheckLeds(u8* Copy_u8State){
    7054:	df 93       	push	r29
    7056:	cf 93       	push	r28
    7058:	00 d0       	rcall	.+0      	; 0x705a <CheckLeds+0x6>
    705a:	0f 92       	push	r0
    705c:	cd b7       	in	r28, 0x3d	; 61
    705e:	de b7       	in	r29, 0x3e	; 62
    7060:	9b 83       	std	Y+3, r25	; 0x03
    7062:	8a 83       	std	Y+2, r24	; 0x02
		LCD_enuClearScreen();
    7064:	0e 94 df 1c 	call	0x39be	; 0x39be <LCD_enuClearScreen>
		LCD_enuWriteString("L1 L2 L3 L4 L5");
    7068:	87 e3       	ldi	r24, 0x37	; 55
    706a:	96 e0       	ldi	r25, 0x06	; 6
    706c:	0e 94 b9 1c 	call	0x3972	; 0x3972 <LCD_enuWriteString>
		HC05_enuSendString("LED1 LED2 LED3 LED4 LED5\r\n");
    7070:	86 e4       	ldi	r24, 0x46	; 70
    7072:	96 e0       	ldi	r25, 0x06	; 6
    7074:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
		LCD_enuGoToPosition(1,0);
    7078:	81 e0       	ldi	r24, 0x01	; 1
    707a:	60 e0       	ldi	r22, 0x00	; 0
    707c:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <LCD_enuGoToPosition>
       for(u8 count=0;count<5;count++){
    7080:	19 82       	std	Y+1, r1	; 0x01
    7082:	1f c0       	rjmp	.+62     	; 0x70c2 <CheckLeds+0x6e>
          if(Copy_u8State[count]==1){
    7084:	89 81       	ldd	r24, Y+1	; 0x01
    7086:	28 2f       	mov	r18, r24
    7088:	30 e0       	ldi	r19, 0x00	; 0
    708a:	8a 81       	ldd	r24, Y+2	; 0x02
    708c:	9b 81       	ldd	r25, Y+3	; 0x03
    708e:	fc 01       	movw	r30, r24
    7090:	e2 0f       	add	r30, r18
    7092:	f3 1f       	adc	r31, r19
    7094:	80 81       	ld	r24, Z
    7096:	81 30       	cpi	r24, 0x01	; 1
    7098:	49 f4       	brne	.+18     	; 0x70ac <CheckLeds+0x58>
        	  LCD_enuWriteString("ON ");
    709a:	81 e6       	ldi	r24, 0x61	; 97
    709c:	96 e0       	ldi	r25, 0x06	; 6
    709e:	0e 94 b9 1c 	call	0x3972	; 0x3972 <LCD_enuWriteString>
        	  HC05_enuSendString("ON   ");
    70a2:	85 e6       	ldi	r24, 0x65	; 101
    70a4:	96 e0       	ldi	r25, 0x06	; 6
    70a6:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
    70aa:	08 c0       	rjmp	.+16     	; 0x70bc <CheckLeds+0x68>
          }
          else{
        	  LCD_enuWriteString("OF ");
    70ac:	8b e6       	ldi	r24, 0x6B	; 107
    70ae:	96 e0       	ldi	r25, 0x06	; 6
    70b0:	0e 94 b9 1c 	call	0x3972	; 0x3972 <LCD_enuWriteString>
        	  HC05_enuSendString("OFF  ");
    70b4:	8f e6       	ldi	r24, 0x6F	; 111
    70b6:	96 e0       	ldi	r25, 0x06	; 6
    70b8:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
	void CheckLeds(u8* Copy_u8State){
		LCD_enuClearScreen();
		LCD_enuWriteString("L1 L2 L3 L4 L5");
		HC05_enuSendString("LED1 LED2 LED3 LED4 LED5\r\n");
		LCD_enuGoToPosition(1,0);
       for(u8 count=0;count<5;count++){
    70bc:	89 81       	ldd	r24, Y+1	; 0x01
    70be:	8f 5f       	subi	r24, 0xFF	; 255
    70c0:	89 83       	std	Y+1, r24	; 0x01
    70c2:	89 81       	ldd	r24, Y+1	; 0x01
    70c4:	85 30       	cpi	r24, 0x05	; 5
    70c6:	f0 f2       	brcs	.-68     	; 0x7084 <CheckLeds+0x30>
          else{
        	  LCD_enuWriteString("OF ");
        	  HC05_enuSendString("OFF  ");
          }
       }
       HC05_enuSendString("\r\n");
    70c8:	80 e0       	ldi	r24, 0x00	; 0
    70ca:	92 e0       	ldi	r25, 0x02	; 2
    70cc:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
	}
    70d0:	0f 90       	pop	r0
    70d2:	0f 90       	pop	r0
    70d4:	0f 90       	pop	r0
    70d6:	cf 91       	pop	r28
    70d8:	df 91       	pop	r29
    70da:	08 95       	ret

000070dc <CheckDimmer>:
	void CheckDimmer(u8 Copy_u8State){
    70dc:	df 93       	push	r29
    70de:	cf 93       	push	r28
    70e0:	0f 92       	push	r0
    70e2:	cd b7       	in	r28, 0x3d	; 61
    70e4:	de b7       	in	r29, 0x3e	; 62
    70e6:	89 83       	std	Y+1, r24	; 0x01
       if(Copy_u8State==1){
    70e8:	89 81       	ldd	r24, Y+1	; 0x01
    70ea:	81 30       	cpi	r24, 0x01	; 1
    70ec:	49 f4       	brne	.+18     	; 0x7100 <CheckDimmer+0x24>
    	   LCD_enuWriteString("DIMMER ON");
    70ee:	85 e7       	ldi	r24, 0x75	; 117
    70f0:	96 e0       	ldi	r25, 0x06	; 6
    70f2:	0e 94 b9 1c 	call	0x3972	; 0x3972 <LCD_enuWriteString>
    	 HC05_enuSendString("DIMMER ON \r\n");
    70f6:	8f e7       	ldi	r24, 0x7F	; 127
    70f8:	96 e0       	ldi	r25, 0x06	; 6
    70fa:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
    70fe:	08 c0       	rjmp	.+16     	; 0x7110 <CheckDimmer+0x34>

       }
       else{
    	   LCD_enuWriteString("DIMMER OFF");
    7100:	8c e8       	ldi	r24, 0x8C	; 140
    7102:	96 e0       	ldi	r25, 0x06	; 6
    7104:	0e 94 b9 1c 	call	0x3972	; 0x3972 <LCD_enuWriteString>
    	   HC05_enuSendString("DIMMER OFF \r\n");
    7108:	87 e9       	ldi	r24, 0x97	; 151
    710a:	96 e0       	ldi	r25, 0x06	; 6
    710c:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>

       }
	}
    7110:	0f 90       	pop	r0
    7112:	cf 91       	pop	r28
    7114:	df 91       	pop	r29
    7116:	08 95       	ret

00007118 <Reset>:
void Reset(u8* Sensor_State, u8* Door_State, u8* Relay_State,u8* Dimmer_State){
    7118:	df 93       	push	r29
    711a:	cf 93       	push	r28
    711c:	cd b7       	in	r28, 0x3d	; 61
    711e:	de b7       	in	r29, 0x3e	; 62
    7120:	29 97       	sbiw	r28, 0x09	; 9
    7122:	0f b6       	in	r0, 0x3f	; 63
    7124:	f8 94       	cli
    7126:	de bf       	out	0x3e, r29	; 62
    7128:	0f be       	out	0x3f, r0	; 63
    712a:	cd bf       	out	0x3d, r28	; 61
    712c:	9b 83       	std	Y+3, r25	; 0x03
    712e:	8a 83       	std	Y+2, r24	; 0x02
    7130:	7d 83       	std	Y+5, r23	; 0x05
    7132:	6c 83       	std	Y+4, r22	; 0x04
    7134:	5f 83       	std	Y+7, r21	; 0x07
    7136:	4e 83       	std	Y+6, r20	; 0x06
    7138:	39 87       	std	Y+9, r19	; 0x09
    713a:	28 87       	std	Y+8, r18	; 0x08
*Sensor_State=0;
    713c:	ea 81       	ldd	r30, Y+2	; 0x02
    713e:	fb 81       	ldd	r31, Y+3	; 0x03
    7140:	10 82       	st	Z, r1
*Door_State=0;
    7142:	ec 81       	ldd	r30, Y+4	; 0x04
    7144:	fd 81       	ldd	r31, Y+5	; 0x05
    7146:	10 82       	st	Z, r1
for(u8 counter=0;counter<5;counter++){
    7148:	19 82       	std	Y+1, r1	; 0x01
    714a:	10 c0       	rjmp	.+32     	; 0x716c <Reset+0x54>
	Relay_State[counter]=0;
    714c:	89 81       	ldd	r24, Y+1	; 0x01
    714e:	28 2f       	mov	r18, r24
    7150:	30 e0       	ldi	r19, 0x00	; 0
    7152:	8e 81       	ldd	r24, Y+6	; 0x06
    7154:	9f 81       	ldd	r25, Y+7	; 0x07
    7156:	fc 01       	movw	r30, r24
    7158:	e2 0f       	add	r30, r18
    715a:	f3 1f       	adc	r31, r19
    715c:	10 82       	st	Z, r1
	RELAY_enuOF(counter+1);
    715e:	89 81       	ldd	r24, Y+1	; 0x01
    7160:	8f 5f       	subi	r24, 0xFF	; 255
    7162:	0e 94 43 18 	call	0x3086	; 0x3086 <RELAY_enuOF>
       }
	}
void Reset(u8* Sensor_State, u8* Door_State, u8* Relay_State,u8* Dimmer_State){
*Sensor_State=0;
*Door_State=0;
for(u8 counter=0;counter<5;counter++){
    7166:	89 81       	ldd	r24, Y+1	; 0x01
    7168:	8f 5f       	subi	r24, 0xFF	; 255
    716a:	89 83       	std	Y+1, r24	; 0x01
    716c:	89 81       	ldd	r24, Y+1	; 0x01
    716e:	85 30       	cpi	r24, 0x05	; 5
    7170:	68 f3       	brcs	.-38     	; 0x714c <Reset+0x34>
	Relay_State[counter]=0;
	RELAY_enuOF(counter+1);
}
DIMMER_LAMP_enuStop();
    7172:	0e 94 6e 21 	call	0x42dc	; 0x42dc <DIMMER_LAMP_enuStop>
*Dimmer_State=0;
    7176:	e8 85       	ldd	r30, Y+8	; 0x08
    7178:	f9 85       	ldd	r31, Y+9	; 0x09
    717a:	10 82       	st	Z, r1
DC_MOTORenuStop();
    717c:	0e 94 d5 21 	call	0x43aa	; 0x43aa <DC_MOTORenuStop>
SERVO_MOTOR_enuSetPosition(CLOSE);
    7180:	85 e0       	ldi	r24, 0x05	; 5
    7182:	0e 94 93 17 	call	0x2f26	; 0x2f26 <SERVO_MOTOR_enuSetPosition>
HC05_enuSendString("Door is Close\r\n");
    7186:	85 ea       	ldi	r24, 0xA5	; 165
    7188:	96 e0       	ldi	r25, 0x06	; 6
    718a:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
HC05_enuSendString("Dc Motor is Close\r\n");
    718e:	85 eb       	ldi	r24, 0xB5	; 181
    7190:	96 e0       	ldi	r25, 0x06	; 6
    7192:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
HC05_enuSendString("All Leds is OFF\r\n");
    7196:	89 ec       	ldi	r24, 0xC9	; 201
    7198:	96 e0       	ldi	r25, 0x06	; 6
    719a:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
HC05_enuSendString("Dimmer Lamp is OFF\r\n");
    719e:	8b ed       	ldi	r24, 0xDB	; 219
    71a0:	96 e0       	ldi	r25, 0x06	; 6
    71a2:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
HC05_enuSendString("Reseting System\r\n");
    71a6:	80 ef       	ldi	r24, 0xF0	; 240
    71a8:	96 e0       	ldi	r25, 0x06	; 6
    71aa:	0e 94 92 20 	call	0x4124	; 0x4124 <HC05_enuSendString>
DeleteAll();
    71ae:	0e 94 d2 33 	call	0x67a4	; 0x67a4 <DeleteAll>
AppInit();
    71b2:	0e 94 92 37 	call	0x6f24	; 0x6f24 <AppInit>
	}
    71b6:	29 96       	adiw	r28, 0x09	; 9
    71b8:	0f b6       	in	r0, 0x3f	; 63
    71ba:	f8 94       	cli
    71bc:	de bf       	out	0x3e, r29	; 62
    71be:	0f be       	out	0x3f, r0	; 63
    71c0:	cd bf       	out	0x3d, r28	; 61
    71c2:	cf 91       	pop	r28
    71c4:	df 91       	pop	r29
    71c6:	08 95       	ret

000071c8 <Display_System>:
void Display_System(u8*Copy_state,u8 Sensor_State, u8 Door_State, u8* Relay_State,u8 Dimmer_State){
    71c8:	0f 93       	push	r16
    71ca:	df 93       	push	r29
    71cc:	cf 93       	push	r28
    71ce:	cd b7       	in	r28, 0x3d	; 61
    71d0:	de b7       	in	r29, 0x3e	; 62
    71d2:	a4 97       	sbiw	r28, 0x24	; 36
    71d4:	0f b6       	in	r0, 0x3f	; 63
    71d6:	f8 94       	cli
    71d8:	de bf       	out	0x3e, r29	; 62
    71da:	0f be       	out	0x3f, r0	; 63
    71dc:	cd bf       	out	0x3d, r28	; 61
    71de:	9f 8f       	std	Y+31, r25	; 0x1f
    71e0:	8e 8f       	std	Y+30, r24	; 0x1e
    71e2:	68 a3       	std	Y+32, r22	; 0x20
    71e4:	49 a3       	std	Y+33, r20	; 0x21
    71e6:	3b a3       	std	Y+35, r19	; 0x23
    71e8:	2a a3       	std	Y+34, r18	; 0x22
    71ea:	0c a3       	std	Y+36, r16	; 0x24
	u8 Key_Data=KEY_NOT_PRESSED;
    71ec:	8f ef       	ldi	r24, 0xFF	; 255
    71ee:	8d 8f       	std	Y+29, r24	; 0x1d
					KEYPAD_enuGetPressedKey(&Key_Data);
    71f0:	ce 01       	movw	r24, r28
    71f2:	4d 96       	adiw	r24, 0x1d	; 29
    71f4:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <KEYPAD_enuGetPressedKey>
    71f8:	21 c1       	rjmp	.+578    	; 0x743c <Display_System+0x274>
					while(Key_Data==KEY_NOT_PRESSED){
	          //      LCD_enuWriteString(" long Press");
	          //      LCD_enuGoToPosition(1,0);
	          //      LCD_enuWriteString("to start");
					KEYPAD_enuGetPressedKey(&Key_Data);
    71fa:	ce 01       	movw	r24, r28
    71fc:	4d 96       	adiw	r24, 0x1d	; 29
    71fe:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <KEYPAD_enuGetPressedKey>
					if(Key_Data!=KEY_NOT_PRESSED)
    7202:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7204:	8f 3f       	cpi	r24, 0xFF	; 255
    7206:	09 f0       	breq	.+2      	; 0x720a <Display_System+0x42>
    7208:	19 c1       	rjmp	.+562    	; 0x743c <Display_System+0x274>
						continue;

					    LCD_enuClearScreen();
    720a:	0e 94 df 1c 	call	0x39be	; 0x39be <LCD_enuClearScreen>
						CheckDoor(Door_State);
    720e:	89 a1       	ldd	r24, Y+33	; 0x21
    7210:	0e 94 0c 38 	call	0x7018	; 0x7018 <CheckDoor>
						KEYPAD_enuGetPressedKey(&Key_Data);
    7214:	ce 01       	movw	r24, r28
    7216:	4d 96       	adiw	r24, 0x1d	; 29
    7218:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <KEYPAD_enuGetPressedKey>
						if(Key_Data!=KEY_NOT_PRESSED)
    721c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    721e:	8f 3f       	cpi	r24, 0xFF	; 255
    7220:	09 f0       	breq	.+2      	; 0x7224 <Display_System+0x5c>
    7222:	0c c1       	rjmp	.+536    	; 0x743c <Display_System+0x274>
											continue;
						LCD_enuGoToPosition(1,0);
    7224:	81 e0       	ldi	r24, 0x01	; 1
    7226:	60 e0       	ldi	r22, 0x00	; 0
    7228:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <LCD_enuGoToPosition>
					    CheckDimmer(Dimmer_State);
    722c:	8c a1       	ldd	r24, Y+36	; 0x24
    722e:	0e 94 6e 38 	call	0x70dc	; 0x70dc <CheckDimmer>
						KEYPAD_enuGetPressedKey(&Key_Data);
    7232:	ce 01       	movw	r24, r28
    7234:	4d 96       	adiw	r24, 0x1d	; 29
    7236:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <KEYPAD_enuGetPressedKey>
						if(Key_Data!=KEY_NOT_PRESSED)
    723a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    723c:	8f 3f       	cpi	r24, 0xFF	; 255
    723e:	09 f0       	breq	.+2      	; 0x7242 <Display_System+0x7a>
    7240:	fd c0       	rjmp	.+506    	; 0x743c <Display_System+0x274>
											continue;
						CheckSensor(Sensor_State);
    7242:	88 a1       	ldd	r24, Y+32	; 0x20
    7244:	0e 94 c6 37 	call	0x6f8c	; 0x6f8c <CheckSensor>

						KEYPAD_enuGetPressedKey(&Key_Data);
    7248:	ce 01       	movw	r24, r28
    724a:	4d 96       	adiw	r24, 0x1d	; 29
    724c:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <KEYPAD_enuGetPressedKey>
						if(Key_Data!=KEY_NOT_PRESSED)
    7250:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7252:	8f 3f       	cpi	r24, 0xFF	; 255
    7254:	09 f0       	breq	.+2      	; 0x7258 <Display_System+0x90>
    7256:	f2 c0       	rjmp	.+484    	; 0x743c <Display_System+0x274>
											continue;
    7258:	80 e0       	ldi	r24, 0x00	; 0
    725a:	90 e0       	ldi	r25, 0x00	; 0
    725c:	aa e7       	ldi	r26, 0x7A	; 122
    725e:	b4 e4       	ldi	r27, 0x44	; 68
    7260:	89 8f       	std	Y+25, r24	; 0x19
    7262:	9a 8f       	std	Y+26, r25	; 0x1a
    7264:	ab 8f       	std	Y+27, r26	; 0x1b
    7266:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7268:	69 8d       	ldd	r22, Y+25	; 0x19
    726a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    726c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    726e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    7270:	20 e0       	ldi	r18, 0x00	; 0
    7272:	30 e0       	ldi	r19, 0x00	; 0
    7274:	4a e7       	ldi	r20, 0x7A	; 122
    7276:	55 e4       	ldi	r21, 0x45	; 69
    7278:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    727c:	dc 01       	movw	r26, r24
    727e:	cb 01       	movw	r24, r22
    7280:	8d 8b       	std	Y+21, r24	; 0x15
    7282:	9e 8b       	std	Y+22, r25	; 0x16
    7284:	af 8b       	std	Y+23, r26	; 0x17
    7286:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    7288:	6d 89       	ldd	r22, Y+21	; 0x15
    728a:	7e 89       	ldd	r23, Y+22	; 0x16
    728c:	8f 89       	ldd	r24, Y+23	; 0x17
    728e:	98 8d       	ldd	r25, Y+24	; 0x18
    7290:	20 e0       	ldi	r18, 0x00	; 0
    7292:	30 e0       	ldi	r19, 0x00	; 0
    7294:	40 e8       	ldi	r20, 0x80	; 128
    7296:	5f e3       	ldi	r21, 0x3F	; 63
    7298:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    729c:	88 23       	and	r24, r24
    729e:	2c f4       	brge	.+10     	; 0x72aa <Display_System+0xe2>
		__ticks = 1;
    72a0:	81 e0       	ldi	r24, 0x01	; 1
    72a2:	90 e0       	ldi	r25, 0x00	; 0
    72a4:	9c 8b       	std	Y+20, r25	; 0x14
    72a6:	8b 8b       	std	Y+19, r24	; 0x13
    72a8:	3f c0       	rjmp	.+126    	; 0x7328 <Display_System+0x160>
	else if (__tmp > 65535)
    72aa:	6d 89       	ldd	r22, Y+21	; 0x15
    72ac:	7e 89       	ldd	r23, Y+22	; 0x16
    72ae:	8f 89       	ldd	r24, Y+23	; 0x17
    72b0:	98 8d       	ldd	r25, Y+24	; 0x18
    72b2:	20 e0       	ldi	r18, 0x00	; 0
    72b4:	3f ef       	ldi	r19, 0xFF	; 255
    72b6:	4f e7       	ldi	r20, 0x7F	; 127
    72b8:	57 e4       	ldi	r21, 0x47	; 71
    72ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    72be:	18 16       	cp	r1, r24
    72c0:	4c f5       	brge	.+82     	; 0x7314 <Display_System+0x14c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    72c2:	69 8d       	ldd	r22, Y+25	; 0x19
    72c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    72c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    72c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    72ca:	20 e0       	ldi	r18, 0x00	; 0
    72cc:	30 e0       	ldi	r19, 0x00	; 0
    72ce:	40 e2       	ldi	r20, 0x20	; 32
    72d0:	51 e4       	ldi	r21, 0x41	; 65
    72d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    72d6:	dc 01       	movw	r26, r24
    72d8:	cb 01       	movw	r24, r22
    72da:	bc 01       	movw	r22, r24
    72dc:	cd 01       	movw	r24, r26
    72de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    72e2:	dc 01       	movw	r26, r24
    72e4:	cb 01       	movw	r24, r22
    72e6:	9c 8b       	std	Y+20, r25	; 0x14
    72e8:	8b 8b       	std	Y+19, r24	; 0x13
    72ea:	0f c0       	rjmp	.+30     	; 0x730a <Display_System+0x142>
    72ec:	80 e9       	ldi	r24, 0x90	; 144
    72ee:	91 e0       	ldi	r25, 0x01	; 1
    72f0:	9a 8b       	std	Y+18, r25	; 0x12
    72f2:	89 8b       	std	Y+17, r24	; 0x11
    72f4:	89 89       	ldd	r24, Y+17	; 0x11
    72f6:	9a 89       	ldd	r25, Y+18	; 0x12
    72f8:	01 97       	sbiw	r24, 0x01	; 1
    72fa:	f1 f7       	brne	.-4      	; 0x72f8 <Display_System+0x130>
    72fc:	9a 8b       	std	Y+18, r25	; 0x12
    72fe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7300:	8b 89       	ldd	r24, Y+19	; 0x13
    7302:	9c 89       	ldd	r25, Y+20	; 0x14
    7304:	01 97       	sbiw	r24, 0x01	; 1
    7306:	9c 8b       	std	Y+20, r25	; 0x14
    7308:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    730a:	8b 89       	ldd	r24, Y+19	; 0x13
    730c:	9c 89       	ldd	r25, Y+20	; 0x14
    730e:	00 97       	sbiw	r24, 0x00	; 0
    7310:	69 f7       	brne	.-38     	; 0x72ec <Display_System+0x124>
    7312:	14 c0       	rjmp	.+40     	; 0x733c <Display_System+0x174>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7314:	6d 89       	ldd	r22, Y+21	; 0x15
    7316:	7e 89       	ldd	r23, Y+22	; 0x16
    7318:	8f 89       	ldd	r24, Y+23	; 0x17
    731a:	98 8d       	ldd	r25, Y+24	; 0x18
    731c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7320:	dc 01       	movw	r26, r24
    7322:	cb 01       	movw	r24, r22
    7324:	9c 8b       	std	Y+20, r25	; 0x14
    7326:	8b 8b       	std	Y+19, r24	; 0x13
    7328:	8b 89       	ldd	r24, Y+19	; 0x13
    732a:	9c 89       	ldd	r25, Y+20	; 0x14
    732c:	98 8b       	std	Y+16, r25	; 0x10
    732e:	8f 87       	std	Y+15, r24	; 0x0f
    7330:	8f 85       	ldd	r24, Y+15	; 0x0f
    7332:	98 89       	ldd	r25, Y+16	; 0x10
    7334:	01 97       	sbiw	r24, 0x01	; 1
    7336:	f1 f7       	brne	.-4      	; 0x7334 <Display_System+0x16c>
    7338:	98 8b       	std	Y+16, r25	; 0x10
    733a:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms(1000);
					CheckLeds(Relay_State);
    733c:	8a a1       	ldd	r24, Y+34	; 0x22
    733e:	9b a1       	ldd	r25, Y+35	; 0x23
    7340:	0e 94 2a 38 	call	0x7054	; 0x7054 <CheckLeds>
						KEYPAD_enuGetPressedKey(&Key_Data);
    7344:	ce 01       	movw	r24, r28
    7346:	4d 96       	adiw	r24, 0x1d	; 29
    7348:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <KEYPAD_enuGetPressedKey>
						if(Key_Data!=KEY_NOT_PRESSED)
    734c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    734e:	8f 3f       	cpi	r24, 0xFF	; 255
    7350:	09 f0       	breq	.+2      	; 0x7354 <Display_System+0x18c>
    7352:	74 c0       	rjmp	.+232    	; 0x743c <Display_System+0x274>
											continue;
    7354:	80 e0       	ldi	r24, 0x00	; 0
    7356:	90 e0       	ldi	r25, 0x00	; 0
    7358:	aa e7       	ldi	r26, 0x7A	; 122
    735a:	b4 e4       	ldi	r27, 0x44	; 68
    735c:	8b 87       	std	Y+11, r24	; 0x0b
    735e:	9c 87       	std	Y+12, r25	; 0x0c
    7360:	ad 87       	std	Y+13, r26	; 0x0d
    7362:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7364:	6b 85       	ldd	r22, Y+11	; 0x0b
    7366:	7c 85       	ldd	r23, Y+12	; 0x0c
    7368:	8d 85       	ldd	r24, Y+13	; 0x0d
    736a:	9e 85       	ldd	r25, Y+14	; 0x0e
    736c:	20 e0       	ldi	r18, 0x00	; 0
    736e:	30 e0       	ldi	r19, 0x00	; 0
    7370:	4a e7       	ldi	r20, 0x7A	; 122
    7372:	55 e4       	ldi	r21, 0x45	; 69
    7374:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7378:	dc 01       	movw	r26, r24
    737a:	cb 01       	movw	r24, r22
    737c:	8f 83       	std	Y+7, r24	; 0x07
    737e:	98 87       	std	Y+8, r25	; 0x08
    7380:	a9 87       	std	Y+9, r26	; 0x09
    7382:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    7384:	6f 81       	ldd	r22, Y+7	; 0x07
    7386:	78 85       	ldd	r23, Y+8	; 0x08
    7388:	89 85       	ldd	r24, Y+9	; 0x09
    738a:	9a 85       	ldd	r25, Y+10	; 0x0a
    738c:	20 e0       	ldi	r18, 0x00	; 0
    738e:	30 e0       	ldi	r19, 0x00	; 0
    7390:	40 e8       	ldi	r20, 0x80	; 128
    7392:	5f e3       	ldi	r21, 0x3F	; 63
    7394:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    7398:	88 23       	and	r24, r24
    739a:	2c f4       	brge	.+10     	; 0x73a6 <Display_System+0x1de>
		__ticks = 1;
    739c:	81 e0       	ldi	r24, 0x01	; 1
    739e:	90 e0       	ldi	r25, 0x00	; 0
    73a0:	9e 83       	std	Y+6, r25	; 0x06
    73a2:	8d 83       	std	Y+5, r24	; 0x05
    73a4:	3f c0       	rjmp	.+126    	; 0x7424 <Display_System+0x25c>
	else if (__tmp > 65535)
    73a6:	6f 81       	ldd	r22, Y+7	; 0x07
    73a8:	78 85       	ldd	r23, Y+8	; 0x08
    73aa:	89 85       	ldd	r24, Y+9	; 0x09
    73ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    73ae:	20 e0       	ldi	r18, 0x00	; 0
    73b0:	3f ef       	ldi	r19, 0xFF	; 255
    73b2:	4f e7       	ldi	r20, 0x7F	; 127
    73b4:	57 e4       	ldi	r21, 0x47	; 71
    73b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    73ba:	18 16       	cp	r1, r24
    73bc:	4c f5       	brge	.+82     	; 0x7410 <Display_System+0x248>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    73be:	6b 85       	ldd	r22, Y+11	; 0x0b
    73c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    73c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    73c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    73c6:	20 e0       	ldi	r18, 0x00	; 0
    73c8:	30 e0       	ldi	r19, 0x00	; 0
    73ca:	40 e2       	ldi	r20, 0x20	; 32
    73cc:	51 e4       	ldi	r21, 0x41	; 65
    73ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    73d2:	dc 01       	movw	r26, r24
    73d4:	cb 01       	movw	r24, r22
    73d6:	bc 01       	movw	r22, r24
    73d8:	cd 01       	movw	r24, r26
    73da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    73de:	dc 01       	movw	r26, r24
    73e0:	cb 01       	movw	r24, r22
    73e2:	9e 83       	std	Y+6, r25	; 0x06
    73e4:	8d 83       	std	Y+5, r24	; 0x05
    73e6:	0f c0       	rjmp	.+30     	; 0x7406 <Display_System+0x23e>
    73e8:	80 e9       	ldi	r24, 0x90	; 144
    73ea:	91 e0       	ldi	r25, 0x01	; 1
    73ec:	9c 83       	std	Y+4, r25	; 0x04
    73ee:	8b 83       	std	Y+3, r24	; 0x03
    73f0:	8b 81       	ldd	r24, Y+3	; 0x03
    73f2:	9c 81       	ldd	r25, Y+4	; 0x04
    73f4:	01 97       	sbiw	r24, 0x01	; 1
    73f6:	f1 f7       	brne	.-4      	; 0x73f4 <Display_System+0x22c>
    73f8:	9c 83       	std	Y+4, r25	; 0x04
    73fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    73fc:	8d 81       	ldd	r24, Y+5	; 0x05
    73fe:	9e 81       	ldd	r25, Y+6	; 0x06
    7400:	01 97       	sbiw	r24, 0x01	; 1
    7402:	9e 83       	std	Y+6, r25	; 0x06
    7404:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7406:	8d 81       	ldd	r24, Y+5	; 0x05
    7408:	9e 81       	ldd	r25, Y+6	; 0x06
    740a:	00 97       	sbiw	r24, 0x00	; 0
    740c:	69 f7       	brne	.-38     	; 0x73e8 <Display_System+0x220>
    740e:	14 c0       	rjmp	.+40     	; 0x7438 <Display_System+0x270>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7410:	6f 81       	ldd	r22, Y+7	; 0x07
    7412:	78 85       	ldd	r23, Y+8	; 0x08
    7414:	89 85       	ldd	r24, Y+9	; 0x09
    7416:	9a 85       	ldd	r25, Y+10	; 0x0a
    7418:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    741c:	dc 01       	movw	r26, r24
    741e:	cb 01       	movw	r24, r22
    7420:	9e 83       	std	Y+6, r25	; 0x06
    7422:	8d 83       	std	Y+5, r24	; 0x05
    7424:	8d 81       	ldd	r24, Y+5	; 0x05
    7426:	9e 81       	ldd	r25, Y+6	; 0x06
    7428:	9a 83       	std	Y+2, r25	; 0x02
    742a:	89 83       	std	Y+1, r24	; 0x01
    742c:	89 81       	ldd	r24, Y+1	; 0x01
    742e:	9a 81       	ldd	r25, Y+2	; 0x02
    7430:	01 97       	sbiw	r24, 0x01	; 1
    7432:	f1 f7       	brne	.-4      	; 0x7430 <Display_System+0x268>
    7434:	9a 83       	std	Y+2, r25	; 0x02
    7436:	89 83       	std	Y+1, r24	; 0x01
						_delay_ms(1000);
						LCD_enuClearScreen();
    7438:	0e 94 df 1c 	call	0x39be	; 0x39be <LCD_enuClearScreen>
AppInit();
	}
void Display_System(u8*Copy_state,u8 Sensor_State, u8 Door_State, u8* Relay_State,u8 Dimmer_State){
	u8 Key_Data=KEY_NOT_PRESSED;
					KEYPAD_enuGetPressedKey(&Key_Data);
					while(Key_Data==KEY_NOT_PRESSED){
    743c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    743e:	8f 3f       	cpi	r24, 0xFF	; 255
    7440:	09 f4       	brne	.+2      	; 0x7444 <Display_System+0x27c>
    7442:	db ce       	rjmp	.-586    	; 0x71fa <Display_System+0x32>
											continue;
						_delay_ms(1000);
						LCD_enuClearScreen();
					}

				*Copy_state=WELCOM_PAGE;
    7444:	ee 8d       	ldd	r30, Y+30	; 0x1e
    7446:	ff 8d       	ldd	r31, Y+31	; 0x1f
    7448:	10 82       	st	Z, r1


}
    744a:	a4 96       	adiw	r28, 0x24	; 36
    744c:	0f b6       	in	r0, 0x3f	; 63
    744e:	f8 94       	cli
    7450:	de bf       	out	0x3e, r29	; 62
    7452:	0f be       	out	0x3f, r0	; 63
    7454:	cd bf       	out	0x3d, r28	; 61
    7456:	cf 91       	pop	r28
    7458:	df 91       	pop	r29
    745a:	0f 91       	pop	r16
    745c:	08 95       	ret

0000745e <__mulsi3>:
    745e:	62 9f       	mul	r22, r18
    7460:	d0 01       	movw	r26, r0
    7462:	73 9f       	mul	r23, r19
    7464:	f0 01       	movw	r30, r0
    7466:	82 9f       	mul	r24, r18
    7468:	e0 0d       	add	r30, r0
    746a:	f1 1d       	adc	r31, r1
    746c:	64 9f       	mul	r22, r20
    746e:	e0 0d       	add	r30, r0
    7470:	f1 1d       	adc	r31, r1
    7472:	92 9f       	mul	r25, r18
    7474:	f0 0d       	add	r31, r0
    7476:	83 9f       	mul	r24, r19
    7478:	f0 0d       	add	r31, r0
    747a:	74 9f       	mul	r23, r20
    747c:	f0 0d       	add	r31, r0
    747e:	65 9f       	mul	r22, r21
    7480:	f0 0d       	add	r31, r0
    7482:	99 27       	eor	r25, r25
    7484:	72 9f       	mul	r23, r18
    7486:	b0 0d       	add	r27, r0
    7488:	e1 1d       	adc	r30, r1
    748a:	f9 1f       	adc	r31, r25
    748c:	63 9f       	mul	r22, r19
    748e:	b0 0d       	add	r27, r0
    7490:	e1 1d       	adc	r30, r1
    7492:	f9 1f       	adc	r31, r25
    7494:	bd 01       	movw	r22, r26
    7496:	cf 01       	movw	r24, r30
    7498:	11 24       	eor	r1, r1
    749a:	08 95       	ret

0000749c <__udivmodhi4>:
    749c:	aa 1b       	sub	r26, r26
    749e:	bb 1b       	sub	r27, r27
    74a0:	51 e1       	ldi	r21, 0x11	; 17
    74a2:	07 c0       	rjmp	.+14     	; 0x74b2 <__udivmodhi4_ep>

000074a4 <__udivmodhi4_loop>:
    74a4:	aa 1f       	adc	r26, r26
    74a6:	bb 1f       	adc	r27, r27
    74a8:	a6 17       	cp	r26, r22
    74aa:	b7 07       	cpc	r27, r23
    74ac:	10 f0       	brcs	.+4      	; 0x74b2 <__udivmodhi4_ep>
    74ae:	a6 1b       	sub	r26, r22
    74b0:	b7 0b       	sbc	r27, r23

000074b2 <__udivmodhi4_ep>:
    74b2:	88 1f       	adc	r24, r24
    74b4:	99 1f       	adc	r25, r25
    74b6:	5a 95       	dec	r21
    74b8:	a9 f7       	brne	.-22     	; 0x74a4 <__udivmodhi4_loop>
    74ba:	80 95       	com	r24
    74bc:	90 95       	com	r25
    74be:	bc 01       	movw	r22, r24
    74c0:	cd 01       	movw	r24, r26
    74c2:	08 95       	ret

000074c4 <__divmodhi4>:
    74c4:	97 fb       	bst	r25, 7
    74c6:	09 2e       	mov	r0, r25
    74c8:	07 26       	eor	r0, r23
    74ca:	0a d0       	rcall	.+20     	; 0x74e0 <__divmodhi4_neg1>
    74cc:	77 fd       	sbrc	r23, 7
    74ce:	04 d0       	rcall	.+8      	; 0x74d8 <__divmodhi4_neg2>
    74d0:	e5 df       	rcall	.-54     	; 0x749c <__udivmodhi4>
    74d2:	06 d0       	rcall	.+12     	; 0x74e0 <__divmodhi4_neg1>
    74d4:	00 20       	and	r0, r0
    74d6:	1a f4       	brpl	.+6      	; 0x74de <__divmodhi4_exit>

000074d8 <__divmodhi4_neg2>:
    74d8:	70 95       	com	r23
    74da:	61 95       	neg	r22
    74dc:	7f 4f       	sbci	r23, 0xFF	; 255

000074de <__divmodhi4_exit>:
    74de:	08 95       	ret

000074e0 <__divmodhi4_neg1>:
    74e0:	f6 f7       	brtc	.-4      	; 0x74de <__divmodhi4_exit>
    74e2:	90 95       	com	r25
    74e4:	81 95       	neg	r24
    74e6:	9f 4f       	sbci	r25, 0xFF	; 255
    74e8:	08 95       	ret

000074ea <__divmodsi4>:
    74ea:	97 fb       	bst	r25, 7
    74ec:	09 2e       	mov	r0, r25
    74ee:	05 26       	eor	r0, r21
    74f0:	0e d0       	rcall	.+28     	; 0x750e <__divmodsi4_neg1>
    74f2:	57 fd       	sbrc	r21, 7
    74f4:	04 d0       	rcall	.+8      	; 0x74fe <__divmodsi4_neg2>
    74f6:	14 d0       	rcall	.+40     	; 0x7520 <__udivmodsi4>
    74f8:	0a d0       	rcall	.+20     	; 0x750e <__divmodsi4_neg1>
    74fa:	00 1c       	adc	r0, r0
    74fc:	38 f4       	brcc	.+14     	; 0x750c <__divmodsi4_exit>

000074fe <__divmodsi4_neg2>:
    74fe:	50 95       	com	r21
    7500:	40 95       	com	r20
    7502:	30 95       	com	r19
    7504:	21 95       	neg	r18
    7506:	3f 4f       	sbci	r19, 0xFF	; 255
    7508:	4f 4f       	sbci	r20, 0xFF	; 255
    750a:	5f 4f       	sbci	r21, 0xFF	; 255

0000750c <__divmodsi4_exit>:
    750c:	08 95       	ret

0000750e <__divmodsi4_neg1>:
    750e:	f6 f7       	brtc	.-4      	; 0x750c <__divmodsi4_exit>
    7510:	90 95       	com	r25
    7512:	80 95       	com	r24
    7514:	70 95       	com	r23
    7516:	61 95       	neg	r22
    7518:	7f 4f       	sbci	r23, 0xFF	; 255
    751a:	8f 4f       	sbci	r24, 0xFF	; 255
    751c:	9f 4f       	sbci	r25, 0xFF	; 255
    751e:	08 95       	ret

00007520 <__udivmodsi4>:
    7520:	a1 e2       	ldi	r26, 0x21	; 33
    7522:	1a 2e       	mov	r1, r26
    7524:	aa 1b       	sub	r26, r26
    7526:	bb 1b       	sub	r27, r27
    7528:	fd 01       	movw	r30, r26
    752a:	0d c0       	rjmp	.+26     	; 0x7546 <__udivmodsi4_ep>

0000752c <__udivmodsi4_loop>:
    752c:	aa 1f       	adc	r26, r26
    752e:	bb 1f       	adc	r27, r27
    7530:	ee 1f       	adc	r30, r30
    7532:	ff 1f       	adc	r31, r31
    7534:	a2 17       	cp	r26, r18
    7536:	b3 07       	cpc	r27, r19
    7538:	e4 07       	cpc	r30, r20
    753a:	f5 07       	cpc	r31, r21
    753c:	20 f0       	brcs	.+8      	; 0x7546 <__udivmodsi4_ep>
    753e:	a2 1b       	sub	r26, r18
    7540:	b3 0b       	sbc	r27, r19
    7542:	e4 0b       	sbc	r30, r20
    7544:	f5 0b       	sbc	r31, r21

00007546 <__udivmodsi4_ep>:
    7546:	66 1f       	adc	r22, r22
    7548:	77 1f       	adc	r23, r23
    754a:	88 1f       	adc	r24, r24
    754c:	99 1f       	adc	r25, r25
    754e:	1a 94       	dec	r1
    7550:	69 f7       	brne	.-38     	; 0x752c <__udivmodsi4_loop>
    7552:	60 95       	com	r22
    7554:	70 95       	com	r23
    7556:	80 95       	com	r24
    7558:	90 95       	com	r25
    755a:	9b 01       	movw	r18, r22
    755c:	ac 01       	movw	r20, r24
    755e:	bd 01       	movw	r22, r26
    7560:	cf 01       	movw	r24, r30
    7562:	08 95       	ret

00007564 <__prologue_saves__>:
    7564:	2f 92       	push	r2
    7566:	3f 92       	push	r3
    7568:	4f 92       	push	r4
    756a:	5f 92       	push	r5
    756c:	6f 92       	push	r6
    756e:	7f 92       	push	r7
    7570:	8f 92       	push	r8
    7572:	9f 92       	push	r9
    7574:	af 92       	push	r10
    7576:	bf 92       	push	r11
    7578:	cf 92       	push	r12
    757a:	df 92       	push	r13
    757c:	ef 92       	push	r14
    757e:	ff 92       	push	r15
    7580:	0f 93       	push	r16
    7582:	1f 93       	push	r17
    7584:	cf 93       	push	r28
    7586:	df 93       	push	r29
    7588:	cd b7       	in	r28, 0x3d	; 61
    758a:	de b7       	in	r29, 0x3e	; 62
    758c:	ca 1b       	sub	r28, r26
    758e:	db 0b       	sbc	r29, r27
    7590:	0f b6       	in	r0, 0x3f	; 63
    7592:	f8 94       	cli
    7594:	de bf       	out	0x3e, r29	; 62
    7596:	0f be       	out	0x3f, r0	; 63
    7598:	cd bf       	out	0x3d, r28	; 61
    759a:	09 94       	ijmp

0000759c <__epilogue_restores__>:
    759c:	2a 88       	ldd	r2, Y+18	; 0x12
    759e:	39 88       	ldd	r3, Y+17	; 0x11
    75a0:	48 88       	ldd	r4, Y+16	; 0x10
    75a2:	5f 84       	ldd	r5, Y+15	; 0x0f
    75a4:	6e 84       	ldd	r6, Y+14	; 0x0e
    75a6:	7d 84       	ldd	r7, Y+13	; 0x0d
    75a8:	8c 84       	ldd	r8, Y+12	; 0x0c
    75aa:	9b 84       	ldd	r9, Y+11	; 0x0b
    75ac:	aa 84       	ldd	r10, Y+10	; 0x0a
    75ae:	b9 84       	ldd	r11, Y+9	; 0x09
    75b0:	c8 84       	ldd	r12, Y+8	; 0x08
    75b2:	df 80       	ldd	r13, Y+7	; 0x07
    75b4:	ee 80       	ldd	r14, Y+6	; 0x06
    75b6:	fd 80       	ldd	r15, Y+5	; 0x05
    75b8:	0c 81       	ldd	r16, Y+4	; 0x04
    75ba:	1b 81       	ldd	r17, Y+3	; 0x03
    75bc:	aa 81       	ldd	r26, Y+2	; 0x02
    75be:	b9 81       	ldd	r27, Y+1	; 0x01
    75c0:	ce 0f       	add	r28, r30
    75c2:	d1 1d       	adc	r29, r1
    75c4:	0f b6       	in	r0, 0x3f	; 63
    75c6:	f8 94       	cli
    75c8:	de bf       	out	0x3e, r29	; 62
    75ca:	0f be       	out	0x3f, r0	; 63
    75cc:	cd bf       	out	0x3d, r28	; 61
    75ce:	ed 01       	movw	r28, r26
    75d0:	08 95       	ret

000075d2 <ceil>:
    75d2:	3b d0       	rcall	.+118    	; 0x764a <__fp_trunc>
    75d4:	80 f0       	brcs	.+32     	; 0x75f6 <ceil+0x24>
    75d6:	9f 37       	cpi	r25, 0x7F	; 127
    75d8:	40 f4       	brcc	.+16     	; 0x75ea <ceil+0x18>
    75da:	91 11       	cpse	r25, r1
    75dc:	0e f4       	brtc	.+2      	; 0x75e0 <ceil+0xe>
    75de:	4d c0       	rjmp	.+154    	; 0x767a <__fp_szero>
    75e0:	60 e0       	ldi	r22, 0x00	; 0
    75e2:	70 e0       	ldi	r23, 0x00	; 0
    75e4:	80 e8       	ldi	r24, 0x80	; 128
    75e6:	9f e3       	ldi	r25, 0x3F	; 63
    75e8:	08 95       	ret
    75ea:	26 f0       	brts	.+8      	; 0x75f4 <ceil+0x22>
    75ec:	1b 16       	cp	r1, r27
    75ee:	61 1d       	adc	r22, r1
    75f0:	71 1d       	adc	r23, r1
    75f2:	81 1d       	adc	r24, r1
    75f4:	01 c0       	rjmp	.+2      	; 0x75f8 <__fp_mintl>
    75f6:	1b c0       	rjmp	.+54     	; 0x762e <__fp_mpack>

000075f8 <__fp_mintl>:
    75f8:	88 23       	and	r24, r24
    75fa:	71 f4       	brne	.+28     	; 0x7618 <__fp_mintl+0x20>
    75fc:	77 23       	and	r23, r23
    75fe:	21 f0       	breq	.+8      	; 0x7608 <__fp_mintl+0x10>
    7600:	98 50       	subi	r25, 0x08	; 8
    7602:	87 2b       	or	r24, r23
    7604:	76 2f       	mov	r23, r22
    7606:	07 c0       	rjmp	.+14     	; 0x7616 <__fp_mintl+0x1e>
    7608:	66 23       	and	r22, r22
    760a:	11 f4       	brne	.+4      	; 0x7610 <__fp_mintl+0x18>
    760c:	99 27       	eor	r25, r25
    760e:	0d c0       	rjmp	.+26     	; 0x762a <__fp_mintl+0x32>
    7610:	90 51       	subi	r25, 0x10	; 16
    7612:	86 2b       	or	r24, r22
    7614:	70 e0       	ldi	r23, 0x00	; 0
    7616:	60 e0       	ldi	r22, 0x00	; 0
    7618:	2a f0       	brmi	.+10     	; 0x7624 <__fp_mintl+0x2c>
    761a:	9a 95       	dec	r25
    761c:	66 0f       	add	r22, r22
    761e:	77 1f       	adc	r23, r23
    7620:	88 1f       	adc	r24, r24
    7622:	da f7       	brpl	.-10     	; 0x761a <__fp_mintl+0x22>
    7624:	88 0f       	add	r24, r24
    7626:	96 95       	lsr	r25
    7628:	87 95       	ror	r24
    762a:	97 f9       	bld	r25, 7
    762c:	08 95       	ret

0000762e <__fp_mpack>:
    762e:	9f 3f       	cpi	r25, 0xFF	; 255
    7630:	31 f0       	breq	.+12     	; 0x763e <__fp_mpack_finite+0xc>

00007632 <__fp_mpack_finite>:
    7632:	91 50       	subi	r25, 0x01	; 1
    7634:	20 f4       	brcc	.+8      	; 0x763e <__fp_mpack_finite+0xc>
    7636:	87 95       	ror	r24
    7638:	77 95       	ror	r23
    763a:	67 95       	ror	r22
    763c:	b7 95       	ror	r27
    763e:	88 0f       	add	r24, r24
    7640:	91 1d       	adc	r25, r1
    7642:	96 95       	lsr	r25
    7644:	87 95       	ror	r24
    7646:	97 f9       	bld	r25, 7
    7648:	08 95       	ret

0000764a <__fp_trunc>:
    764a:	25 d0       	rcall	.+74     	; 0x7696 <__fp_splitA>
    764c:	a0 f0       	brcs	.+40     	; 0x7676 <__fp_trunc+0x2c>
    764e:	be e7       	ldi	r27, 0x7E	; 126
    7650:	b9 17       	cp	r27, r25
    7652:	88 f4       	brcc	.+34     	; 0x7676 <__fp_trunc+0x2c>
    7654:	bb 27       	eor	r27, r27
    7656:	9f 38       	cpi	r25, 0x8F	; 143
    7658:	60 f4       	brcc	.+24     	; 0x7672 <__fp_trunc+0x28>
    765a:	16 16       	cp	r1, r22
    765c:	b1 1d       	adc	r27, r1
    765e:	67 2f       	mov	r22, r23
    7660:	78 2f       	mov	r23, r24
    7662:	88 27       	eor	r24, r24
    7664:	98 5f       	subi	r25, 0xF8	; 248
    7666:	f7 cf       	rjmp	.-18     	; 0x7656 <__fp_trunc+0xc>
    7668:	86 95       	lsr	r24
    766a:	77 95       	ror	r23
    766c:	67 95       	ror	r22
    766e:	b1 1d       	adc	r27, r1
    7670:	93 95       	inc	r25
    7672:	96 39       	cpi	r25, 0x96	; 150
    7674:	c8 f3       	brcs	.-14     	; 0x7668 <__fp_trunc+0x1e>
    7676:	08 95       	ret

00007678 <__fp_zero>:
    7678:	e8 94       	clt

0000767a <__fp_szero>:
    767a:	bb 27       	eor	r27, r27
    767c:	66 27       	eor	r22, r22
    767e:	77 27       	eor	r23, r23
    7680:	cb 01       	movw	r24, r22
    7682:	97 f9       	bld	r25, 7
    7684:	08 95       	ret

00007686 <__fp_split3>:
    7686:	57 fd       	sbrc	r21, 7
    7688:	90 58       	subi	r25, 0x80	; 128
    768a:	44 0f       	add	r20, r20
    768c:	55 1f       	adc	r21, r21
    768e:	59 f0       	breq	.+22     	; 0x76a6 <__fp_splitA+0x10>
    7690:	5f 3f       	cpi	r21, 0xFF	; 255
    7692:	71 f0       	breq	.+28     	; 0x76b0 <__fp_splitA+0x1a>
    7694:	47 95       	ror	r20

00007696 <__fp_splitA>:
    7696:	88 0f       	add	r24, r24
    7698:	97 fb       	bst	r25, 7
    769a:	99 1f       	adc	r25, r25
    769c:	61 f0       	breq	.+24     	; 0x76b6 <__fp_splitA+0x20>
    769e:	9f 3f       	cpi	r25, 0xFF	; 255
    76a0:	79 f0       	breq	.+30     	; 0x76c0 <__fp_splitA+0x2a>
    76a2:	87 95       	ror	r24
    76a4:	08 95       	ret
    76a6:	12 16       	cp	r1, r18
    76a8:	13 06       	cpc	r1, r19
    76aa:	14 06       	cpc	r1, r20
    76ac:	55 1f       	adc	r21, r21
    76ae:	f2 cf       	rjmp	.-28     	; 0x7694 <__fp_split3+0xe>
    76b0:	46 95       	lsr	r20
    76b2:	f1 df       	rcall	.-30     	; 0x7696 <__fp_splitA>
    76b4:	08 c0       	rjmp	.+16     	; 0x76c6 <__fp_splitA+0x30>
    76b6:	16 16       	cp	r1, r22
    76b8:	17 06       	cpc	r1, r23
    76ba:	18 06       	cpc	r1, r24
    76bc:	99 1f       	adc	r25, r25
    76be:	f1 cf       	rjmp	.-30     	; 0x76a2 <__fp_splitA+0xc>
    76c0:	86 95       	lsr	r24
    76c2:	71 05       	cpc	r23, r1
    76c4:	61 05       	cpc	r22, r1
    76c6:	08 94       	sec
    76c8:	08 95       	ret

000076ca <_exit>:
    76ca:	f8 94       	cli

000076cc <__stop_program>:
    76cc:	ff cf       	rjmp	.-2      	; 0x76cc <__stop_program>
